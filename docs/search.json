[
  {
    "objectID": "exercises/Quarto-manuscript_exercise.html",
    "href": "exercises/Quarto-manuscript_exercise.html",
    "title": "Reproducible Research with <img style=\"vertical-align:middle; height:1em; border: none; background: none;\" src=\"assets/images/Rlogo.png\"> and <img style=\"vertical-align:middle; height:1em;\" src=\"assets/images/quarto-logo-trademark.svg\">",
    "section": "",
    "text": "In this exercise we will start to write an academic manuscript using Quarto and incorporating data from the example R project we have used in the other exercises. The project is the same that is created in the first workflow exercise, however to save time or in case you haven’t completed this exercise we will start with the finished output from it.\nIf you would prefer to view the exercise script offline, here is a PDF version:  Download exercise instructions\n\n\n\nClick here to download the resources for the exercise:  Download resources for exercise\nUnzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n\n\n\n\nOpen RStudio and navigate to the folder where you saved the resources for the exercise.\nOpen the Rstudio project file in the directory (Rice_farm_analysis.Rproj)\n\n\n\n\n\nNote: Because Quarto is bundled with Rstudio if you have a recent version of Rstudio you may already have Quarto installed. To check go to File &gt; New File and you should see Quarto Document as an option.\nIf you do not have Quarto installed you can install it from the Quarto website here\n\n\n\n\nThe Quarto website provides a template for creating a Manuscript project but we will create one from scratch so that you understand the various files.\n\nThe 1st step is to create a Quarto document that will act as the primary content file, go to File &gt; New File &gt; Quarto Document. You don’t need to add title or author information in the wizard as we will do this in the document itself.\n\n\n\n\nQuarto document wizard\n\n\n\nSave the file as index.qmd in the root directory of the project. Using index as the file name is the convention for the main content file in a Quarto project and the software will look for this when attempting to create an output of the content. However it is possible to use a different file name if you prefer but it requires setting an option in the configuration file.\n\n\n\n\nYAML files (.yml) are configuration files, and in the case of Quarto the convention is to use a file named _quarto.yml in the root directory of the project. This file will be used to set a range of options including the project type, code execution options and options for the output format/s.\n\nCreate a new file with File &gt; New File &gt; Text File and save it to the root directory of the project and name it _quarto.yml. Adding the extension .yml will automatically set the file type to YAML.\n\n\n\n\n\nNote: All YAML options are set using key-value pairs and the Quarto documentation provides a list of options that can be set in the configuration file.\nThe first step is to identify your project as a manuscript by entering the following code in the _quarto.yml file:\n\n\n\n_quarto.yml\n\nproject: \n  type: manuscript\n\n\nIf you do want your main content file to be named something other than index.* you can add the file name with the article key (but make sure that your .qmd file name matches the entry):\n\n\n\n_quarto.yml\n\nmanuscript:\n  article: Rice_farm.qmd\n\n\n\n\nThe next step is to set the output formats for the document. Quarto supports outputting your manuscript to a range of formats simultaneously including HTML, PDF, Docx and LaTeX. The output formats and their individual options are also set in the _quarto.yml file.\n\nFor this exercise we will set the output formats to HTML, docx and PDF. Add the following code to the _quarto.yml file:\n\n\n\n_quarto.yml\n\nformat:\n  html:\n    toc: true\n    comments:\n      hypothesis: true\n  docx: default\n\n\nFor PDF outputs specifically, there a number of templates that have been produced to align with the formatting of major academic publishers. These are available as Quarto extensions.\nFor this exercise we will use the Elsevier template. Quarto extensions can be installed directly using the terminal in Rstudio. To install the Elsevier template run the following code in the terminal: quarto add quarto-journals/elsevier\n\n\n\n\n\n\n\nOnce the template is installed you can set the PDF output to use the template by adding the following code to the _quarto.yml file indented below the existing format entry:\n\n\n\n_quarto.yml\n\n  elsevier-pdf: default\n\n\n\n\nThe front matter of the document is where you can enter the title, author/s and other metadata for the document. In the case of academic manuscripts this also includes the abstract, keywords, author institutions and roles (according to the CRediT Taxonomy). The full list of front matter options for Quarto manuscripts can be found here.\nFront matter is entered as YAML content at the start of the main content file index.qmd. To be recognised as YAML content it must be enclosed by three dashes --- at the start and end of the content block.\n\nEnter example front matter for this exercise as follows:\n\n---\ntitle: An Analysis of Rice Production in Indonesia\nauthor:\n  - name: Jane Doe\n    orcid: 0000-0002-0760-5497\n    corresponding: true\n    email: Janedoe@gmail.com\n    roles:\n      - Investigation\n      - Project administration\n      - Software\n      - Visualization\n    affiliations:\n      - id: ETH_PLUS\n        name: ETH Zürich\n        department: Planning of Landscape and Urban Systems (PLUS) Institut für Raum- und Landschaftsentwicklung (IRL)\n        address: HIL H 52.1, Stefano-Franscini-Platz 5\n        city: Zürich\n        postal-code: 8093\n  - name: John Doe\n    orcid: 0000-0002-7859-8394\n    corresponding: false\n    roles: []\n    affiliations: \n      - id: ETH_PLUS\nkeywords:\n  - Rice farms\n  - Indonesia\n  - Regional production\nabstract: |\n  This is the abstract\nplain-language-summary: |\n  Rice production data for the country of Indonesia is analysed ...\ndate: last-modified\nnumber-sections: true\n---\nNow take some time to practice editing this content by, for example, changing the title, adding yourself as an author or changing the abstract. You will see that indentation is very important for YAML content to work correctly.\nOne nice feature is the fact that you can use the affiliation: id option to avoid needing to repeat details for authors from the same institution.\n\n\n\nNow we have our manuscript project and content file set up let’s add some content. Content in Quarto files is written in Markdown format, which takes some getting used to but will quickly become intuitive.\n\nAdd some content to the index.qmd file. For example, use # to create a heading and ## for subheadings:\n\n# Introduction\n\nRice is a staple food in Indonesia and is grown in many regions across the country. The production of rice is a key economic activity in Indonesia and is a major source of employment for many people. In this study we analyse the production of different types of rice in different regions in Indonesia.  \n\n# Methods\n\n## Data\nFor this study we used data from the Indonesian Ministry of Agriculture on rice production in the country. The data was collected from different regions across Indonesia and includes information on the types of rice grown, the amount of rice produced and the area of land used for rice cultivation.\n\n# Results\n\nFigure 1 shows the distribution of rice production across different regions in Indonesia. Table 1 shows the types of rice grown in each region and the amount of rice produced.\nNow lets render our manuscript for the first time to see how the output looks. To render the document click the Render button in the top of the Rstudio source pane:\n\n\n\n\n\nThis will render the document to HTML and open it in the viewer pane on the right:\n\n\n\n\n\n\n\n\nFigures and tables can be added to quarto documents using code blocks in various programming languages. To add a code block into a Quarto document you use three backticks followed by the language name in braces, for example an R chunk would be: ```{r} and then close the block with another three backticks. Code blocks are executed when the document is rendered and the output is included in the final document (although this behaviour can be controlled with execution options).\nLets add a figure to the document using the R code from the exercise script Scripts/02_data_visualisation.R to create a bar chart of the area of farms growing different types in different regions in Indonesia.\n\nAdd the following code block to the index.qmd file below the Results heading:\n\n```{r}\n\n# Load required packages\nlibrary(ggplot2)\n\n# load the summarized data\nrice_data_summary &lt;- read.csv(\"Data/Processed/RiceFarms_summary.csv\")\n\n# plot summary data as grouped bar chart\nggplot(rice_data_summary, aes(x=region, y=size, fill=varieties)) +\n  geom_bar(stat=\"identity\", position=\"dodge\") +\n  labs(title=\"Total size of farms by region and rice varieties\",\n       x=\"Region\",\n       y=\"Total size of farms\",\n       fill=\"Rice varieties\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\nNow if you re-render the document you should see the figure included in the output.\n\n\n\nQuarto allows you to cross-reference figures, tables and sections in your document.\n\nAdd a label to the figure code block by adding the following line at the top of the code block:\n\n```{r}\n#| label: fig-barchart\n```\n\nNow add a cross-reference to this figure in the text by changing the word Figure 1 to @fig-barchart in the 1st sentence of the Results section:\n\n# Results\n\n@fig-barchart shows the distribution of rice production across different regions in Indonesia. Table 1 shows the types of rice grown in each region and the amount of rice produced.\n\nNow if you re-render the document you will see that the figure has been automatically numbered and the text now contains a hyperlinked cross reference to the figure:\n\n\n\n\n\n\n\n\n\nQuarto provides the functionality to not only add citations to your documents but to automatically generate a bibliography, both of which can be formatted according to a wide range of citation styles to meet journal requirements. For a detailed explanation of citations with Quarto see the guide here.\nQuarto uses the standard Pandoc markdown representation for citations, whereby citations go inside square brackets and are separated by semicolons, e.g. [@citation]. Citations can be entered manually however they need to have a corresponding entry in the articles bibliography file (a .bib or .csl file in the root directory of the project). Instead, we will add a citation using the wizard in the Quarto visual editor which will automatically create the citation entry in the bibliography file.\n\nAt the top of the source pane click the Visual button to switch to the visual editor:\n\n\n\n\n\n\n\nNavigate the methods section and position the cursor at the end of the sentence:\n\nFor this study we used data from the Indonesian Ministry of Agriculture on rice production in the country.\n\nIn the Visual editor tool bar at the top the top of the source pane click Insert and in the drop down menu select Citation (or alternatively use the keyboard shortcut Ctrl + Shift + F8 on windows). This will open the Insert Citation wizard:\n\n\n\n\n\n\n\nThe Rice Farms data used for the exercises comes from the plm package so we will cite this as an example (even though it is totally accurate in terms of the sentence content). Click on the tab for R packages on the left side of the wizard, enter plm in the search bar and click on the entry in the window below to select it:\n\n\n\n\n\n\n\nMake sure the Create box in the bottom left corner of the wizard has a value in it, the default should be references.bib.\nNow click Insert and the wizard will close, you will see that the citation has been added at the cursor location and a references.bib has been created in the root directory of the project. If you openthis file you can see the bibliographic details of the citation (Note if you have previously added citations or already created a references.bib file citations will all be added to the same file.\n\nNow when you render the document this citation will automatically be hyperlinked to the corresponding entry in the bibliography that is appended to the end of the document.\nTip: In our experience the easiest method of adding academic citations is to use the Quarto-Zotero integration. In this case you select the Zotero tab in the Insert Citation wizard and if Zotero is running on your computer you will be able to search your whole library to add citations.\n\n\n\nIn this exercise we have only touched upon a few of the many of the useful features of Quarto for writing reproducible research documents. As such we would urge you to look through the Quarto documentation to learn about some of the other features as well as useful packages and extensions such as the trackdown package which allows you to convert Quarto documents in Google docs (and back to Quarto again) to facilitate collaboration with users not familiar with the format."
  },
  {
    "objectID": "exercises/Quarto-manuscript_exercise.html#sec-Quarto_exercise",
    "href": "exercises/Quarto-manuscript_exercise.html#sec-Quarto_exercise",
    "title": "Reproducible Research with <img style=\"vertical-align:middle; height:1em; border: none; background: none;\" src=\"assets/images/Rlogo.png\"> and <img style=\"vertical-align:middle; height:1em;\" src=\"assets/images/quarto-logo-trademark.svg\">",
    "section": "",
    "text": "In this exercise we will start to write an academic manuscript using Quarto and incorporating data from the example R project we have used in the other exercises. The project is the same that is created in the first workflow exercise, however to save time or in case you haven’t completed this exercise we will start with the finished output from it.\nIf you would prefer to view the exercise script offline, here is a PDF version:  Download exercise instructions\n\n\n\nClick here to download the resources for the exercise:  Download resources for exercise\nUnzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n\n\n\n\nOpen RStudio and navigate to the folder where you saved the resources for the exercise.\nOpen the Rstudio project file in the directory (Rice_farm_analysis.Rproj)\n\n\n\n\n\nNote: Because Quarto is bundled with Rstudio if you have a recent version of Rstudio you may already have Quarto installed. To check go to File &gt; New File and you should see Quarto Document as an option.\nIf you do not have Quarto installed you can install it from the Quarto website here\n\n\n\n\nThe Quarto website provides a template for creating a Manuscript project but we will create one from scratch so that you understand the various files.\n\nThe 1st step is to create a Quarto document that will act as the primary content file, go to File &gt; New File &gt; Quarto Document. You don’t need to add title or author information in the wizard as we will do this in the document itself.\n\n\n\n\nQuarto document wizard\n\n\n\nSave the file as index.qmd in the root directory of the project. Using index as the file name is the convention for the main content file in a Quarto project and the software will look for this when attempting to create an output of the content. However it is possible to use a different file name if you prefer but it requires setting an option in the configuration file.\n\n\n\n\nYAML files (.yml) are configuration files, and in the case of Quarto the convention is to use a file named _quarto.yml in the root directory of the project. This file will be used to set a range of options including the project type, code execution options and options for the output format/s.\n\nCreate a new file with File &gt; New File &gt; Text File and save it to the root directory of the project and name it _quarto.yml. Adding the extension .yml will automatically set the file type to YAML.\n\n\n\n\n\nNote: All YAML options are set using key-value pairs and the Quarto documentation provides a list of options that can be set in the configuration file.\nThe first step is to identify your project as a manuscript by entering the following code in the _quarto.yml file:\n\n\n\n_quarto.yml\n\nproject: \n  type: manuscript\n\n\nIf you do want your main content file to be named something other than index.* you can add the file name with the article key (but make sure that your .qmd file name matches the entry):\n\n\n\n_quarto.yml\n\nmanuscript:\n  article: Rice_farm.qmd\n\n\n\n\nThe next step is to set the output formats for the document. Quarto supports outputting your manuscript to a range of formats simultaneously including HTML, PDF, Docx and LaTeX. The output formats and their individual options are also set in the _quarto.yml file.\n\nFor this exercise we will set the output formats to HTML, docx and PDF. Add the following code to the _quarto.yml file:\n\n\n\n_quarto.yml\n\nformat:\n  html:\n    toc: true\n    comments:\n      hypothesis: true\n  docx: default\n\n\nFor PDF outputs specifically, there a number of templates that have been produced to align with the formatting of major academic publishers. These are available as Quarto extensions.\nFor this exercise we will use the Elsevier template. Quarto extensions can be installed directly using the terminal in Rstudio. To install the Elsevier template run the following code in the terminal: quarto add quarto-journals/elsevier\n\n\n\n\n\n\n\nOnce the template is installed you can set the PDF output to use the template by adding the following code to the _quarto.yml file indented below the existing format entry:\n\n\n\n_quarto.yml\n\n  elsevier-pdf: default\n\n\n\n\nThe front matter of the document is where you can enter the title, author/s and other metadata for the document. In the case of academic manuscripts this also includes the abstract, keywords, author institutions and roles (according to the CRediT Taxonomy). The full list of front matter options for Quarto manuscripts can be found here.\nFront matter is entered as YAML content at the start of the main content file index.qmd. To be recognised as YAML content it must be enclosed by three dashes --- at the start and end of the content block.\n\nEnter example front matter for this exercise as follows:\n\n---\ntitle: An Analysis of Rice Production in Indonesia\nauthor:\n  - name: Jane Doe\n    orcid: 0000-0002-0760-5497\n    corresponding: true\n    email: Janedoe@gmail.com\n    roles:\n      - Investigation\n      - Project administration\n      - Software\n      - Visualization\n    affiliations:\n      - id: ETH_PLUS\n        name: ETH Zürich\n        department: Planning of Landscape and Urban Systems (PLUS) Institut für Raum- und Landschaftsentwicklung (IRL)\n        address: HIL H 52.1, Stefano-Franscini-Platz 5\n        city: Zürich\n        postal-code: 8093\n  - name: John Doe\n    orcid: 0000-0002-7859-8394\n    corresponding: false\n    roles: []\n    affiliations: \n      - id: ETH_PLUS\nkeywords:\n  - Rice farms\n  - Indonesia\n  - Regional production\nabstract: |\n  This is the abstract\nplain-language-summary: |\n  Rice production data for the country of Indonesia is analysed ...\ndate: last-modified\nnumber-sections: true\n---\nNow take some time to practice editing this content by, for example, changing the title, adding yourself as an author or changing the abstract. You will see that indentation is very important for YAML content to work correctly.\nOne nice feature is the fact that you can use the affiliation: id option to avoid needing to repeat details for authors from the same institution.\n\n\n\nNow we have our manuscript project and content file set up let’s add some content. Content in Quarto files is written in Markdown format, which takes some getting used to but will quickly become intuitive.\n\nAdd some content to the index.qmd file. For example, use # to create a heading and ## for subheadings:\n\n# Introduction\n\nRice is a staple food in Indonesia and is grown in many regions across the country. The production of rice is a key economic activity in Indonesia and is a major source of employment for many people. In this study we analyse the production of different types of rice in different regions in Indonesia.  \n\n# Methods\n\n## Data\nFor this study we used data from the Indonesian Ministry of Agriculture on rice production in the country. The data was collected from different regions across Indonesia and includes information on the types of rice grown, the amount of rice produced and the area of land used for rice cultivation.\n\n# Results\n\nFigure 1 shows the distribution of rice production across different regions in Indonesia. Table 1 shows the types of rice grown in each region and the amount of rice produced.\nNow lets render our manuscript for the first time to see how the output looks. To render the document click the Render button in the top of the Rstudio source pane:\n\n\n\n\n\nThis will render the document to HTML and open it in the viewer pane on the right:\n\n\n\n\n\n\n\n\nFigures and tables can be added to quarto documents using code blocks in various programming languages. To add a code block into a Quarto document you use three backticks followed by the language name in braces, for example an R chunk would be: ```{r} and then close the block with another three backticks. Code blocks are executed when the document is rendered and the output is included in the final document (although this behaviour can be controlled with execution options).\nLets add a figure to the document using the R code from the exercise script Scripts/02_data_visualisation.R to create a bar chart of the area of farms growing different types in different regions in Indonesia.\n\nAdd the following code block to the index.qmd file below the Results heading:\n\n```{r}\n\n# Load required packages\nlibrary(ggplot2)\n\n# load the summarized data\nrice_data_summary &lt;- read.csv(\"Data/Processed/RiceFarms_summary.csv\")\n\n# plot summary data as grouped bar chart\nggplot(rice_data_summary, aes(x=region, y=size, fill=varieties)) +\n  geom_bar(stat=\"identity\", position=\"dodge\") +\n  labs(title=\"Total size of farms by region and rice varieties\",\n       x=\"Region\",\n       y=\"Total size of farms\",\n       fill=\"Rice varieties\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\nNow if you re-render the document you should see the figure included in the output.\n\n\n\nQuarto allows you to cross-reference figures, tables and sections in your document.\n\nAdd a label to the figure code block by adding the following line at the top of the code block:\n\n```{r}\n#| label: fig-barchart\n```\n\nNow add a cross-reference to this figure in the text by changing the word Figure 1 to @fig-barchart in the 1st sentence of the Results section:\n\n# Results\n\n@fig-barchart shows the distribution of rice production across different regions in Indonesia. Table 1 shows the types of rice grown in each region and the amount of rice produced.\n\nNow if you re-render the document you will see that the figure has been automatically numbered and the text now contains a hyperlinked cross reference to the figure:\n\n\n\n\n\n\n\n\n\nQuarto provides the functionality to not only add citations to your documents but to automatically generate a bibliography, both of which can be formatted according to a wide range of citation styles to meet journal requirements. For a detailed explanation of citations with Quarto see the guide here.\nQuarto uses the standard Pandoc markdown representation for citations, whereby citations go inside square brackets and are separated by semicolons, e.g. [@citation]. Citations can be entered manually however they need to have a corresponding entry in the articles bibliography file (a .bib or .csl file in the root directory of the project). Instead, we will add a citation using the wizard in the Quarto visual editor which will automatically create the citation entry in the bibliography file.\n\nAt the top of the source pane click the Visual button to switch to the visual editor:\n\n\n\n\n\n\n\nNavigate the methods section and position the cursor at the end of the sentence:\n\nFor this study we used data from the Indonesian Ministry of Agriculture on rice production in the country.\n\nIn the Visual editor tool bar at the top the top of the source pane click Insert and in the drop down menu select Citation (or alternatively use the keyboard shortcut Ctrl + Shift + F8 on windows). This will open the Insert Citation wizard:\n\n\n\n\n\n\n\nThe Rice Farms data used for the exercises comes from the plm package so we will cite this as an example (even though it is totally accurate in terms of the sentence content). Click on the tab for R packages on the left side of the wizard, enter plm in the search bar and click on the entry in the window below to select it:\n\n\n\n\n\n\n\nMake sure the Create box in the bottom left corner of the wizard has a value in it, the default should be references.bib.\nNow click Insert and the wizard will close, you will see that the citation has been added at the cursor location and a references.bib has been created in the root directory of the project. If you openthis file you can see the bibliographic details of the citation (Note if you have previously added citations or already created a references.bib file citations will all be added to the same file.\n\nNow when you render the document this citation will automatically be hyperlinked to the corresponding entry in the bibliography that is appended to the end of the document.\nTip: In our experience the easiest method of adding academic citations is to use the Quarto-Zotero integration. In this case you select the Zotero tab in the Insert Citation wizard and if Zotero is running on your computer you will be able to search your whole library to add citations.\n\n\n\nIn this exercise we have only touched upon a few of the many of the useful features of Quarto for writing reproducible research documents. As such we would urge you to look through the Quarto documentation to learn about some of the other features as well as useful packages and extensions such as the trackdown package which allows you to convert Quarto documents in Google docs (and back to Quarto again) to facilitate collaboration with users not familiar with the format."
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Reproducible Research with  and : Workflows for data, projects and publications",
    "section": "",
    "text": "We are four researchers from the research group Planning of Landscape and Urban Systems (PLUS) at ETH Zürich. Click on the social icons below our pictures to find out more about our individual research or get in touch with us.\n\n\n\n\n\nDoctoral Researcher\n    \n\n\n\n\n\n\nDoctoral Researcher\n   \n\n\n\n\n\n\nResearch Assistant\n   \n\n\n\n\n\n\nSenior scientist\n   \n\n\n\n\n\n\nReproducibility is a key aspect of reliable scientific research. It enables other researchers to reproduce the same results using the original data, code, and documentation [1]. Below are the core principles to ensure reproducibility in research:\nStarts with planning\nReproducibility begins during the planning stage. It is essential to organize data management and ensure clear protocols are in place even before starting the analysis. Consistent Data Storage Regular backups of data are crucial. Storing data in multiple locations ensures accessibility and minimizes the risk of data loss. [2]\nContains clear documentation\nThorough documentation is essential to guarantee that data and methods can be accurately interpreted and reproduced by others. This entails the use of well-organised files and the inclusion of metadata that describes the data, how it was obtained, and how it was processed. [[2]][3]\nUtilizes version control\nUsing version control systems helps track changes in the project over time. This approach preserves the history of the project and facilitates the reversion of files to a previous state in the event of an error. [2]\nIs accessible\nData should be stored in nonproprietary, portable formats to ensure broad accessibility and long-term usability. This practice ensures that researchers can access the data without relying on specific software tools. Making data and code publicly available in accessible repositories supports scientific transparency and allows broader use of research outputs. [[2]][3]\nBy following these steps, researchers contribute to the wider scientific community, ensuring that their work can be efficiently and accurately reproduced by others.\nIntroducing the FAIR Principles\nWhile the principles above lay the groundwork for reproducibility, the FAIR principles (Findability, Accessibility, Interoperability, and Reusability) provide a more comprehensive framework for enhancing the value of research data in the digital age. These principles expand on reproducibility by emphasizing not only human access to research outputs but also machine actionability, ensuring that data can be effectively found, accessed, and reused by both people and computational tools​. [4]\nHow FAIR Principles Build on Reproducibility\nThe FAIR principles naturally complement and expand on the core aspects of reproducible research:\n\nFindability reinforces the importance of clear documentation. Assigning persistent identifiers and providing rich metadata makes it easier for researchers and search tools to locate and understand datasets, ensuring that your research remains accessible over time.\nAccessibility builds on the concept of using nonproprietary formats. FAIR emphasizes that data should be retrievable using open, standardized protocols, which ensures long-term access to both the data and its metadata, even if the data itself becomes unavailable.\nInteroperability relates to the consistent use of data standards and version control. By using standardized formats and vocabularies, research data can be more easily integrated with other datasets, supporting reuse and long-term relevance in broader research contexts.\nReusability directly aligns with the goals of reproducible research by ensuring that data is accompanied by clear licensing and provenance, allowing others to confidently reuse it. This principle reinforces the need for thorough documentation and transparent methods.\n\nBy incorporating the FAIR principles, researchers ensure that their data not only meets the standards of reproducibility but is also optimized for long-term use and discovery. This fosters a research environment where data is more transparent, accessible, and impactful over time​. [4]\n\n\n\nIn recent years, various scientific disciplines have experienced what is known as a “replication crisis”. This crisis arises when researchers are unable to reproduce the headline results of key studies using the reported data and methods [[5]][6] [7]. This lack of reproducibility undermines public trust in science, as it raises doubts about the validity of research findings.\n\n\nPersonal Reference\nConducting reproducible research simplifies the process of remembering how and why specific analyses were performed. This makes it easier to explain your work to collaborators, supervisors, and reviewers, enhancing communication throughout your project. [2]\nEfficient\nModifications Reproducible research enables you to quickly adjust analyses and figures when requested by supervisors, collaborators, or reviewers. This streamlined process can save substantial time during revisions. [2]\nStreamlined Future Projects\nBy maintaining well-organized and reproducible systems, you can reuse code and organizational structures for future projects. This reduces the time and effort required for similar tasks in subsequent research. [2]\nDemonstrates Rigor and Transparency\nReproducibility demonstrates scientific rigor and transparency. It allows others to verify your methods and results, improving the peer review process and reducing the risk of errors or accusations of misconduct. [2]\nIncreases Impact and Citations\nMaking your research reproducible can lead to higher citation rates [8] [9]. By sharing your code and data, you enable others to reuse your work, broadening its impact and increasing its relevance in the scientific community. [10] [11].\n\n\n\nFacilitates Learning\nSharing data and code helps others learn from your work more easily. New researchers can use your data and code as a reference, speeding up their learning curve and improving the quality of their analyses. [2]\nEnables Reproducibility\nReproducible research makes it simpler for others to reproduce and build upon your work, fostering more compatible and robust research across studies. [2]\nError Detection\nBy allowing others to access and review your data and code, reproducibility helps detect and correct errors, ensuring that mistakes are caught early and reducing the chance of their propagation in future research. [2]\n\n\n\n\nR is increasingly recognized as a powerful tool for ensuring reproducibility in scientific research. Here are some key advantages of using R for reproducible research:\nOpen Source\nAccessibility R is freely available to everyone, eliminating cost barriers and promoting inclusive access to research tools. This open-source model ensures that researchers around the world can use and contribute to its development, fostering a collaborative research environment. [3]\nComprehensive Documentation\nR encourages thorough documentation of the entire research process. This ensures that analyses are well-tracked and can be easily replicated across different projects, enhancing the overall transparency and reliability of the research.\nIntegrated Version Control\nR seamlessly integrates with version control systems like Git, allowing researchers to track changes to code, data, and documents. This helps maintain a detailed record of a project’s evolution and ensures that all steps are easily reproducible. [3]\nConsistency Across Platforms\nR provides a stable environment that works consistently across different operating systems, whether you are using Windows, Mac, or Linux. This cross-platform consistency greatly enhances the reproducibility of research across diverse systems.\nBroad Community Support\nThe R community is large and active, continuously contributing to the improvement of the software. This broad support makes R a reliable choice for long-term research projects, ensuring that new tools and methods are constantly being developed and shared.\nFlexibility and Adaptability\nR offers a wide range of tools and functions that can be adapted to various research needs. This flexibility allows researchers to handle diverse tasks within a reproducible framework, making it a versatile tool for projects of all kinds.\n\n:::",
    "crumbs": [
      "View in presentation format"
    ]
  },
  {
    "objectID": "presentation.html#about-us",
    "href": "presentation.html#about-us",
    "title": "Reproducible Research with  and : Workflows for data, projects and publications",
    "section": "",
    "text": "We are four researchers from the research group Planning of Landscape and Urban Systems (PLUS) at ETH Zürich. Click on the social icons below our pictures to find out more about our individual research or get in touch with us.\n\n\n\n\n\nDoctoral Researcher\n    \n\n\n\n\n\n\nDoctoral Researcher\n   \n\n\n\n\n\n\nResearch Assistant\n   \n\n\n\n\n\n\nSenior scientist",
    "crumbs": [
      "View in presentation format"
    ]
  },
  {
    "objectID": "presentation.html#what-is-reproducible-research",
    "href": "presentation.html#what-is-reproducible-research",
    "title": "Reproducible Research with  and : Workflows for data, projects and publications",
    "section": "",
    "text": "Reproducibility is a key aspect of reliable scientific research. It enables other researchers to reproduce the same results using the original data, code, and documentation [1]. Below are the core principles to ensure reproducibility in research:\nStarts with planning\nReproducibility begins during the planning stage. It is essential to organize data management and ensure clear protocols are in place even before starting the analysis. Consistent Data Storage Regular backups of data are crucial. Storing data in multiple locations ensures accessibility and minimizes the risk of data loss. [2]\nContains clear documentation\nThorough documentation is essential to guarantee that data and methods can be accurately interpreted and reproduced by others. This entails the use of well-organised files and the inclusion of metadata that describes the data, how it was obtained, and how it was processed. [[2]][3]\nUtilizes version control\nUsing version control systems helps track changes in the project over time. This approach preserves the history of the project and facilitates the reversion of files to a previous state in the event of an error. [2]\nIs accessible\nData should be stored in nonproprietary, portable formats to ensure broad accessibility and long-term usability. This practice ensures that researchers can access the data without relying on specific software tools. Making data and code publicly available in accessible repositories supports scientific transparency and allows broader use of research outputs. [[2]][3]\nBy following these steps, researchers contribute to the wider scientific community, ensuring that their work can be efficiently and accurately reproduced by others.\nIntroducing the FAIR Principles\nWhile the principles above lay the groundwork for reproducibility, the FAIR principles (Findability, Accessibility, Interoperability, and Reusability) provide a more comprehensive framework for enhancing the value of research data in the digital age. These principles expand on reproducibility by emphasizing not only human access to research outputs but also machine actionability, ensuring that data can be effectively found, accessed, and reused by both people and computational tools​. [4]\nHow FAIR Principles Build on Reproducibility\nThe FAIR principles naturally complement and expand on the core aspects of reproducible research:\n\nFindability reinforces the importance of clear documentation. Assigning persistent identifiers and providing rich metadata makes it easier for researchers and search tools to locate and understand datasets, ensuring that your research remains accessible over time.\nAccessibility builds on the concept of using nonproprietary formats. FAIR emphasizes that data should be retrievable using open, standardized protocols, which ensures long-term access to both the data and its metadata, even if the data itself becomes unavailable.\nInteroperability relates to the consistent use of data standards and version control. By using standardized formats and vocabularies, research data can be more easily integrated with other datasets, supporting reuse and long-term relevance in broader research contexts.\nReusability directly aligns with the goals of reproducible research by ensuring that data is accompanied by clear licensing and provenance, allowing others to confidently reuse it. This principle reinforces the need for thorough documentation and transparent methods.\n\nBy incorporating the FAIR principles, researchers ensure that their data not only meets the standards of reproducibility but is also optimized for long-term use and discovery. This fosters a research environment where data is more transparent, accessible, and impactful over time​. [4]",
    "crumbs": [
      "View in presentation format"
    ]
  },
  {
    "objectID": "presentation.html#why-strive-for-reproducible-research",
    "href": "presentation.html#why-strive-for-reproducible-research",
    "title": "Reproducible Research with  and : Workflows for data, projects and publications",
    "section": "",
    "text": "In recent years, various scientific disciplines have experienced what is known as a “replication crisis”. This crisis arises when researchers are unable to reproduce the headline results of key studies using the reported data and methods [[5]][6] [7]. This lack of reproducibility undermines public trust in science, as it raises doubts about the validity of research findings.\n\n\nPersonal Reference\nConducting reproducible research simplifies the process of remembering how and why specific analyses were performed. This makes it easier to explain your work to collaborators, supervisors, and reviewers, enhancing communication throughout your project. [2]\nEfficient\nModifications Reproducible research enables you to quickly adjust analyses and figures when requested by supervisors, collaborators, or reviewers. This streamlined process can save substantial time during revisions. [2]\nStreamlined Future Projects\nBy maintaining well-organized and reproducible systems, you can reuse code and organizational structures for future projects. This reduces the time and effort required for similar tasks in subsequent research. [2]\nDemonstrates Rigor and Transparency\nReproducibility demonstrates scientific rigor and transparency. It allows others to verify your methods and results, improving the peer review process and reducing the risk of errors or accusations of misconduct. [2]\nIncreases Impact and Citations\nMaking your research reproducible can lead to higher citation rates [8] [9]. By sharing your code and data, you enable others to reuse your work, broadening its impact and increasing its relevance in the scientific community. [10] [11].\n\n\n\nFacilitates Learning\nSharing data and code helps others learn from your work more easily. New researchers can use your data and code as a reference, speeding up their learning curve and improving the quality of their analyses. [2]\nEnables Reproducibility\nReproducible research makes it simpler for others to reproduce and build upon your work, fostering more compatible and robust research across studies. [2]\nError Detection\nBy allowing others to access and review your data and code, reproducibility helps detect and correct errors, ensuring that mistakes are caught early and reducing the chance of their propagation in future research. [2]",
    "crumbs": [
      "View in presentation format"
    ]
  },
  {
    "objectID": "presentation.html#why-for-reproducible-research",
    "href": "presentation.html#why-for-reproducible-research",
    "title": "Reproducible Research with  and : Workflows for data, projects and publications",
    "section": "",
    "text": "R is increasingly recognized as a powerful tool for ensuring reproducibility in scientific research. Here are some key advantages of using R for reproducible research:\nOpen Source\nAccessibility R is freely available to everyone, eliminating cost barriers and promoting inclusive access to research tools. This open-source model ensures that researchers around the world can use and contribute to its development, fostering a collaborative research environment. [3]\nComprehensive Documentation\nR encourages thorough documentation of the entire research process. This ensures that analyses are well-tracked and can be easily replicated across different projects, enhancing the overall transparency and reliability of the research.\nIntegrated Version Control\nR seamlessly integrates with version control systems like Git, allowing researchers to track changes to code, data, and documents. This helps maintain a detailed record of a project’s evolution and ensures that all steps are easily reproducible. [3]\nConsistency Across Platforms\nR provides a stable environment that works consistently across different operating systems, whether you are using Windows, Mac, or Linux. This cross-platform consistency greatly enhances the reproducibility of research across diverse systems.\nBroad Community Support\nThe R community is large and active, continuously contributing to the improvement of the software. This broad support makes R a reliable choice for long-term research projects, ensuring that new tools and methods are constantly being developed and shared.\nFlexibility and Adaptability\nR offers a wide range of tools and functions that can be adapted to various research needs. This flexibility allows researchers to handle diverse tasks within a reproducible framework, making it a versatile tool for projects of all kinds.\n\n:::",
    "crumbs": [
      "View in presentation format"
    ]
  },
  {
    "objectID": "exercises/Rproj-Zenodo_exercise.html",
    "href": "exercises/Rproj-Zenodo_exercise.html",
    "title": "Reproducible Research with <img style=\"vertical-align:middle; height:1em; border: none; background: none;\" src=\"assets/images/Rlogo.png\"> and <img style=\"vertical-align:middle; height:1em;\" src=\"assets/images/quarto-logo-trademark.svg\">",
    "section": "",
    "text": "In this exercise you will setup of a basic RStudio project following good practices for organizing data, writing clean code and decomposing your workflow introduced in Rproject section. We‘ll also initialize renv to manage package dependencies, ensuring reproducibility. Once the project is set up, we’ll go through the process of how to publish the project to Zenodo as described in the Zenodo workflow section.\nIf you would prefer to view the exercise script offline, here is a PDF version:  Download exercise instructions\n\n\n\nClick here to download the resources for the exercise:  Download resources for exercise\nUnzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n\n\n\nStart by creating a new RStudio project in the root of the exercise_1_data directory. you have just downloaded. You can name the project what you like but in this example, we have named it Rice_farm_analysis.proj.\n\nOpen RStudio.\nCreate the project using: File &gt; New Project &gt; Existing Directory.\nSelect the exercise_1_data folder as the location and give the project a name, for example, Rice_farm_analysis.proj.\n\nThis creates a .Rproj file in the root of your project to help manage the workspace and project-specific settings.\n\n\n\nIt’s good practice to organize raw and processed data in separate folders. Let’s start by organizing the data:\n\nCreate a directory Data/Raw inside your project folder.\nMove the provided CSV file into this Data/Raw directory.\n\n\n\n\nWe’ll now organize the project’s scripts by splitting the original script into separate analysis and visualization scripts.\n\nCreate a Scripts folder inside your project directory.\nMove the original RiceFarm_project.R script into the Scripts folder.\n\nWe’ll now organize the project’s scripts by splitting the original script into separate analysis and visualization scripts.\n\nCreate a scripts folder inside your project directory.\nMove the original RiceFarm_project.R script into the scripts folder.\nCreate two new scripts named 01_data_analysis.R and 02_data_visualisation.R.\n\n\n\n\nCopy the following code from RiceFarm_project.R:\n\nThe call to the relevant library library(stringr)\nEverything before the call to the ggplot() function\n\nIn addition to this, replace the setwd() function with this code to set up relative paths, create a directory to save the processed data in and save rice_data_summary to disk after processing:\n\n\n# vector and create processed data save dir\nsave_dir &lt;- \"Data/Processed\"\ndir.create(save_dir,\n           showWarnings = FALSE,\n           recursive = TRUE)\n\n# Load csv file of data\nrice_data &lt;- read.csv(file.path(raw_dir, \"RiceFarms.csv\"))\n  \n# Save the summarized data\nwrite.csv(rice_data_summary,\n          file.path(save_dir, \"RiceFarms_summary.csv\"),\n          row.names = FALSE)\n\n\n\n\n\nCopy the following code from RiceFarm_project.R:\n\nThe call to the relevant library library(ggplot2)\nThe call to the functions ggplot() and ggsave()\n\nAdd the following code after the library() call to create an output directory for the plots and load the summarized data from the processed data folder:\n\n\n# Directory for saving plots\nplot_dir &lt;- \"Output/Visualisations\"\ndir.create(plot_dir, showWarnings = FALSE, recursive = TRUE)\n\n# load the summarized data\nrice_data_summary &lt;- read.csv(\"Data/Processed/RiceFarms_summary.csv\")\n\n\n\n\n\n\nAdd headers to both new scripts. You can use this template:\n\n\n# -----------------------------------------------\n# Script Name: [01_data_analysis.R / 02_data_visualisation.R]\n# Project: Rice Farm Analysis\n# Purpose: [Data analysis / Data visualization]\n# Author: [Your Name]\n# Date: [YYYY-MM-DD]\n# -----------------------------------------------\n\n\n\n\nAs a next step you will create a master script that runs both the data analysis and visualization scripts.\n\nIn the root of your project, create a new file named RiceFarm_master.R\nAdd a header as in Step 5.\nAdd the following code snippet to the script to source 01_data_analysis.R and 02_data_visualisation.R:\n\n\n###=========================================================================\n### 01- Data analysis\n### =========================================================================\n\n# Source the data analysis script\nsource(\"Scripts/01_data_analysis.R\")\n\n### =========================================================================\n### 02- Data visualization\n### =========================================================================\n\n# Source the data visualization script\nsource(\"Scripts/02_data_visualisation.R\")\n\nRunning this master script will execute both analysis and visualization steps.\n\n\n\nWe will use renv to make your projects package environment reproducible.\n\ninstall renv package\n\n\ninstall.packages(\"renv\")\n\n\nRun the following command in your master script to set up the project-specific environment\n\n\nrenv::init()\n\nThis creates a local library for your project and captures the required packages.\n\nOnce the initialization is complete, run:\n\n\n\n\nFor convenience, we can configure RStudio to automatically open the master script when the project is loaded.\n\ninstall the rstudioapi package:\n\n\ninstall.packages(\"rstudioapi\")\n\n\nOpen the .Rprofile file in the root of your project directory. The file might be hidden. On Windows click “View” &gt; “Show” &gt; “Hidden items” in the explorer and on MacOS click Press Command+Shift+Dot within the root directory to see the file.\n\n\nrenv::snapshot()\n\nThis records the project’s environment in a renv.lock file, which is essential for reproducibility.\n\n\n\nFor convenience, we will configure RStudio to automatically open the master script when the project is loaded.\n\nOpen the .Rprofile file in the root of your project directory. The file might be hidden. On Windows click View &gt; Show &gt; Hidden items in the explorer and on MacOS click Press Command+Shift+Dot within the root directory to see the file.\nAdd the following R code to the .Rprofile file:\n\n\nrsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    rstudioapi::navigateToFile('RiceFarm_master.R', line = -1L, column = -1L)\n}, action = \"append\")\n\n\n\n\nAfter modifying the .Rprofile file, it’s important to capture these changes in the renv.lock file.\n\nRun the following command in your master script to ensure that the rstudioapi package (which enables automatic script opening) is included in the snapshot:\n\n\nrenv::snapshot()\n\nNow we a have a nicely organised project structure with the workflow decomposed into seperate scripts and a master script that to run the whole project.\n\n\n\nThe following steps are heavily based on [1]. We have extracted the most relevant parts to explain the workflow. If you are interested in more details, check out their user manual at: https://cran.r-project.org/web/packages/zen4R/vignettes/zen4R.html.\nFor this exercise we will not be using Zenodo directly but Zenodo Sandbox. The Zenodo Sandbox is a separate, secure testing environment where users can explore Zenodo‘s features without impacting the main platform‘s publicly accessible data. It allows you to test file uploads, generate test DOIs, and experiment with API integrations. DOIs created in the sandbox are only for testing and use a different prefix. You will need a separate account and access token for the sandbox, distinct from those used on Zenodo‘s main site.\n\nCreate an account on https://sandbox.zenodo.org.\n\nZenodo can be accessed with the R package zen4R to upload, edit, publish and download data.\n\nCreate a new R script outside of the project directory.\nInstall zen4R library with the following code:\n\n\n#install dependency \"remotes\"\ninstall.packages(\"remotes\")\n        \n#install zen4R\nrequire(\"remotes\")\ninstall_github(\"eblondel/zen4R\")\n\n\n\n\nA Zenodo record includes metadata, data and a Digital Object Identifier (DOI) which is automatically generated by Zenodo for all uploads. But before you can add records to Zenodo, you need to get access to your account through R.\n\nGo to https://sandbox.zenodo.org/account/settings/applications/.\nLog into your account and then create a new “Personal access token” in the “Applications” section of your account.\nThen run the following code in your script to establish the access and create a new record.\n\n\nlibrary(zen4R)\n        \n#Create manager to access your Zenodo repository\nzenodo &lt;- ZenodoManager$new(\n    token = \"your_token\",\n    sandbox = TRUE,\n    logger = \"INFO\" \n    )\n        \n##Prepare a new record to be filled with metadata and uploaded to Zenodo\nmyrec &lt;- ZenodoRecord$new()\n\nIf you want to connect to Zenodo and not Zenodo Sandbox, create the token in your Zenodo account and remove the line sandbox = True in the code above.\nThe types of metadata that can be included in a Zenodo record are vast. A full list can be found in the documentation.\n\nCopy and run the example below to add metadata to your record.\n\n\nmyrec$setTitle(\"RiceFarm\") #title of the record\nmyrec$addAdditionalTitle(\"This is an alternative title\", type = \"alternative-title\")\nmyrec$setDescription(\"Calculating statistics of RiceFarm dataset\") #description\nmyrec$addAdditionalDescription(\"This is an abstract\", type = \"abstract\")\nmyrec$setPublicationDate(\"2024-09-16\") #Format YYYY-MM-DD\nmyrec$setResourceType(\"dataset\")\nmyrec$addCreator(firstname = \"Yourfirstname\", lastname = \"Yourlastname\", role = \"datamanager\", orcid = \"0000-0001-0002-0003\")\nmyrec$setKeywords(c(\"R\",\"dataset\")) #For filtering\nmyrec$addReference(\"Blondel E. et al., 2024 zen4R: R Interface to Zenodo REST API\")\n\nA record can be deposited on Zenodo before it is published. This will add the record to your account without making it public yet. A deposited record can still be edited or deleted. You can also upload data to a deposited record. If you prefer a graphical interface, you can also edit the record on the Zenodo website.\n\nDeposit the record on Zenodo:\n\n\n#deposit record\nmyrec &lt;- zenodo$depositRecord(myrec, publish = TRUE)\n\n\nView the deposited record at https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\nCompress your project directory to a .zip file.\nUpload the .zip file to your deposited record:\n\n\n#add data to the record, adjust the path below\nzenodo$uploadFile(\"path/to/your/file\", record = myrec)\n\n\nPublish the record:\n\n\n#make the record publicly available on Zenodo (Sandbox).\nmyrec &lt;- zenodo$publishRecord(myrec$id)\n\n\n\n\n\nIt is also possible to edit or update the metadata of published records:\n\n\n#get your record by metadata query, e.g. by title\nmyrec &lt;- zenodo$getDepositions(q='title:zen4R')\n\n#get depositions creates a list, access first element\nmyrec &lt;- myrec[[1]]\n\n#edit metadata\nmyrec &lt;- zenodo$editRecord(myrec$id)\nmyrec$setTitle(\"zen4R 2.0\")\n\n#redeposit and publish the edited record\nmyrec &lt;- zenodo$depositRecord(myrec, publish = TRUE)\n\n\nOnce a record has been published, it is not possible to edit the data that has been attached to it. However, it is possible to upload an updated version of the data. The previous version of the data will remain accessible via Zenodo. The record will have one overall DOI, while each version will have its own DOI.\nReconnect to your account:\n\n\nzenodo &lt;- ZenodoManager$new(\n      token = \"your_token\",\n      sandbox = TRUE,\n      logger = \"INFO\")\n\n\nAccess your record:\n\n\n#get your record by querying the metadata, e.g. by title, this will give you a list of all records with that title.\nmyrec &lt;- zenodo$getDepositions(q='title:RiceFarm Statistics')\n    \n#access the first item in the list, as there should only be one record with that particular title\nmyrec &lt;- myrec[[1]]\n\n\nRename your .zip file on your computer\nUpload the renamed .zip file:\n\n\n#edit data, delete_latest_files = TRUE to not include data of previous version in newer version\nmyrec &lt;- zenodo$depositRecordVersion(myrec, delete_latest_files = TRUE, files = \"path/to/your/new/file\", publish = TRUE)\n\n\nAgain, go to https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\nActivate “View all versions” on the left hand side.\nCheck if both versions show up"
  },
  {
    "objectID": "exercises/Rproj-Zenodo_exercise.html#sec-Rproj_zenodo_exercise",
    "href": "exercises/Rproj-Zenodo_exercise.html#sec-Rproj_zenodo_exercise",
    "title": "Reproducible Research with <img style=\"vertical-align:middle; height:1em; border: none; background: none;\" src=\"assets/images/Rlogo.png\"> and <img style=\"vertical-align:middle; height:1em;\" src=\"assets/images/quarto-logo-trademark.svg\">",
    "section": "",
    "text": "In this exercise you will setup of a basic RStudio project following good practices for organizing data, writing clean code and decomposing your workflow introduced in Rproject section. We‘ll also initialize renv to manage package dependencies, ensuring reproducibility. Once the project is set up, we’ll go through the process of how to publish the project to Zenodo as described in the Zenodo workflow section.\nIf you would prefer to view the exercise script offline, here is a PDF version:  Download exercise instructions\n\n\n\nClick here to download the resources for the exercise:  Download resources for exercise\nUnzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n\n\n\nStart by creating a new RStudio project in the root of the exercise_1_data directory. you have just downloaded. You can name the project what you like but in this example, we have named it Rice_farm_analysis.proj.\n\nOpen RStudio.\nCreate the project using: File &gt; New Project &gt; Existing Directory.\nSelect the exercise_1_data folder as the location and give the project a name, for example, Rice_farm_analysis.proj.\n\nThis creates a .Rproj file in the root of your project to help manage the workspace and project-specific settings.\n\n\n\nIt’s good practice to organize raw and processed data in separate folders. Let’s start by organizing the data:\n\nCreate a directory Data/Raw inside your project folder.\nMove the provided CSV file into this Data/Raw directory.\n\n\n\n\nWe’ll now organize the project’s scripts by splitting the original script into separate analysis and visualization scripts.\n\nCreate a Scripts folder inside your project directory.\nMove the original RiceFarm_project.R script into the Scripts folder.\n\nWe’ll now organize the project’s scripts by splitting the original script into separate analysis and visualization scripts.\n\nCreate a scripts folder inside your project directory.\nMove the original RiceFarm_project.R script into the scripts folder.\nCreate two new scripts named 01_data_analysis.R and 02_data_visualisation.R.\n\n\n\n\nCopy the following code from RiceFarm_project.R:\n\nThe call to the relevant library library(stringr)\nEverything before the call to the ggplot() function\n\nIn addition to this, replace the setwd() function with this code to set up relative paths, create a directory to save the processed data in and save rice_data_summary to disk after processing:\n\n\n# vector and create processed data save dir\nsave_dir &lt;- \"Data/Processed\"\ndir.create(save_dir,\n           showWarnings = FALSE,\n           recursive = TRUE)\n\n# Load csv file of data\nrice_data &lt;- read.csv(file.path(raw_dir, \"RiceFarms.csv\"))\n  \n# Save the summarized data\nwrite.csv(rice_data_summary,\n          file.path(save_dir, \"RiceFarms_summary.csv\"),\n          row.names = FALSE)\n\n\n\n\n\nCopy the following code from RiceFarm_project.R:\n\nThe call to the relevant library library(ggplot2)\nThe call to the functions ggplot() and ggsave()\n\nAdd the following code after the library() call to create an output directory for the plots and load the summarized data from the processed data folder:\n\n\n# Directory for saving plots\nplot_dir &lt;- \"Output/Visualisations\"\ndir.create(plot_dir, showWarnings = FALSE, recursive = TRUE)\n\n# load the summarized data\nrice_data_summary &lt;- read.csv(\"Data/Processed/RiceFarms_summary.csv\")\n\n\n\n\n\n\nAdd headers to both new scripts. You can use this template:\n\n\n# -----------------------------------------------\n# Script Name: [01_data_analysis.R / 02_data_visualisation.R]\n# Project: Rice Farm Analysis\n# Purpose: [Data analysis / Data visualization]\n# Author: [Your Name]\n# Date: [YYYY-MM-DD]\n# -----------------------------------------------\n\n\n\n\nAs a next step you will create a master script that runs both the data analysis and visualization scripts.\n\nIn the root of your project, create a new file named RiceFarm_master.R\nAdd a header as in Step 5.\nAdd the following code snippet to the script to source 01_data_analysis.R and 02_data_visualisation.R:\n\n\n###=========================================================================\n### 01- Data analysis\n### =========================================================================\n\n# Source the data analysis script\nsource(\"Scripts/01_data_analysis.R\")\n\n### =========================================================================\n### 02- Data visualization\n### =========================================================================\n\n# Source the data visualization script\nsource(\"Scripts/02_data_visualisation.R\")\n\nRunning this master script will execute both analysis and visualization steps.\n\n\n\nWe will use renv to make your projects package environment reproducible.\n\ninstall renv package\n\n\ninstall.packages(\"renv\")\n\n\nRun the following command in your master script to set up the project-specific environment\n\n\nrenv::init()\n\nThis creates a local library for your project and captures the required packages.\n\nOnce the initialization is complete, run:\n\n\n\n\nFor convenience, we can configure RStudio to automatically open the master script when the project is loaded.\n\ninstall the rstudioapi package:\n\n\ninstall.packages(\"rstudioapi\")\n\n\nOpen the .Rprofile file in the root of your project directory. The file might be hidden. On Windows click “View” &gt; “Show” &gt; “Hidden items” in the explorer and on MacOS click Press Command+Shift+Dot within the root directory to see the file.\n\n\nrenv::snapshot()\n\nThis records the project’s environment in a renv.lock file, which is essential for reproducibility.\n\n\n\nFor convenience, we will configure RStudio to automatically open the master script when the project is loaded.\n\nOpen the .Rprofile file in the root of your project directory. The file might be hidden. On Windows click View &gt; Show &gt; Hidden items in the explorer and on MacOS click Press Command+Shift+Dot within the root directory to see the file.\nAdd the following R code to the .Rprofile file:\n\n\nrsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    rstudioapi::navigateToFile('RiceFarm_master.R', line = -1L, column = -1L)\n}, action = \"append\")\n\n\n\n\nAfter modifying the .Rprofile file, it’s important to capture these changes in the renv.lock file.\n\nRun the following command in your master script to ensure that the rstudioapi package (which enables automatic script opening) is included in the snapshot:\n\n\nrenv::snapshot()\n\nNow we a have a nicely organised project structure with the workflow decomposed into seperate scripts and a master script that to run the whole project.\n\n\n\nThe following steps are heavily based on [1]. We have extracted the most relevant parts to explain the workflow. If you are interested in more details, check out their user manual at: https://cran.r-project.org/web/packages/zen4R/vignettes/zen4R.html.\nFor this exercise we will not be using Zenodo directly but Zenodo Sandbox. The Zenodo Sandbox is a separate, secure testing environment where users can explore Zenodo‘s features without impacting the main platform‘s publicly accessible data. It allows you to test file uploads, generate test DOIs, and experiment with API integrations. DOIs created in the sandbox are only for testing and use a different prefix. You will need a separate account and access token for the sandbox, distinct from those used on Zenodo‘s main site.\n\nCreate an account on https://sandbox.zenodo.org.\n\nZenodo can be accessed with the R package zen4R to upload, edit, publish and download data.\n\nCreate a new R script outside of the project directory.\nInstall zen4R library with the following code:\n\n\n#install dependency \"remotes\"\ninstall.packages(\"remotes\")\n        \n#install zen4R\nrequire(\"remotes\")\ninstall_github(\"eblondel/zen4R\")\n\n\n\n\nA Zenodo record includes metadata, data and a Digital Object Identifier (DOI) which is automatically generated by Zenodo for all uploads. But before you can add records to Zenodo, you need to get access to your account through R.\n\nGo to https://sandbox.zenodo.org/account/settings/applications/.\nLog into your account and then create a new “Personal access token” in the “Applications” section of your account.\nThen run the following code in your script to establish the access and create a new record.\n\n\nlibrary(zen4R)\n        \n#Create manager to access your Zenodo repository\nzenodo &lt;- ZenodoManager$new(\n    token = \"your_token\",\n    sandbox = TRUE,\n    logger = \"INFO\" \n    )\n        \n##Prepare a new record to be filled with metadata and uploaded to Zenodo\nmyrec &lt;- ZenodoRecord$new()\n\nIf you want to connect to Zenodo and not Zenodo Sandbox, create the token in your Zenodo account and remove the line sandbox = True in the code above.\nThe types of metadata that can be included in a Zenodo record are vast. A full list can be found in the documentation.\n\nCopy and run the example below to add metadata to your record.\n\n\nmyrec$setTitle(\"RiceFarm\") #title of the record\nmyrec$addAdditionalTitle(\"This is an alternative title\", type = \"alternative-title\")\nmyrec$setDescription(\"Calculating statistics of RiceFarm dataset\") #description\nmyrec$addAdditionalDescription(\"This is an abstract\", type = \"abstract\")\nmyrec$setPublicationDate(\"2024-09-16\") #Format YYYY-MM-DD\nmyrec$setResourceType(\"dataset\")\nmyrec$addCreator(firstname = \"Yourfirstname\", lastname = \"Yourlastname\", role = \"datamanager\", orcid = \"0000-0001-0002-0003\")\nmyrec$setKeywords(c(\"R\",\"dataset\")) #For filtering\nmyrec$addReference(\"Blondel E. et al., 2024 zen4R: R Interface to Zenodo REST API\")\n\nA record can be deposited on Zenodo before it is published. This will add the record to your account without making it public yet. A deposited record can still be edited or deleted. You can also upload data to a deposited record. If you prefer a graphical interface, you can also edit the record on the Zenodo website.\n\nDeposit the record on Zenodo:\n\n\n#deposit record\nmyrec &lt;- zenodo$depositRecord(myrec, publish = TRUE)\n\n\nView the deposited record at https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\nCompress your project directory to a .zip file.\nUpload the .zip file to your deposited record:\n\n\n#add data to the record, adjust the path below\nzenodo$uploadFile(\"path/to/your/file\", record = myrec)\n\n\nPublish the record:\n\n\n#make the record publicly available on Zenodo (Sandbox).\nmyrec &lt;- zenodo$publishRecord(myrec$id)\n\n\n\n\n\nIt is also possible to edit or update the metadata of published records:\n\n\n#get your record by metadata query, e.g. by title\nmyrec &lt;- zenodo$getDepositions(q='title:zen4R')\n\n#get depositions creates a list, access first element\nmyrec &lt;- myrec[[1]]\n\n#edit metadata\nmyrec &lt;- zenodo$editRecord(myrec$id)\nmyrec$setTitle(\"zen4R 2.0\")\n\n#redeposit and publish the edited record\nmyrec &lt;- zenodo$depositRecord(myrec, publish = TRUE)\n\n\nOnce a record has been published, it is not possible to edit the data that has been attached to it. However, it is possible to upload an updated version of the data. The previous version of the data will remain accessible via Zenodo. The record will have one overall DOI, while each version will have its own DOI.\nReconnect to your account:\n\n\nzenodo &lt;- ZenodoManager$new(\n      token = \"your_token\",\n      sandbox = TRUE,\n      logger = \"INFO\")\n\n\nAccess your record:\n\n\n#get your record by querying the metadata, e.g. by title, this will give you a list of all records with that title.\nmyrec &lt;- zenodo$getDepositions(q='title:RiceFarm Statistics')\n    \n#access the first item in the list, as there should only be one record with that particular title\nmyrec &lt;- myrec[[1]]\n\n\nRename your .zip file on your computer\nUpload the renamed .zip file:\n\n\n#edit data, delete_latest_files = TRUE to not include data of previous version in newer version\nmyrec &lt;- zenodo$depositRecordVersion(myrec, delete_latest_files = TRUE, files = \"path/to/your/new/file\", publish = TRUE)\n\n\nAgain, go to https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\nActivate “View all versions” on the left hand side.\nCheck if both versions show up"
  }
]