---
execute:
  echo: true
  eval: false
  error: false
editor: 
  markdown: 
    wrap: 72
bibliography: references.bib
---

<!-- Web content -->

::: {.content-hidden when-format="revealjs"}
The graphic below shows the main steps of this workflow. It starts by
developing your research project as an Rstudio project following the
[good practice project guidelines](@sec-Rprojects) we have discussed.
Then, it uses the `renv` package to manage the project environment so
that others can re-create it. Finally, the code, data and environment
are uploaded to the open-access repository `Zenodo`, which provides a
DOI for your work, ensuring long-term accessibility and reproducibility.

![](assets/images/project_zenodo_workflow.png){.lightbox width="70%"
fig-align="center"}

The `renv` package helps maintain the R environment, allowing others to
recreate the environment in which your analysis was conducted. By
combining `renv` with `Zenodo`, you create a comprehensive solution for
reproducible research. `renv` ensures that the computational environment
is captured, while `Zenodo` makes your research outputs accessible and
citable, supporting the FAIR principles of findability, accessibility,
interoperability, and reusability [@wilkinson2016].

The next sections provide some additional detail on [environment
management with renv](@sec-renv_workflow) and some background and
practical tips on [Zenodo](@sec-zenodo_background). You will have the
chance to apply this workflow to an example project in the [accompanying
exercise](@sec-Rproj_zenodo_exercise).

### Environment Management with `renv` {#sec-renv_workflow}

`renv` is a powerful R package designed to help manage project
environments by creating project-specific libraries and lockfiles. As
mentioned earlier, `renv` captures the exact versions of R packages used
in a project, storing this information in a renv.lock file. This allows
users to recreate the exact package environment when revisiting a
project or transferring it to a different machine, ensuring
reproducibility.

The `renv` workflow is straightforward:

-   **Initialize `renv` in a project**: `renv` creates a separate
    library in the project folder, isolating the packages from the
    system-wide library.

-   **Snapshot dependencies**: `renv` scans the project, identifying
    which packages are being used and recording their versions in the
    lockfile.

-   **Restore environments**: Anyone cloning or receiving the project
    can run `renv::restore()` to install the exact versions of the
    packages listed in the lockfile from the project library,
    reproducing the original project package environment.

One of the core strengths of `renv` is its flexibility. It integrates
seamlessly with tools like RStudio, allowing easy management of
dependencies without disrupting existing workflows. This makes it
particularly well-suited for ensuring that research projects are
reproducible across different systems and platforms.

However, `renv` does not manage the **entire system environment** (such
as the version of R itself or external dependencies like system
libraries). For complete reproducibility, combining `renv` with
containerization tools (like `Docker`) or publishing outputs (such as
code or data) via repositories like `Zenodo` is recommended. The use of
`renv` allows researchers to easily capture and restore the R
environment, while repositories can ensure the long-term availability of
the project’s outputs.

### <img src="assets/images/zenodo-blue.svg" style="vertical-align:middle; height:2.75em;"/> as a research repository {#sec-zenodo_background}

[Zenodo](https://zenodo.org/) is a platform created under the European
Commission‘s [OpenAIRE project](https://www.openaire.eu/) in partnership
with [CERN](https://home.cern/) to publish, archive, and share
scientific research outputs, including datasets, code, and publications.

Of course there are many other similar research repositories, such as
[Dryad](https://datadryad.org/stash), [Figshare](https://figshare.com/),
[Mendeley Data](https://data.mendeley.com/) and
[OSF](https://osf.io/q5j8g/), but we recommend `Zenodo` for several
reasons:

-   **Generous upload size of 50GB (100 files) per record**

-   **Aligns with FAIR and Open Science principles**: The practical
    features of `Zenodo` that ensure this are described in it‘s
    [principles](https://about.zenodo.org/principles/)

-   **Ability to create communities**: [Zenodo
    Communities](https://help.zenodo.org/docs/communities/about-communities/)
    are used to group similar records together. This is useful for
    creating a collection of related research outputs, either for a
    research group or a large-scale funded project.

-   **Long term preservation with assignment of DOIs:** Each item
    published on `Zenodo` is assigned a permanent [*Digital Object
    Identifier*
    (DOI)](https://simple.wikipedia.org/wiki/Digital_Object_Identifier),
    which is a better way than a URL to cite the record in academic
    writing.

-   **Open source**: This means that `Zenodo` is not just free to use
    but you can even see the [code it is built
    on](https://github.com/zenodo/zenodo-rdm) and contribute to it.

-   **Versioning functionality:** Every record starts with a 1st version
    and [new versions can be added as research is
    updated](https://help.zenodo.org/docs/deposit/manage-versions/),
    while earlier versions remain accessible. This is crucial in
    scientific research, where updated analyses and data corrections are
    often necessary, but also transparency around earlier versions of
    the work should be maintained.

-   **Integration with GitHub:** When a research project (e.g., code) is
    hosted on [GitHub](@sec-git_workflow), `Zenodo` can be used to
    [archive the
    repository](https://help.zenodo.org/docs/profile/linking-accounts/)
    upon each new release, creating a snapshot with a DOI. This means
    that a version of the code can be more easily cited in scientific
    publications.

-   **Application programming Interface (API) to access records
    programmatically:** This a useful feature as it allows for
    interfacing with `Zenodo` records without using the website and is
    the backbone of the `zen4R` package that allows for publishing
    records directly from R which we discuss in more detail below.

### Publishing to `Zenodo` with `zen4R` {#sec-zenodo_workflow}

The [`zen4R`](%3Chttps://cran.r-project.org/web/packages/zen4R) package
[@blondel2024] provides functions to interact with `Zenodo‘s` API
directly from R. The package allows you to:

-   Retrieve the metadata of, and download, existing `Zenodo` records.

-   Create new records and versions of records, write their metadata and
    upload files to `Zenodo`.

We will use `zen4R` to publish the code, data, and environment of our
example project to `Zenodo` in the accompanying exercise.
:::

<!-- Presentation content -->

::: {.content-visible when-format="revealjs"} \## Rstudio project to
`Zenodo` pipeline

![](assets/images/project_zenodo_workflow.png){.lightbox width="90%"
fig-align="center"}

::: notes
This visualization introduces the main steps of this workflow. It starts
by developing your research project as an Rstudio project following the
good practice guidelines we have just discussed. Then, it uses the renv
package to manage the project environment so that others can re-create
it. Finally, the code, data and environment are uploaded to the
open-access repository `Zenodo`, which provides a DOI for your work,
ensuring long-term accessibility and reproducibility.
:::

## Rstudio project to `Zenodo` pipeline

### Managing Project Environments with renv

-   `renv` creates project-specific libraries

-   Captures package versions in a `renv.lockfile`

-   Ensures reproducibility of package environment

-   Centralizes package environment management within each project

::: notes
-   `renv` helps manage R package environments by creating isolated
    libraries specific to each project, ensuring that the project uses
    only the packages it needs.

-   The renv.lock file records exact versions of all installed packages,
    allowing consistent installation of these packages to improve
    reproducibility.

-   This feature is especially useful for transferring projects between
    machines, maintaining a controlled environment.

-   It centralizes the package environment management within the project
    folder, avoiding conflicts with global R libraries.
:::

## Rstudio project to `Zenodo` pipeline

### `renv` Workflow

-   Initialize `renv` inside the project directory to identify
    dependencies

-   Snapshot dependencies to create a lockfile

-   Restore environments using `renv::restore()`

-   Easy integration with RStudio for workflow management

::: notes
-   Initialize `renv` in a project to isolate packages from the
    system-wide library.

-   Snapshot the project’s package dependencies, generating a lockfile
    (renv.lock).

-   Restore the environment by reinstalling packages using the lockfile.

-   `renv` integrates smoothly with RStudio, making it easy to use
    alongside other development tools.
:::

## Rstudio project to `Zenodo` pipeline

### Limitations of `renv`

-   Does not manage R versions or system-wide dependencies

-   Focuses on managing package environments within R

-   Best combined with containerization (e.g., `Docker`) for full
    reproducibility

-   Complements external repositories (e.g., `Zenodo`) for sharing and
    preservation

::: notes
-   `renv` does not manage system-level dependencies such as the R
    version or other software your project might rely on (e.g.,
    geospatial libraries like GDAL

-   `renv` is designed to manage the R package environment, ensuring
    that the same R packages and versions are used across different
    machines.

-   For full reproducibility, `renv` should be combined with tools like
    `Docker` for system environment control.

-   Publishing platforms like `Zenodo` can be used to store code and
    data for long-term preservation.
:::

## Rstudio project to `Zenodo` pipeline

### Publishing and Archiving with Zenodo

-   Long-term storage with generous 50GB upload limit per record

-   Permanent DOIs for easy citation and versioning support for updates

-   GitHub integration for seamless code archiving with DOI snapshots

-   Supports FAIR principles: aligned with open access, transparency,
    and reusability

-   Community creation for grouping related research outputs

-   API and open-source: flexible for programmatic access and
    customization

::: notes
-   `Zenodo` provides long-term storage for a variety of research
    outputs, including datasets, code, and publications, ensuring that
    these materials remain accessible over time.

-   Every record receives a permanent Digital Object Identifier (DOI),
    which allows for easy citation in research papers.

-   Integration with GitHub allows researchers to archive their code and
    generate DOI-linked snapshots with each release.

-   `Zenodo` aligns with the FAIR and Open Science principles,
    supporting open and reusable research outputs

-   The platform allows the creation of communities to group related
    records, making it useful for creating a collection of related
    research outputs, either for a research group or a large-scale
    funded project.

-   `Zenodo’s` API provides programmatic access for tasks like
    automating record creation, and its open-source nature allows for
    customization and contribution to the platform.
:::

## Rstudio project to `Zenodo` pipeline

### Streamlining publishing to `Zenodo` with `zen4R`

-   Upload datasets, code, and metadata from R to `Zenodo`

-   Automate publication and deposition management

-   Retrieve and update `Zenodo` records directly in R

-   Facilitates integration and reproducibility in R workflows

::: notes
-   `zen4R` allows R users to interact with `Zenodo‘s` API to upload
    data and code directly from R.

-   It supports automated publication, including metadata management and
    record updating.

-   Retrieve and update `Zenodo` records programmatically within R.

-   This makes publishing more efficient, especially in workflows
    requiring frequent updates or version control.
:::

## Rstudio project to `Zenodo` pipeline

### Combining `renv` and `Zenodo`

-   `renv` manages internal project environments

-   `Zenodo` ensures external reproducibility with archiving

-   Together, they provide a comprehensive solution

-   Aligns with open science and FAIR principles

::: notes
-   `renv` manages internal environments by locking package versions and
    dependencies.

-   `Zenodo` provides external storage and ensures reproducibility by
    archiving and versioning research outputs.

-   Together, they create a comprehensive solution for reproducible,
    open science projects.

-   This combination aligns with FAIR principles, ensuring data is
    Findable, Accessible, Interoperable, and Reusable.
:::

:::
