---
execute:
  echo: true
  eval: false
  error: false
editor: 
  markdown: 
    wrap: 72
---
## Use renv to create project-specific environments in R
### Setting Up a Project with renv

-   Initialize renv in your project:
    -   Use renv::init() to initialize renv in your project directory.
    ```{r} 
    # initialize the project environment
    renv::init()
    ```
    -   This command creates an isolated environment for your project, and ensures that all package dependencies are managed within that environment. When you run renv::init(), several important files and directories are created:
        -   renv.lock, a lock file that records the exact versions of all packages installed and used in your project. This file is crucial for replicating the environment on other machines or by other people.
        -   .Rprofile, this file is automatically run every time you start R in your project, and renv uses it to configure your R session to use the packages in your project library.
     -   renv/ directory, a directory that stores the local library of packages specific to your project. It also contains metadata and configuration files that renv uses to manage the environment.
    -   Other directories and files are also created. To share an R environment, renv.lock, .Rprofile, renv/settings.json and renv/activate.R must be provided.
     
     
## Managing Packages with renv

-   Install packages within renv
    -   Install packages as usual. Then running renv::snapshot() will include the library in the lock file if it is loaded in a script located within the project folder
    ```{r}
    # Install a library, e.g dplyr
    install.packages("dplyr")
    
    # load the package
    library(dplyr)
    
    # create the snapshot
    renv::snapshot()
    ```
        
     
## Reuse an existing renv project environment:
-   Get all the packages used in the existing environment installed on your computer
    -   Copy the project folder to your machine.
    -   Run renv::restore() in the root folder of the project where the .lock file is located. This will replicate the environment from an existing lockfile and install all packages with the correct versions.
    ```{r}
    # install packages used in the environment
    renv::restore()
    ```

# Publish your work with Zenodo to make it accessible and citable   
## Install zen4R to access Zenodo through r
-   Zenodo can be accessed with r library zen4R to upload, edit, publish and download data.
    -   Install zen4R library with the following code:
    ```{r}
    # install dependency "remotes"
    install.packages("remotes")
    
    #install zen4R
    require("remotes")
    install_github("eblondel/zen4R")
    ```

## Create a new Zenodo record
-   A zenodo record includes metadata, data and a DOI which is automatically generated by Zenodo for all uploads.
    -   Go to https://zenodo.org/account/settings/applications/. This requires a Zenodo account. Sign up if necessary or log in.
    -   Once you're logged in create a new "Personal access token".
    -   Then run the following code in r to c create a new record
    ```{r}
    library(zen4R)
    
    # Create manager to access your Zenodo repository
    zenodo <- ZenodoManager$new(
      token = "your_token", 
      logger = "INFO" 
    )
    
    # Create a new empty record
    myrec <- ZenodoRecord$new()
    ```

-   The types of metadata that can be included in a Zenodo record are vast. A full list can be found in the documentation at https://developers.zenodo.org/#representation. The code below gives some examples:
    ```{r}
    myrec$setTitle("zen4R") # title of the record
    myrec$addAdditionalTitle("This is an alternative title", type = "alternative-title")
    myrec$setDescription("Interface to 'Zenodo' REST API") #description
    myrec$addAdditionalDescription("This is an abstract", type = "abstract")
    myrec$setPublicationDate("2024-09-16") #Format YYYY-MM-DD
    myrec$setResourceType("dataset")
    myrec$addCreator(firstname = "Manuel", lastname = "Kurmann", role = "datamanager", orcid = "0000-0001-8411-3966")
    myrec$setKeywords(c("R","dataset")) #For filtering
    myrec$addReference("Blondel E. et al., 2024 zen4R: R Interface to Zenodo REST API")
    myrec$setPublisher("CRAN") #Publisher
    ```
    
-   A record can be deposited on Zenodo before it is published. This will add the record to your account without making it public yet. A deposited record can still be edited or deleted. If you prefer a graphical interface, you can also edit the record on the Zenodo website.

    ```{r}
    # deposit record
    myrec <- zenodo$depositRecord(myrec, publish = TRUE)
    
    # add data to the record
    zenodo$uploadFile("path/to/your/file", record = myrec)
    
    # publish record
    myrec <- zenodo$publishRecord(myrec$id)
    
    # delete record if you want to start over
    zenodo$deleteRecord(myrec$id)
    ```

## Edit published Zenodo records
-   It is also possible to edit or update the metadata of published records.

    ```{r}
    # get your record by metadata query, e.g. by title
    myrec <- zenodo$getDepositions(q='title:zen4R')
    
    # get depositions creates a list, access first element
    myrec <- myrec[[1]]
    
    # edit metadata
    myrec <- zenodo$editRecord(myrec$id)
    myrec$setTitle("zen4R 2.0")
    
    #redeposit and publish the edited record
    myrec <- zenodo$depositRecord(myrec, publish = TRUE)
    ```

-   It is not possible to edit the data attached to a published record. However, it is possible to upload an updated version.

    ```{r}
    # get your record by metadata query, e.g. by title
    myrec <- zenodo$getDepositions(q='title:zen4R 2.0')
    
    # get depositions creates a list, access first element
    myrec <- myrec[[1]]
    
    # edit data, delete_latest_files = TRUE deletes data of previous version,
    myrec <- zenodo$depositRecordVersion(myrec, delete_latest_files = TRUE, files = "path/to/your/new/file", publish = TRUE)
    ```