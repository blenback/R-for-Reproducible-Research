<!-- Web content -->
::: {.content-visible when-format="html"}
## Two cardinal sins of reproducibilty

```{r}
#| echo: true
#| eval: false
install.packages("ggplot2")
setwd("C:/Users/ben/path/that/only/I/have")
```


But what is wrong with these lines?

## Two cardinal sins of reproducibilty

```{r}
#| echo: true
#| eval: false
#| output: true
install.packages("ggplot2")
setwd("C:/Users/ben/path/that/only/I/have")
```


A good R project... *"creates everything it needs, in its own workspace or folder, and it touches nothing it did not create e.g. it does not install additional packages."* Jenny Bryan[@bryan2017]

Doing guarantees that the project can be moved around on your computer or onto other computers and will still "just work".

## Developing project-orientated habits:

-   Take advantage of IDE features (.Rproj, .Rprofile)
-   Environment management
-   Implement a logical directory structure
-   Break up your process (master script and sub-scripts)
-   Write clean code

## Environment management

What are environments and why are they needed? (version conflicts/ dependencies etc. Intro to renv package for environment management. Set up a consistent directory structure: Data/, scripts/, results/ tools/ (not every project will be the same!)

## Writing clean code:

### Use a consistent header (hint: use code snippet)

### General good practice: variable names, use functions for repetive tasks

### code folding

### Syntax lintr vs. styler package
:::


<!-- Presentation content -->
::: {.content-visible when-format="revealjs"}
## Two cardinal sins of reproducibilty

```{r}
#| echo: true
#| eval: false
install.packages("ggplot2")
setwd("C:/Users/ben/path/that/only/I/have")
```

You might have seen such lines commonly used but what is the problem with them?

## Two cardinal sins of reproducibilty

```{r}
#| echo: true
#| eval: false
#| output: true
install.packages("ggplot2")
setwd("C:/Users/ben/path/that/only/I/have")
```


### What is a good R project?

A good R project... *"creates everything it needs, in its own workspace or folder, and it touches nothing it did not create"* Jenny Bryan[@bryan2017] 

Doing guarantees that the project can be moved around on your computer or onto other computers and will still "just work".

## Good project-orientated habits:

-   Take advantage of IDE features (.Rproj, .Rprofile)
-   Manage your environment
-   Use logical directory structures
-   Break up your process (master script and sub-scripts)
-   Writing clean code

## Rstudio projects


## Environment management

What are environments and why are they needed? (version conflicts/ dependencies etc. Intro to renv package for environment management. Set up a consistent directory structure: Data/, scripts/, results/ tools/ (not every project will be the same!)

## Writing clean code:

### Use a consistent header (hint: use code snippet)

### General good practice: variable names, use functions for repetive tasks

### code folding

### Syntax lintr vs. styler package
:::
