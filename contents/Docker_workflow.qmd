---
execute:
  echo: true
  eval: false
  error: false
---

<!-- Web content -->

::: {.content-hidden when-format="revealjs"}
![](assets/images/Docker_workflow.png){.lightbox width="90%" fig-align="center"}

**The title of this workflow raises two questions, the first being: what is containerization? and the second: what is Docker?** \### Containerisation

Simply put containerization is the process of bundling code along with all of it's dependencies, i.e. all the components we discussed as making up the [environment](@sec-environment-management), including the operating system, software libraries (packages), and other system software. The fact everything needed to run the code is included means that the code is portable and can be run on any platform or cloud service. This also makes containerization something of a gold standard for reproducibility as the entire environment is explicitly re-produced.

### Docker

[Docker](https://www.docker.com/) is an open-source, and the most popular, platform for containerization. Before we dive into a practical example using Docker for research projects with R it is important to introduce some three key terms that we will come across:

-   `Dockerfile`: The first step in the containerization process, they are a straightforward text file containing a collection of commands or procedures to create a new Docker Image. In this sense we can consider a Dockerfile are the source code of Docker Image. Importantly, Dockerfiles typically start from a base image, which is a existing Docker Image that your image is extending.

-   `Docker Image`: A read-only file that contains the instructions for creating a Docker Container. Think of an image as the blueprint of what will be in a container when it is running. Docker Images can be shared via [Dockerhub](https://hub.docker.com/), so that they can be used by others.

-   `Docker Container`: Is an actual running instance of a Docker image. It runs completely isolated from the host environment by default and only accesses host files (i.e. data) if it has been configured to do so. It is possible to create multiple containers simultaneously from the same Docker Image, and each container can be started, stopped, moved, and deleted independently of the others.

The graphic above shows the relationships between these components including the central commands of Docker that connect them `build` and `run`.

### Using Docker with R

So to create a `Docker Image` to containerize our R research projects we need to start by creating a `Dockerfile` and, as mentioned above, this should start with a base image. In our case this base image must logically include R and RStudio (if we want to utilise the RStudio Projects features).

Fortunately there is a project that specifically catalogs and manages Docker Images for R projects: [`Rocker`](https://rocker-project.org/). The images available through the Rocker project not only include different versions of R and RStudio but also images containing collections of R packages for specific purposes (e.g. tidyverse for data wrangling and visualisation, geospatial packages etc.).

In terms of actually creating the `Dockerfile` for our R project, this can be done manually (See a good R-focused tutorial[here](https://colinfay.me/docker-r-reproducibility/)), however there are also R packages that can help with this process such as [`dockerfiler`](https://thinkr-open.github.io/dockerfiler/) and the `[rrtools`\](https://github.com/benmarwick/rrtools) package.

For our [exercise](@sec-docker_exercise) of this workflow we will use the `dockerfiler` package, which creates a custom class object that represents the Dockerfile and has slots corresponding to common elements of Docker images. This allows us to add elements to the dockerfile in a more R-like way. The following code snippet demonstrates adding `Maintainer` details to a `Dockerfile` object, before saving it:

```{R}
#| eval: false
#| echo: true
library(dockerfiler)
# Create a dockerfile template
my_dock <- Dockerfile$new()

# Add maintainer
my_dock$MAINTAINER("Jane Doe", "jane_doe@gmail.com")

# Save
my_dock$write()
```

### Docker with `renv`

Docker can be used with the `renv` package to [manage the package environment of your project](@sec-environment-management).

There are two methods of implementing this which come with their own considerations:

1.  **Use `renv` to install packages when the Docker image is built**: This approach is useful if you plan to have multiple projects with **identical package requirements**. This because by creating an image containing this package library you can simply re-use the image as a base for new images for different projects [@ushey2024].**Warning:** Restoring the package library (`renv::restore()`) when building the image will be slow if there are large numbers of packages so try to avoid the need to re-build the base image many times.

2.  **Use `renv` to install/restore packages only when Docker containers are run**: This approach is better when you plan to have multiple projects that are built from the same base image but require **different package requirements**. Hence it is preferable to not included the package library in the image but instead to mount different project specific libraries to the container when it is run [@ushey2024]. If project libraries are dynamically provisioned in this way and `renv::restore()` is run with caching this means that the packages are not re-installed everytime the container is run.
:::

<!-- Presentation content -->

::: {.content-visible when-format="revealjs"}
# Containerization with Docker

## Containerization with Docker

### What is containerization?

Containerization is the process of bundling code along with all of it's dependencies including:

-   The operating system

-   Software libraries (packages)

-   Other system software

Everything needed to run the code is included means that the code is portable and can be run on any platform or cloud service.

**This makes containerization the gold standard for reproducibility**

## Containerization with Docker

### What is Docker?

::: {.columns .v-center-container}
::: {.column width="50%"}
[Docker](https://www.docker.com/) is an open-source, and the most popular, platform for containerization.
:::

::: {.column width="50%"}
![](assets/images/Docker_light_blue.png){fig-align="center"}
:::
:::

## Containerization with Docker

![](assets/images/Docker_workflow.png){fig-align="center" width="80%"}

`Dockerfile`:

-   Text file containing a collection of commands to create a new Docker Image.
-   Includes the details of the environment required to create to run the code and the command to do it.
-   Typically start from a base image, i.e an existing Docker Image.

## Containerization with Docker

![](assets/images/Docker_workflow.png){fig-align="center" width="80%"}

`Docker Image`:

-   A read-only file that contains the instructions for creating a Docker Container.
-   *Blueprint* of what will be in a container when it is running.
-   Docker Images can be shared via [Dockerhub](https://hub.docker.com/), so that they can be used by others.

## Containerization with Docker

![](assets/images/Docker_workflow.png){fig-align="center" width="80%"}

`Docker Container`:

-   A running instance of a Docker image that runs code with it's environment
-   Runs in isolation from the host, only accesses host files (i.e. data) if it has been configured to do so.
-   Possible to create multiple containers simultaneously from the same Docker Image.

::: notes
-   `Docker Container`: Is an actual running instance of a Docker image. It runs completely isolated from the host environment by default and only accesses host files (i.e. data) if it has been configured to do so. It is possible to create multiple containers simultaneously from the same Docker Image, and each container can be started, stopped, moved, and deleted independently of the others.
:::

## Containerization with Docker

### Using Docker with R

Two main resources that can help in the creation of containerized R projects:

1.  [`Rocker`](https://rocker-project.org/):

-   A project that catalogs and manages Docker Images for R projects.

-   Basic images include different versions of R and RStudio

-   Other images offering collections of R packages for specific purposes (e.g. tidyverse).

## Containerization with Docker

### Using Docker with R

Two main resources that can help in the creation of containerized R projects:

2.  `Dockerfile`:

-   A package which creates a custom class object that represents the `Dockerfile`

-   Has slots corresponding to common elements of Docker images allowing to add elements to the dockerfile in R.

## Containerization with Docker

### Docker with `renv`

Two methods of integrating `renv` with Docker to manage the package environment of your project:

1.  Use `renv` to install packages when the Docker image is built:

-   Useful for multiple projects with **identical package requirements** because you can re-use the image as a base for new images[@ushey2024].
-   Restoring the package library (`renv::restore()`) when building the image is slow so try to avoid the need to re-build the base image many times.

## Containerization with Docker

### Docker with `renv`

Two methods of integrating `renv` with Docker to manage the package environment of your project:

2.  Use `renv` to install/restore packages only when Docker containers are run:

-   Better when you plan to have multiple projects built from the same base image but with **different package requirements**.

-    Package library is not included in the image but instead different project specific libraries are mounted to the container when it is run [@ushey2024].

-   If `renv::restore()` is run with caching, packages are not re-installed everytime the container is run.
:::
