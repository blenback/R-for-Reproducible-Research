---
execute:
  echo: true
  eval: false
  error: false
---

::: {.content-hidden when-format="revealjs"}

![](assets/images/version_control_workflow.png){width="70%" fig-align="center"}

**Version control** software output can have multiple uses including creating a systematic procedure for collaboration, working as a team along with increasing the ease of reproduction of the work by other users or by the original researcher as well. We all know the difficulty of tracing back the workflow of work projects a few months down the line after having shelved it, and it is here that Git and Github can be highly useful (@Alexander2023).

### About Git

**Git** allows us to make snapshot or record of the changes undertaken in a script, and store it as with a message that defines the change. In this way even after multiple updates, the history is preserved allowing us to revert, compare and systematically trace back the workflow development.

**Git** is useful also for data scientists and researchers that work individually yet want to create systematically reproducible workflows with version control (@Alexander2023).

### GitHub repositories and functionalities {#sec-Gitrepo}

The version controlled code and all other auxiliary files related to the project are stored in a Github repository which was created by the user in their account on Github. A repository can either be set as public or private as per the users need for visibility of their work.

To help with version control Github repositories provide multiple functionalities like creating 'branches', 'clones', 'merging' multiple branches, setting up a 'pull request' before merge etc. As we get into more complicated workflows handled by multiple developers, Github allows many more functionalities as checks and balances to code development. However, we will limit our understanding to what is needed to create work with a version control history allowing for small scale collaboration, but with the main goal of creating reproducible research ([see more details](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories)).

### Basic functionalities

-   **Creating a repository and setting up user authorisations**: A project repository must first be set up on GitHub as either a private or a public repository. If it is not an individual project, collaborators can be added with appropriate (read or write) permission levels ([see more details](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-user-account-settings/permission-levels-for-a-personal-account-repository)). It is good to elaborate the 'Readme' file so as to help viewers get an idea of the repository ([see more details](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)).

-   **Push and Pull**: The data and code related to a project must be cloned from the remote version to a local version before changes are made. Make sure to pull from updated (i.e. merged branches; see below) branches before making changes. Once changes are made the user must 'commit' all the correct changes. Once this is done the changed code can be pushed back to the branch.

-   **Branching and merging** : Git allows users to create [branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#working-with-branches) that feed into the 'main' branch of a project repository on GitHub. Each branch can be created either for different tasks or for different users as per the requirement. To [merge branches into 'main' users have to set up a pull-request](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github) which needs to be approved by an authorised user.

-   Git provides additionally **many more [functionalities](https://education.github.com/git-cheat-sheet-education.pdf)** for identifying differences between changed files or between branches, to make temporary commits and to revert back to a certain commit in history. However this is beyond the scope of this workshop.

### Git in R-Studio

When a Github repository is connected to an R project, R-studio adds a 'Git' tab (see image below) with 'push', 'pull', 'commit' and 'diff' functionalities. We can switch branches to pull from or push to and additionally trace the history of changes in the Github respository by all users.

![Git intergration into R-Studio](assets/images/screenshot_R_studio_git.png){width="70%" fig-align="center"}

Alternatively you can also use [Github desktop](https://github.com/apps/desktop) to perform the same functionalities.

### Additional functionalities

1.  Public Github repositories can now be archived on Zenodo as a permanent record of the work with a Digital Object Identifier (DOI) that can be cited in academic work ([Click to see more details](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)).

2.  GitHub further provides advanced functionalities like [GitHub Actions](https://docs.github.com/en/actions/about-github-actions/understanding-github-actions) that allows the user to automate certain processes for application development or project management.

3.  GitHub releases can be automatically published on Docker Hub or GitHub packages as part of a Continuous Integration(CI) workflow ([see more details](https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images)).
:::

::: {.content-visible when-format="revealjs"}

## Version control with Github

### Why Git and GitHub?

-   **Version control**: A more systematic way to organise data beyond "dataprep_1", "dataprep_final", "dataprep_finalfinal" etc.

-   **Systematic documentation** and **storage of code** changes allowing us to track changes and revert back to previous versions when needed.

::: notes
Git is a version control system that tracks changes whereas Github is a cloud based online platform that hosts git repositories.

Version control is also the main reason for most people to use Git and Github. This simplifies managing different versions of your code. Instead of manually creating copies of your files, Git handles this for you, allowing you to work with a single file on your computer without the worry of messing up a previously working version.

Additionally, Git  tracks changes over time, documenting who made the changes and why. This is helpful if multiple people work on a project. If mistakes occur or you need to revisit earlier versions, Git lets you revert to previous states.
:::

## Version control with Github

### Terminologies

-   **Push** and **Pull**?

![Git terminologies](assets/images/Git_terminology.png){width="70%" fig-align="center"}

-   Git cheatsheet: https://education.github.com/git-cheat-sheet-education.pdf

::: notes
Think of branches as separate working spaces, but still about the same work. There is a main branch storing your results. Each additional branch can be used to test changes without affecting the main output. Once you’re satisfied you can then merge your changes into the main branch. This let’s you test new things and fix bugs without worrying to mess up the main branch. Also, it helps to avoid conflicts if several people work on the same project.
:::

## Version control with Github

### Steps for using Git and GitHub (To be done in the exercises - basic)

-   Create a GitHub repository in your account

-   Download and install Git

-   Add credentials for your account to Git

-   Link RProject to Github repository

-   Open, checkout and navigate Git repository local version via Rstudio

-   Basic functionalities of Git in Rstudio

::: notes
The process involves setting up a GitHub repository, installing Git, linking it with your account, and then connecting your R project to the repository. From there, you can manage the repository through RStudio, using basic Git functionalities to track and control changes.
:::

## Version control with Github

### Additional fucntionalities

-   GitHub repositories can be archived on Zenodo and thus get a DOI.
-   GitHub actions
-   GitHub releases can be continuously integrated into DockerHub or GitHub Packages

::: notes

- GitHub Actions is a powerful automation tool integrated into GitHub. It allows you to automate actions based on triggers. For example every time code is pushed or pulled or at a certain time of day. For example if you have a website with quarto you can automatically rerender the website if a push is performed.

- GitHub releases can be integrated into platforms like **DockerHub** or **GitHub Packages**. This means you can automatically build and publish Docker containers or software packages directly from your GitHub releases
:::
:::
