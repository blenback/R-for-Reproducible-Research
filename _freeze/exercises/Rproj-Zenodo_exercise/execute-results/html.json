{
  "hash": "ebbe412a29be39a6e5d9ec449f2c04ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n\n## RStudio Project Setup and `Zenodo` upload {#sec-Rproj_zenodo_exercise}\n\n### RStudio Project Setup and Best Practices\n\nThis section walks you through the setup of a basic RStudio project with good practices for organizing data, scripts, and version control introduced in [Rproject section](%7B@sec-projects%7D). We‘ll also initialize `renv` to manage package dependencies, ensuring reproducibility.\n\n### Step 1: Create a New RStudio Project\n\nStart by creating a new RStudio project in the root of the `exercise_data` directory. You can name the project as you like. In this example, we will use Rice_farm_analysis.proj.\n\n-   Open RStudio.\n-   Click on \"File\" \\> \"New Project\" \\> \"Existing Directory\".\n-   Select the `exercise_data` folder as the location and give the project a name, for example, `Rice_farm_analysis.proj`.\n\nThis creates a `.Rproj` file in the root of your project to help manage the workspace and project-specific settings.\n\n### Step 2: Organize Your Data\n\nIt's good practice to organize raw and processed data in separate folders. Let’s start by organizing the data:\n\n-   Create a directory `Data/Raw` inside your project folder.\n-   Move the provided CSV file into this `Data/Raw` directory.\n\nThis ensures that your raw data remains untouched and is well-structured.\n\n### Step 3: Organize and Split Your Scripts\n\nWe'll now organize the project's scripts by splitting the original script into separate analysis and visualization scripts.\n\n-   Create a `scripts` folder inside your project directory.\n-   Move the original `RiceFarm_project.R` script into the `scripts` folder.\n\nNow, split the script into two parts: - Create two new scripts named `01_data_analysis.R` and `02_data_visualisation.R`.\n\n-   Copy the relevant parts of the original script into these new scripts. For `01_data_analysis.R` copy:\n\n    -   The call to the relevant library `library(stringr)`\n    -   Everything before the call to the `ggplot()` function\n\n-   Additional steps:\n\n    -   Replace `setwd()` function with this snippet to set up relative paths:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Raw data dir\n    raw_dir <- \"Data/Raw\"\n    \n    # vector and create processed data save dir\n    save_dir <- \"Data/Processed\"\n    dir.create(save_dir,\n           showWarnings = FALSE,\n           recursive = TRUE)\n    ```\n    :::\n\n\n\n    -   Save rice_data_summary to disk after processing:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Save the summarized data\n    write.csv(rice_data_summary,\n          file.path(save_dir, \"RiceFarms_summary.csv\"),\n          row.names = FALSE)\n    ```\n    :::\n\n\n\n-   For `02_data_visualisation.R` copy:\n\n    -   The call to the relevant library `library(ggplot2)`\n    -   The call to the functions `ggplot()` and `ggsave()`\n\n-   Additional steps:\n\n    -   Add code to create output directory for the plots:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Directory for saving plots\n    plot_dir <- \"Output/Visualisations\"\n    dir.create(plot_dir, showWarnings = FALSE, recursive = TRUE)\n    ```\n    :::\n\n\n\n    -   Add code that loads the summarized data from the processed data folder:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Raw data directory\n    raw_dir <- \"Data/Raw\"\n    # Load csv file of data\n    rice_data <- read.csv(file.path(raw_dir, \"RiceFarms.csv\"))\n    ```\n    :::\n\n\n\n### Step 4: Add Script Headers\n-   Add headers to both new scripts. You can use this template:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # -----------------------------------------------\n    # Script Name: [01_data_analysis.R / 02_data_visualisation.R]\n    # Project: Rice Farm Analysis\n    # Purpose: [Data analysis / Data visualization]\n    # Author: [Your Name]\n    # Date: [YYYY-MM-DD]\n    # -----------------------------------------------\n    ```\n    :::\n\n\n\n### Step 5: Create a Master Script\nAs a next step you will create a master script that ties together and runs both the data analysis and visualization scripts.\n\n-   In the root of your project, create a new file named `RiceFarm_master.R`\n-   Add a header as in Step 4.\n-   Add the following code snippet to the script to source `01_data_analysis.R` and `02_data_visualisation.R`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ### =========================================================================\n    ### 01- Data analysis\n    ### =========================================================================\n    \n    # Source the data analysis script\n    source(\"Scripts/01_data_analysis.R\")\n    \n    ### =========================================================================\n    ### 02- Data visualization\n    ### =========================================================================\n    \n    # Source the data visualization script\n    source(\"Scripts/02_data_visualisation.R\")\n    ```\n    :::\n\n\nRunning this master script will execute both analysis and visualization steps.\n\n### Step 6: Initialize renv and Manage Dependencies\nTo make your project reproducible, we'll use `renv` to manage dependencies. This ensures that the project can be recreated with the same package versions.\n\n-   Run the following command in your master script to set up the project-specific environment\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    renv::init()\n    ```\n    :::\n\n\nThis creates a local library for your project and captures the required packages.\n\n-   Once the initialization is complete, run:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    renv::snapshot()\n    ```\n    :::\n\n\nThis records the project's environment in a renv.lock file, which is essential for reproducibility.\n\n### Step 7: Automate Opening the Master Script\nFor convenience, we can configure RStudio to automatically open the master script when the project is loaded.\n\n-   Open the `.Rprofile` file in the root of your project directory. The file might be hidden. On Windows click \"View\" > \"Show\" > \"Hidden items\" in the explorer and on MacOS click Press Command+Shift+Dot within the root directory to see the file.\n-   Add the following R code to the `.Rprofile` file:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    rsetHook(\"rstudio.sessionInit\", function(newSession) {\n      if (newSession)\n    rstudioapi::navigateToFile('RiceFarm_master.R', line = -1L, column = -1L)\n    }, action = \"append\")\n    ```\n    :::\n\n\n    \n### Step 8: Re-snapshot the Project\nAfter modifying the `.Rprofile` file, it’s important to capture these changes in the `renv.lock` file.\n\n-   Run the following command in your master script to ensure that the `rstudioapi` package (which enables automatic script opening) is included in the snapshot:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    renv::snapshot()\n    ```\n    :::\n\n\n\n\n\n### Step 9: Install zen4R to access `Zenodo` through r\n\nNow that the project is set up and organized, it's time to share it with the wider research community on Zenodo. The following steps are heavily based on [@blondel2024]. We have extracted the most relevant parts to explain the workflow. If you are interested in more details, check out their user manual at: https://cran.r-project.org/web/packages/zen4R/vignettes/zen4R.html.\n\nFor this exercise we will not be using `Zenodo` directly but `Zenodo Sandbox`. The `Zenodo Sandbox` is a separate, secure testing environment where users can explore `Zenodo‘s` features without impacting the main platform‘s publicly accessible data. It allows you to test file uploads, generate test DOIs, and experiment with API integrations. DOIs created in the sandbox are only for testing and use a different prefix. You will need a separate account and access token for the sandbox, distinct from those used on `Zenodo‘s` main site.\n-   Create an account on https://sandbox.zenodo.org.\n\n`Zenodo` can be accessed with r library zen4R to upload, edit, publish and download data.\n\n-   Create a new R script outside of the project directory.\n-   Install zen4R library with the following code:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #install dependency \"remotes\"\n    install.packages(\"remotes\")\n        \n    #install zen4R\n    require(\"remotes\")\n    install_github(\"eblondel/zen4R\")\n    ```\n    :::\n\n\n\n### Step 10: Create a new `Zenodo` record\n\nA `Zenodo` record includes metadata, data and a Digital Object Identifier (DOI) which is automatically generated by `Zenodo` for all uploads. But before you can add records to `Zenodo`, you need to get access to your account through R.\n\n-   Go to https://sandbox.zenodo.org/account/settings/applications/.\n-   Log into your account and then create a new \"Personal access token\" in the \"Applications\" section of your account.\n-   Then run the following code in your script to establish the access and create a new record.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(zen4R)\n        \n    #Create manager to access your Zenodo repository\n    zenodo <- ZenodoManager$new(\n    token = \"your_token\",\n    sandbox = TRUE,\n    logger = \"INFO\" \n    )\n        \n    ##Prepare a new record to be filled with metadata and uploaded to Zenodo\n    myrec <- ZenodoRecord$new()\n    ```\n    :::\n\n\nIf you want to connect to `Zenodo` and not `Zenodo Sandbox`, create the token in your `Zenodo` account and remove the line `sandbox = True` in the code above.\n\nThe types of metadata that can be included in a `Zenodo` record are vast. A full list can be found in the documentation at https://developers.zenodo.org/#representation. \n\n-   Copy and run the example below to add metadata to your record.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    myrec$setTitle(\"RiceFarm\") #title of the record\n    myrec$addAdditionalTitle(\"This is an alternative title\", type = \"alternative-title\")\n    myrec$setDescription(\"Calculating statistics of RiceFarm dataset\") #description\n    myrec$addAdditionalDescription(\"This is an abstract\", type = \"abstract\")\n    myrec$setPublicationDate(\"2024-09-16\") #Format YYYY-MM-DD\n    myrec$setResourceType(\"dataset\")\n    myrec$addCreator(firstname = \"Yourfirstname\", lastname = \"Yourlastname\", role = \"datamanager\", orcid = \"0000-0001-0002-0003\")\n    myrec$setKeywords(c(\"R\",\"dataset\")) #For filtering\n    myrec$addReference(\"Blondel E. et al., 2024 zen4R: R Interface to Zenodo REST API\")\n    ```\n    :::\n\n\n\nA record can be deposited on `Zenodo` before it is published. This will add the record to your account without making it public yet. A deposited record can still be edited or deleted. You can also upload data to a deposited record. If you prefer a graphical interface, you can also edit the record on the `Zenodo` website.\n\n-   Deposit the record on `Zenodo`:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #deposit record\n    myrec <- zenodo$depositRecord(myrec, publish = TRUE)\n    ```\n    :::\n\n\n-   View the deposited record at https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\n\n-   Compress your project directory to a .zip file.\n-   Upload the .zip file to your deposited record:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #add data to the record, adjust the path below\n    zenodo$uploadFile(\"path/to/your/file\", record = myrec)\n    ```\n    :::\n\n\n\n-   Publish the record:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #make the record publicly available on Zenodo (Sandbox).\n    myrec <- zenodo$publishRecord(myrec$id)\n    ```\n    :::\n\n\n\n### Step 11: Edit a published `Zenodo` record\n\nIt is also possible to edit or update the metadata of published records.\n\n-   Reconnect to your account:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    zenodo <- ZenodoManager$new(\n      token = \"your_token\",\n      sandbox = TRUE,\n      logger = \"INFO\" \n    )\n    ```\n    :::\n\n\n    \n-   Access your record:    \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #get your record by querying the metadata, e.g. by title, this will give you a list of all records with that title.\n    myrec <- zenodo$getDepositions(q='title:RiceFarm')\n    \n    #access the first item in the list, as there should only be one record with that particular title\n    myrec <- myrec[[1]]\n    ```\n    :::\n\n\n\n-   Modify your record:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #modify the record‘s metadata\n    myrec <- zenodo$editRecord(myrec$id)\n    myrec$setTitle(\"RiceFarm Statistics\")\n    ```\n    :::\n\n\n    \n-   Publish your changes:    \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #redeposit and publish the edited record\n    myrec <- zenodo$depositRecord(myrec, publish = TRUE)\n    ```\n    :::\n\n\n\nOnce a record has been published, it is not possible to edit the data that has been attached to it. However, it is possible to upload an updated version of the data. The previous version of the data will remain accessible via `Zenodo`. The record will have one overall DOI, while each version will have its own DOI.\n\n-   Reconnect to your account:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    zenodo <- ZenodoManager$new(\n      token = \"your_token\",\n      sandbox = TRUE,\n      logger = \"INFO\" \n    )\n    ```\n    :::\n\n\n    \n-   Access your record:    \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #get your record by querying the metadata, e.g. by title, this will give you a list of all records with that title.\n    myrec <- zenodo$getDepositions(q='title:RiceFarm Statistics')\n    \n    #access the first item in the list, as there should only be one record with that particular title\n    myrec <- myrec[[1]]\n    ```\n    :::\n\n\n\n-   Rename your .zip file on your computer\n-   Upload the renamed .zip file:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #edit data, delete_latest_files = TRUE to not include data of previous version in newer version\n    myrec <- zenodo$depositRecordVersion(myrec, delete_latest_files = TRUE, files = \"path/to/your/new/file\", publish = TRUE)\n    ```\n    :::\n\n\n\n-   Again, go to https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\n-   Activate \"View all versions\" on the left hand side.\n-   Check if both versions show up",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}