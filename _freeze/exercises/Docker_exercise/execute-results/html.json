{
  "hash": "4de72e53a04717ebf4d436f77adb8d6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n\n\n\n\n\n\n## Containerization with Docker exercise {#sec-docker_exercise}\n\nIn this exercise we will create a Docker container for an example R project. The project is the same that is created in the first workflow [exercise](@sec-Rproj_zenodo_exercise), however to save time or in case you haven't completed this exercise we will start with the finished output from it.\n\nIf you would prefer to view the exercise script offline, here is a PDF version: <a href=\"https://www.example.com/example.zip\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download exercise instructions</b></a>\n\n### Step 1: Download the resources\n\n-   Click here to download the resources for the exercise: <a href=\"https://drive.google.com/file/d/1TN3DZqetynnNWlTeV2eKqJDcU53fq9Zg/view?usp=sharing\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download resources for exercise</b></a>\n-   Unzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n### Step 2: Download Docker\n\n-   Download Docker Desktop for your operating system from the [Docker website](https://www.docker.com/products/docker-desktop).\n-   Once downloaded run the installer like you would for other software. You may need to restart your computer after installation.\n-   While this is happening it is useful to make a Docker account. This is not necessary but can be useful for managing your containers. You can also sign in with your GitHub account.\n\n### Creating the Dockerfile\n\n-   Open Rstudio and navigate to the folder you downloaded in step 1.\n-   Create a new R script and name it `Dockerfile.R`.\n-   Install the Dockerfiler package: `install.packages(\"dockerfiler\")`.\n-   Add the following code to the script:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dockerfiler)\n\n# Create a dockerfile template\nmy_dock <- Dockerfile$new()\n\n# Add maintainer\nmy_dock$MAINTAINER(\"Your_name\", \"Your_email\")\n\n# Add R and RStudio base image\nmy_dock$FROM(\"rocker/rstudio:4.0.3\")\n\n# Add R packages\n```\n:::\n\n\n\n\n\n\n\n\n### Creating docker image \n\nOne of the most important Docker commands is `build` which creates a `Docker image` from your `Dockerfile` instructions.\n\nThere are two ways to use `build` command:\n1.    Through a Command Line Interface (CLI) such as the terminal in Rstudio or the terminal in your operating system (e.g Command Prompt for Windows). Open up a new Terminal window and navigate to where your code is located. Then, run the following command.\n2.    Through the Docker desktop application. Which is more user friendly if you are not familiar with the CLI.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndocker build -t r-docker-demo .\n```\n:::\n\n\n\n\n\n\n\n\nYou will then see that a docker image file has been created:\n\n\n### Running docker container\n\n\n::: notes\nhttps://github.com/noamross/nyhackr-docker-talk/blob/master/Noam_Ross_DockerForTheUseR_nyhackr_2018-07-10.pdf\n\nhttps://www.statworx.com/en/content-hub/blog/running-your-r-script-in-docker/\n\nstevedore package for pulling images from Dockerhub using the Docker API\nhttps://richfitz.github.io/stevedore/\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}