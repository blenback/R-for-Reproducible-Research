{
  "hash": "2e4b7db73ff6a20b3516e15b9cc2f701",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Reproducible Research with <img style=\"vertical-align:middle; height:35px; width: 35px; border: none;\n  background: none;\" src=\"assets/images/Rlogo.png\"> and <img style=\"vertical-align:middle; height:35px; width: 140px;\" src=\"assets/images/quarto-logo-trademark.svg\">: Workflows for data, projects and publications'\nsubtitle: \"A workshop presented at the [Landscape 2024 conference](https://landscape2024.org/frontend/index.php?folder_id=7393&page_id=), Berlin\"\nformat:\n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: left\n    toc-depth: 2\n    number-sections: true\n    number-depth: 1\ncitation-location: margin\nlightbox: true\nfig-align: center\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n\n![](assets/images/graphical_abstract_dark.png){width=\"70%\" fig-align=\"center\"}\n\nThis image highlights some the key concepts we will discuss in the workshop, which have been divided into seperate sections:\n\n1.  [Background](@sec-background): Some introductory information on why reproducible and transparent research is important.\n2.  [Research projects with R](@sec-Rprojects): Starting from the basics to develop good practice for creating research projects with R, focusing on some features of Rstudio as an Integrated Development Environment that can help ensure your work is reproducible.\n3.  [Workflows for reproducibility](@sec-workflows): Here we present three workflows of differing levels of complexity and discusses how they can be combined and which might be best given the research needs.\n4.  [Quarto](@sec-Quarto): Here we introduce the open-source scientific and technical publishing system Quarto which can be used for numerous academic activities including preparing manuscripts.\n5.  [Guided exercises](@sec-exercises): Now it's time to get hands-on with some guided exercises to put into practice some of the concepts we have discussed.\n6.  [Resources](@sec-resources): A collection of resources that we find particularly helpful in our own journey towards reproducible research.\n\n# Background {#sec-background}\n\n\n\n---\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n## About us\n\nWe are four researchers from the research group [Planning of Landscape\nand Urban Systems (PLUS)](https://plus.ethz.ch/) at [ETH\nZürich](https://ethz.ch/en.html). Click on the social icons below our\npictures to find out more about our individual research or get in touch\nwith us.\n\n::: {.grid style=\"display: flex; text-align: center;\"}\n::: g-col-6\n![](assets/images/Ben.jpg){.picture .lightbox}\n\n### Ben Black\n\n*Doctoral Researcher*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://blenback.github.io/){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:bblack@ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/ben-black-9889a1150/){.iconify-icon}\n[{{< iconify fa6-brands github size=xl >}}](https://github.com/blenback/){.iconify-icon}\n[{{< iconify fa6-brands researchgate size=xl >}}](https://www.researchgate.net/profile/Benjamin-Black-5/){.iconify-icon}\n:::\n\n::: g-col-6\n![](assets/images/nivedita.jpg){.picture .lightbox}\n\n### Nivedita Harisena\n\n*Doctoral Researcher*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://irl.ethz.ch/people/person-detail.Mjg5Mjgx.TGlzdC8zNzc5LC0xMzk1OTgzMDM3.html){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:nharisena@ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/nivedita-varma-harisena-667298141/){.iconify-icon}\n[{{< iconify fa6-brands github size=xl >}}](https://github.com/NVHarisena1){.iconify-icon}\n:::\n\n::: g-col-6\n![](assets/images/Manuel.jpg){.picture .lightbox}\n\n### Manuel Kurmann\n\n*Research Assistant*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://irl.ethz.ch/people/person-detail.MjM2NjYz.TGlzdC8zNzc5LC0xMzk1OTgzMDM3.html){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:mankurma@student.ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/manuel-kurmann-696577251/){.iconify-icon}\n[{{< iconify fa6-brands github size=xl >}}](https://github.com/ManuelKurmann){.iconify-icon}\n:::\n\n::: g-col-6\n![](assets/images/Maarten.jpg){.picture .lightbox}\n\n### Maarten Van Strien\n\n*Senior scientist*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://irl.ethz.ch/people/person-detail.MTYzODAz.TGlzdC8xNzM4LC0xMzk1OTgzMDM3.html){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:vanstrien@ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/maarten-van-strien-347b6747/?originalSubdomain=ch){.iconify-icon}\n[{{< iconify fa6-brands researchgate size=xl >}}](https://www.researchgate.net/profile/Maarten-Van-Strien){.iconify-icon}\n:::\n:::\n\n## What is reproducible research?\n\nReproducibility is a key aspect of reliable scientific research. It\nenables other researchers to reproduce the same results using the\noriginal data, code, and documentation [@essawy2020]. Below are the core\nprinciples to ensure reproducibility in research:\n\n**Starts with planning**\n\nReproducibility begins during the planning stage. It is essential to\norganize data management and ensure clear protocols are in place even\nbefore starting the analysis. Consistent Data Storage Regular backups of\ndata are crucial. Storing data in multiple locations ensures\naccessibility and minimizes the risk of data loss. [@alston2021]\n\n**Contains clear documentation**\n\nThorough documentation is essential to guarantee that data and methods\ncan be accurately interpreted and reproduced by others. This entails the\nuse of well-organised files and the inclusion of metadata that describes\nthe data, how it was obtained, and how it was processed.\n[@alston2021][@siraji2023]\n\n**Utilizes version control**\n\nUsing version control systems helps track changes in the project over\ntime. This approach preserves the history of the project and facilitates\nthe reversion of files to a previous state in the event of an error.\n[@alston2021]\n\n**Is accessible**\n\nData should be stored in nonproprietary, portable formats to ensure\nbroad accessibility and long-term usability. This practice ensures that\nresearchers can access the data without relying on specific software\ntools. Making data and code publicly available in accessible\nrepositories supports scientific transparency and allows broader use of\nresearch outputs. [@alston2021][@siraji2023]\n\nBy following these steps, researchers contribute to the wider scientific\ncommunity, ensuring that their work can be efficiently and accurately\nreproduced by others.\n\n**Introducing the FAIR Principles**\n\nWhile the principles above lay the groundwork for reproducibility, the\nFAIR principles (Findability, Accessibility, Interoperability, and\nReusability) provide a more comprehensive framework for enhancing the\nvalue of research data in the digital age. These principles expand on\nreproducibility by emphasizing not only human access to research outputs\nbut also machine actionability, ensuring that data can be effectively\nfound, accessed, and reused by both people and computational tools​.\n[@wilkinson2016]\n\n**How FAIR Principles Build on Reproducibility**\n\nThe FAIR principles naturally complement and expand on the core aspects\nof reproducible research:\n\n-   Findability reinforces the importance of clear documentation.\n    Assigning persistent identifiers and providing rich metadata makes\n    it easier for researchers and search tools to locate and understand\n    datasets, ensuring that your research remains accessible over time.\n    \n-   Accessibility builds on the concept of using nonproprietary formats.\n    FAIR emphasizes that data should be retrievable using open,\n    standardized protocols, which ensures long-term access to both the\n    data and its metadata, even if the data itself becomes unavailable.\n    \n-   Interoperability relates to the consistent use of data standards and\n    version control. By using standardized formats and vocabularies,\n    research data can be more easily integrated with other datasets,\n    supporting reuse and long-term relevance in broader research\n    contexts.\n    \n-   Reusability directly aligns with the goals of reproducible research\n    by ensuring that data is accompanied by clear licensing and\n    provenance, allowing others to confidently reuse it. This principle\n    reinforces the need for thorough documentation and transparent\n    methods.\n\nBy incorporating the FAIR principles, researchers ensure that their data\nnot only meets the standards of reproducibility but is also optimized\nfor long-term use and discovery. This fosters a research environment\nwhere data is more transparent, accessible, and impactful over time​.\n[@wilkinson2016]\n\n## Why strive for reproducible research?\n\nIn recent years, various scientific disciplines have experienced what is\nknown as a \"replication crisis\". This crisis arises when researchers are\nunable to reproduce the headline results of key studies using the\nreported data and methods [@moonesinghe2007][@collaboration2015]\n[@bohannon2015]. This lack of reproducibility undermines public trust in\nscience, as it raises doubts about the validity of research findings.\n\n### Advantages of Reproducibility for Your Research\n\n**Personal Reference**\n\nConducting reproducible research simplifies the process of remembering\nhow and why specific analyses were performed. This makes it easier to\nexplain your work to collaborators, supervisors, and reviewers,\nenhancing communication throughout your project. [@alston2021]\n\n**Efficient**\n\nModifications Reproducible research enables you to quickly adjust\nanalyses and figures when requested by supervisors, collaborators, or\nreviewers. This streamlined process can save substantial time during\nrevisions. [@alston2021]\n\n**Streamlined Future Projects**\n\nBy maintaining well-organized and reproducible systems, you can reuse\ncode and organizational structures for future projects. This reduces the\ntime and effort required for similar tasks in subsequent research.\n[@alston2021]\n\n**Demonstrates Rigor and Transparency**\n\nReproducibility demonstrates scientific rigor and transparency. It\nallows others to verify your methods and results, improving the peer\nreview process and reducing the risk of errors or accusations of\nmisconduct. [@alston2021]\n\n**Increases Impact and Citations**\n\nMaking your research reproducible can lead to higher citation rates\n[@piwowar2007] [@mckiernan2016]. By sharing your code and data, you\nenable others to reuse your work, broadening its impact and increasing\nits relevance in the scientific community. [@whitlock2011]\n[@culina2018].\n\n### Advantages of Reproducibility for Other Researchers\n\n**Facilitates Learning**\n\nSharing data and code helps others learn from your work more easily. New\nresearchers can use your data and code as a reference, speeding up their\nlearning curve and improving the quality of their analyses.\n[@alston2021]\n\n**Enables Reproducibility**\n\nReproducible research makes it simpler for others to reproduce and build\nupon your work, fostering more compatible and robust research across\nstudies. [@alston2021]\n\n**Error Detection**\n\nBy allowing others to access and review your data and code,\nreproducibility helps detect and correct errors, ensuring that mistakes\nare caught early and reducing the chance of their propagation in future\nresearch. [@alston2021]\n\n## Why {{< iconify fa-brands r-project >}} for reproducible research?\n\nR is increasingly recognized as a powerful tool for ensuring\nreproducibility in scientific research. Here are some key advantages of\nusing R for reproducible research:\n\n**Open Source**\n\nAccessibility R is freely available to everyone, eliminating cost\nbarriers and promoting inclusive access to research tools. This\nopen-source model ensures that researchers around the world can use and\ncontribute to its development, fostering a collaborative research\nenvironment. [@siraji2023]\n\n**Comprehensive Documentation**\n\nR encourages thorough documentation of the entire research process. This\nensures that analyses are well-tracked and can be easily replicated\nacross different projects, enhancing the overall transparency and\nreliability of the research.\n\n**Integrated Version Control**\n\nR seamlessly integrates with version control systems like Git, allowing\nresearchers to track changes to code, data, and documents. This helps\nmaintain a detailed record of a project's evolution and ensures that all\nsteps are easily reproducible. [@siraji2023]\n\n**Consistency Across Platforms**\n\nR provides a stable environment that works consistently across different\noperating systems, whether you are using Windows, Mac, or Linux. This\ncross-platform consistency greatly enhances the reproducibility of\nresearch across diverse systems.\n\n**Broad Community Support**\n\nThe R community is large and active, continuously contributing to the\nimprovement of the software. This broad support makes R a reliable\nchoice for long-term research projects, ensuring that new tools and\nmethods are constantly being developed and shared.\n\n**Flexibility and Adaptability**\n\nR offers a wide range of tools and functions that can be adapted to\nvarious research needs. This flexibility allows researchers to handle\ndiverse tasks within a reproducible framework, making it a versatile\ntool for projects of all kinds.\n:::\n\n<!-- Presentation content -->\n\n::: {.content-visible when-format=\"revealjs\"}\n## About us\n\n### Ben Black\n\n::: {layout=\"[0.38, -0.02, 0.60]\" layout-valign=\"center\"}\n![](https://github.com/blenback.png){.picture}\n\n[{{< iconify fa6-solid house-chimney-user >}}\nblenback.github.io](https://blenback.github.io/){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-solid envelope >}}\nbblack\\@ethz.ch](mailto:bblack@ethz.ch){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-brands linkedin >}} Ben\nBlack](https://www.linkedin.com/in/ben-black-9889a1150/){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-brands github >}}\n\\@blenback](https://github.com/blenback/){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-brands researchgate >}} \\Benjamin\nBlack](https://www.researchgate.net/profile/Benjamin-Black-5/){style=\"text-decoration: none;\"}<br>\n[{{< iconify simple-icons x >}}\n\\@Blen_Back](https://twitter.com/Blen_Back/){style=\"text-decoration: none;\"}<br>\n:::\n\n## About us\n\n### Nivedita Harisena\n\n## About us\n\n### Manuel Kurmann\n\n## What is reproducible research?\n\nLet's hear your thoughts: What does reproducible research mean to you?\n\n::: {.img style=\"text-align:center;\"}\n![](assets\\images\\what_is_reproducible_qr_code.png){fig-align=\"center\"}\n\n<https://www.menti.com/alsw49tprwu7>\n:::\n\n##  {background-iframe=\"https://www.mentimeter.com/app/presentation/alqogxibw u94raf69893wn32c8it8mcy/embed\"}\n\n## The FAIR standard\n\n-   **Findability, Accessibility, Interoperability, and\n    Reusability** (FAIR).\n\n-   Developed by diverse stakeholders (academia, industry, funders,\n    publishers).\n\n-   Addressed the need for infrastructure supporting data reuse.\n\n-   Emphasis on both human and machine readability.\n\n[@wilkinson2016]\n\n## Why strive for reproducible research?\n\n<!-- Use Mentimeter to take audience suggestions-->\n\n## Why strive for reproducible research?\n\n-   Replication crisis: Allows our work to be verified more thoroughly\n-   Improves science for all: Allows others to more easily build upon\n    our work\n\nDon't just take our word for it, research funders are increasingly\nfocused on reproducible research too: EXAMPLE\n\n## Why {{< iconify fa-brands r-project >}} for reproducible research?\n\n-   Open source\n-   Large active user community for support\n-   Packages to suit just about every research need: statistics,\n    modelling, spatial analysis, visualisation (Many packages developed\n    by academics)\n\nBUT just using {{< iconify fa-brands r-project >}} doesn't necessarily\nmake your research reproducible...\n\nWe have put together this workshop to share some advice for best\npractice and tips that we have picked up along the way.\n\n## Workshop concept\n\n![](assets/images/graphical_abstract_dark.png){width=\"70%\"}\n:::\n\n\n\n# Research projects with R {#sec-Rprojects}\n\n\n\n---\nbibliography: references.bib\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n**Let's start with a definition of what makes a good R project from Jenny Bryan:**\n\nA good R project... *\"creates everything it needs, in its own workspace or folder, and it touches nothing it did not create.\"* [@bryan2017]\n\nThis is a good definition that contains concepts, such as the notion that projects should be 'self-contained'. However we add one more caveat to this definition which is that a good R project should *explain itself*.\n\nFor the purpose of this workshop we will approach this topic by splitting it up into 6 topics which are highlighted in this graphic:\n\n![Graphical overview of components of a good research project in R](assets/images/project_components.png)\n\nAs you move through these you will see that there are areas of overlap and complementarity between them. These topics are also central to the choice of approaches in the [three workflows for reproducibility](@sec-workflows) that we will share.\n\n## <img src=\"assets/images/Rstudio.light.svg\" style=\"vertical-align:middle; height:1.5em;\"/> projects {#sec-projects}\n\nHow many times have you opened an R script and been greeted by this line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/ben/path/that/only/I/have\")\n```\n:::\n\n\nWhile it is well-intentioned (i.e. avoiding the need to have full paths for all objects that will subsequently be loaded or daved ) the problem with it is obvious: This specific path is only relevant for the author and not other potential users and even for the author it will be invalid if they happen to change computers. The good news is there is a very simple way to avoid having to use `setwd()` at all by using [**Rstudio Projects**]().\n\nRstudio projects designate new or existing folders as a defined working directory by creating an `.RProj` file within them. This means that when you open a project the working directory of the Rstudio session will automatically be set to the directory that the .RProj file is located in and the paths of all files in this folder will be relative to this.\n\nThe `.Rproj` file can be shared along with the rest of the research project files meaning that others users can easily open the Project to have the same working directory removing the need for those troublesome `setwd()` lines.\n\n### Creating and opening projects {#sec-creating-projects}\n\nCreating an Rstudio project is as simple as using *File \\> New Project* in the top left and then choosing between creating the Project in a new or existing directory.\n\nThere are several ways to open a Project:\n\n1.  Using *File \\> Open Project* in the top left of Rstudio.\n\n![](assets/images/File_open_project.png){fig-align=\"center\" width=\"50%\"}\n\n2.  Using the drop down menu in the top-right of the Rstudio session.\n\n![](assets/images/Open_project_right.png){fig-align=\"center\" width=\"50%\"}\n\n3.  Outside of R by double clicking on the `.Rproj` file in the folder.\n\n![](assets/images/Open_project_explorer.png){fig-align=\"center\" width=\"50%\"}\n\n### Utilising project specific `.Rprofile`'s {#sec-rprofile}\n\nAnother useful feature of Rstudio projects is the ability to store project-specific settings using the `.Rprofile` file which controls the initialisation behaviour of the R session when the project is opened. A useful application of this for reproducible research projects is automatically open a particular script, for example a master script that runs all the code in the project (which is a concept that will discussed under [workflow decomposition](@sec-workflow-decomposition)).\n\nTo do this the contents of your `.Rprofile` file would like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    # Open the script specificed by the path\n    rstudioapi::navigateToFile('scripts/script_to_open.R', line = -1L, column = -1L)\n}, action = \"append\")\n```\n:::\n\n\nThe easiest way to create and edit `.Rprofile` files is to use the functions from the package [`usethis`](https://usethis.r-lib.org/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note the use of scope = \"project\" to create a project specific .Rprofile\nusethis::edit_r_profile(scope = \"project\")\n```\n:::\n\n\n## Environment management {#sec-environment-management}\n\nThese lines of code are also probably familiar from the beginning of many an R script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\nBut what is wrong with these lines?\n\nWell firstly, there is no indication of what version of the package is to be installed and hence if the code installing this package is old it may not work with the most recent version of the package (This is less of a problem for well established packages like the Tidyverse but for less common packages, that may see large changes between versions, it could be substantial).\n\nSecondly, having the user install an unspecified version of a package could also cause dependency conflicts with other packages required by the code. This is because almost all packages have some form of dependency (i.e. they use the functionality of) on other packages. This is shown aptly by the image below which, while out-dated now, showed that in 2014 to install the 7 most popular R packages at the time would actually install 63 packages in total when considering their dependencies.\n\n![Package dependencies of popular R package [@devries2014]](assets/images/package_dependencies_2.png){width=\"50%\" fig-align=\"center\"}\n\nHowever the problem is bigger than just packages because when your code runs it is also utilising:\n\n-   A specific version of R\n\n-   A specific operating system\n\n-   Specific versions of system dependencies, i.e. other software in other languages that R packages themselves utilise e.g GDAL for spatial analysis packages like `terra`.\n\nAll of these things together make up what is known as the 'environment' of your code. Hence the process of documenting and managing this environment to is ensure that your code is reproducible (i.e. it not only runs but also consistently produces the same results).\n\nThere are different approaches to environment management that differ in their complexity and hence maybe suited to some projects and not others. For the purpose of this workshop we will focus on what we have found is one of the most user-friendly ways to manage your *package environment* (caveat that will be discussed) in R which is the package `renv`. Below we will introduce this package in more detail as it will form a central part of the [three workflows for reproducibility](@sec-workflows) that we present.\n\n### Creating reproducible environments with `renv`\n\nAs mentioned above [`renv`](https://rstudio.github.io/renv/articles/renv.html) is an R package that helps you create reproducible environments for your R projects by not only documenting your package environment but also providing functionality to re-create it.\n\nIt does this by creating **project specific libraries** (i.e. directories: `renv/library`) which contain all the packages used by your project. This is different from the default approach to package usage and installation whereby all packages are stored in a single library on your machine (system library). Having separate project libraries means \"that different projects can use different versions of packages and installing, updating, or removing packages in one project doesn't affect any other project.\" [@renv]. In order to make sure that your project uses the project library everytime it is opened `renv` utilises the functionality of [`.Rprofile's`](@sec-rprofile) to set the project library as the default library.\n\nAnother key process of renv is to create project specific **lockfiles** (`renv.lock`) which contain sufficient metadata about each package in the project library so that it can be re-installed on a new machine.\n\nAs alluded to, renv does a great job of managing your packages but is not intended to manage other aspects of your environment such as: tracking your version of R or your operating system. This is why if you want 'bullet-proof' reproducibility renv needs to be used alongside other approaches such as containerization which is the [3rd and most complex workflow](@sec-docker_workflow) we will discuss.\n\n## Writing clean code {#sec-writing-clean-code}\n\nThe notion of writing 'clean' code can be daunting, especially for those new to programming. However, the most important thing to bear in mind is that there is no objective measure that makes code 'clean' vs. 'un-clean', rather we should of think 'clean' coding as the pursuit of making your code easier to read, understand and maintain. Also while we should aspire to writing clean code, it is arguably more important that it functions correctly and efficiently.\n\nThe central concept of clean coding is that, like normal writing, we should follow a set of rules and conventions. For example, in English a sentence should start with a capital letter and end with a full stop. Unfortunately, in terms of writing R code there is not a single set of conventions that everyone proscribes to, instead there are numerous styles that have been outlined and the important thing is to choose a style and apply it consistently in your coding.\n\nPerhaps the two most common styles are the [Tidyverse style](https://style.tidyverse.org/) and the [Google R style](https://google.github.io/styleguide/Rguide.html) (Which is actually a derivative of the former). Neither style can be said to be the more correct, rather they express opinionated preferences on a series of common topics such as: Object naming, use of assignment operators, spacing, indentation, line length, parentheses placement, etc.\n\nRather than detail all of these topics here we will focus on just on some related tips that we think are most relevant for scientific research coding, including how to automate the formatting of your code to a particular style. However, we encourage you to go through the different style guides when you have the time.\n\n### Script headers {#sec-script_headers}\n\nStarting your scripts with a consistent header containing information about it's purpose, author/s, creation and modification dates is a great step making your workflow more understandable and hopefully reproducible. There are no rules as to what such a header should look like but this is the style I like to use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Script_title: Brief description of script purpose\n##\n## Notes: More detailed notes about the script and it's purpose\n##\n## Date created: \n## Author(s):\n#############################################################################\n```\n:::\n\n\nTo save time inserting this header into new scripts you use Rstudio's [**Code snippets**](https://docs.posit.co/ide/user/ide/guide/productivity/snippets.html) feature. Code snippets are simply text macros that quickly insert a section of code using a short keyword.\n\nTo create your own Code snippet go to *Tools \\> Global Options \\> Code \\> Edit Snippets* and then add a new snippet with your code below it:\n\n![](assets/images/Code_snippet_add.png){fig-align=\"center\" width=\"50%\"}\n\nTo use a code snippet simply start typing the keyword in the script and the auto-completion list will appear then press `Tab` and the code section will be inserted:\n\n![](assets/images/Code_snippet_completion.png){fig-align=\"center\" width=\"50%\"}\n\n### Code sections {#sec-code_sections}\n\nAs you may already know braced (`{}`) sections of code (i.e. function definitions, conditional blocks, etc.) can be folded to hide their contents in RStudio by clicking on the small triangle in the left margin.\n\n![](assets/images/code_section_sequential.png){fig-align=\"center\" width=\"50%\"}\n\nHowever, an often overlooked feature is the ability to create named code sections that can be also folded, as well as easily navigated between. These can be used to break longer scripts into a set of discrete regions according to specific parts of the analysis ([discussed in more detail later](@sec-workflow-decomposition)). In this regard, another good tip is to give the resulting sections sequential alphabetical or numerical Pre-fixes. Code sections are created by inserting a comment line that contains at least four trailing dashes (`-`), equal signs (`=`), or pound signs (`#`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Section One ---------------------------------\n \n# Section Two =================================\n \n# Section Three #############################\n```\n:::\n\n\nAlternatively you can use the *Code \\> Insert Section* command.\n\nTo navigate between code sections:\n\n-   Use the **Jump To** menu available at the bottom of the editor[@positsupport2024]\n\n![](assets/images/code_section_jumpto.png){fig-align=\"center\"}\n\n-   Use the document outline pane in the top right corner of the source pane\n\n![](assets/images/code_section_documentpane.dark.png){fig-align=\"center\"}\n\n### Automating the styling of your code\n\nThere are two R packages that are very helpful in terms of ensuring your code confirms to a consistent style: [`lintr`](https://lintr.r-lib.org/) and [`styler`](https://styler.r-lib.org/).\n\n-   `lintr` checks your code for common style issues and potential programming errors then presents them to you to correct, think of it like doing a 'spellcheck' on a written document.\n-   `styler` is more *active* in the sense that it automatically format's your code to a particular style, the default of which is the tidyverse style.\n\nTo use lintr and styler you call their functions like any package but styler can also be used through the **Rstudio Addins** menu below the Navigation bar as shown in this gif:\n\n<img src=\"https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif\" width=\"50%\"/>\n\nAnother very useful feature of both packages is that they can be used as part of a continuous integration (CI) workflow using a version control application like Git. This is a topic that we will cover as part of our [Version control with Git](@sec-git_workflow) workflow but what it means is that the styler and lintr functions are run automatically when you push your code to a remote repository.\n\n## Workflow decomposition {#sec-workflow-decomposition}\n\nIn computer sciences workflow decomposition refers to the structuring or compartmentalising of your code into seperate logical parts that makes it easier to maintain [@decompos2024].\n\nIn terms of coding scientific research projects many of us probably already instinctively do decomposition to some degree by splitting typical processes such as data preparation, statistical modelling, analysis of results and producing final visualizations.\n\nHowever this is not always realized in the most understandable way, for example we may have seperate scripts with logical sounding names like: `Data_prep.R` and `Data_analysis.R` but can others really be expected to know exactly which order these must be run in, or indeed whether they even need to be run sequentially at all?\n\nA good 1st step to remedying this is to give your scripts sequential numeric tags in their names, e.g. `01_Data_prep.R`, `02_Data_analysis.R`. This will also ensure that they are presented in numerical order when placed in a designated directory [Structuring your project directory](@sec-structuring) and can be explicitly described in your [project documentation](@sec-documentation).\n\nBut you can take this to the next level by creating a *Master* script that sources your other scripts in sequence (think of them as *sub-scripts*) so that users of your code need only run one script. To do this is as simple as creating the master script as you would any normal R script (*File \\> New File \\> R script*) and then using the `base::source()` function to run the sub-scripts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Master_script: Run steps of research project in order\n##\n## Date created: 30/7/2024\n## Author(s): Jane Doe\n#############################################################################\n\n### =========================================================================\n### A- Prepare dependent variable data\n### =========================================================================\n\n#Prepare LULC data\nsource(\"Scripts/Preparation/Dep_var_dat_prep.R\", local = scripting_env)\n\n### =========================================================================\n### B- Prepare independent variable data\n### =========================================================================\n\n#Prepare predictor data\nsource(\"Scripts/Preparation/Ind_var_data_prep.R\", local = scripting_env)\n\n### =========================================================================\n### C- Perform statisical modelling\n### =========================================================================\n\nsource(\"Scripts/Modelling/Fit_stat_models.R\", local = scripting_env)\n```\n:::\n\n\nAs you can see in this example code I have also made use of a [script header](@sec-script_headers) and [code sections](@sec-code_sections), that were previously discussed, to make the division of sub-processes even clearer. Another advantage of this approach is that all sub-scripts can utilise the same environment (defined by the `source(local= )` argument) which means that each individual script does not need to load packages or paths as objects.\n\nFinally, within your sub-scripts processes should also be seperated into code sections and ideally any repetitive tasks should be performed with custom functions which again are contained within their own files.\n\nFollowing this approach you end up with a workflow that will look something like this:\n\n![](assets/images/workflow_decomposition.png){width=\"100%\"}\n\nThe benefit of this hierarchical approach to structuring is that it is not only easier to debug and maintain individual processes but it is also more amenable to adding new processes.\n\n## Structuring your project directory {#sec-structuring}\n\nSimilar to having clean code, having a clean project directory that has well-organised sub-directories goes a long way towards making your projects code easier to understand for others. For software development there are numerous sets of conventions for directories structures although these are not always so applicable for scientific research projects. However we can borrow some basic principles, try to use: - Use logical naming - Stick to a consistent style, i.e. use of captialisation and seperators - Make use of nested sub-directories e.g `data/raw/climatic/precipitation/2020/precip_2020.rds` vs. `data/precip_2020_raw.rds`. This is very helpful when it comes to programatically constructing file paths especially in projects with a lot of data.\n\nAs an example my go-to project directory structure looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n└── my_project\n    ├── data # The research data\n    │   ├── raw\n    │   └── processed\n    ├── output # Storing results\n    ├── publication # Containing the academic manuscript of the project\n    ├── src # For all files that perform operations in the project\n    │   ├── scripts\n    │   └── functions\n    └── tools # Auxilliary files and settings\n```\n:::\n\n\nRather than manually create this directory structure everytime you start a new project, save yourself some time and automate it by using Rstudio's [**Project Templates**](https://docs.posit.co/ide/user/ide/guide/productivity/project-templates.html) functionality. This allows you to select a custom template as an option when creating a new [Rstudio project](@sec-creating-projects) through the New project wizard (*File \\> New Project \\> New Directory \\> New Project Template*).\n\nTo implement this even as an intermediate R user is fairly labor intensive as your custom project directory template needs to be contained within an R-package, in order to be available in the wizard. However, quite a few templates with directory structures appropriate for scientific research projects have been created by others:\n\n-   [`rrtools`](https://github.com/benmarwick/rrtools)\n\n-   [`ProjectTemplate`](http://projecttemplate.net/)\n\n-   [`template`](https://pakillo.github.io/template/)\n\n-   [`addinit`](https://dreamrs.github.io/addinit/) (Not a template but an interactive shiny add-in for project creation)\n\n## Project documentation {#sec-documentation}\n\nAs an example of why documentation is important think about if you bought a new table from Ikea only to excitedly rip open the box and find that there are no instructions for how to assemble it. Sure, you know what a table is supposedly to look like and given enough time you will end up with something that will probably be mostly right but maybe it's missing small details. Also it will probably take you just as long to take it apart in 5 years time. Well, working with undocumented code for research projects is similar except a lot more complicated!\n\nWriting comprehensive documentation that covers all aspects of our projects is time-consuming which is why it is often neglected. For example, there are a lot of different metadata conventions that exist that you could apply. However, learning and adhering strictly to these can be overwhelming and possibly lead to the opposite effect i.e. they are not simple for others to understand either.\n\nIn response to this there has been a movement in the R research community to adopt the *research as package* approach, which, as the name suggests, involves creating your project as an R-package which has a strict set of conventions for documentation [@marwick2018]. This is a viable approach for those who are familiar with R-packages but is arguably not the best for all projects and users.\n\nInstead, we would suggest to follow the maxim of *not letting the perfect be the enemy of the good* and to focus on these key areas:\n\n-   **Provide adequate in-script commentary**: This is perhaps contentious for those from a software development community, but given the choice I would rather have to read through a script with too many comments than one with too few. However remember that comments should be used to explain the purpose of the code, not what the code is doing. In line with this use [script headers](@sec-script_headers).\n\n-   **Document your functions with `roxygen` skeletons**:\n\n-   **Include a `README` file**: README files are where you should document your project at the macro-level i.e. what it is about and how it is supposed to work.\n\nThe latter of these two are more detailed so we have provided further information and tips in sections below.\n\n### Function documentation with `roxygen2` {#sec-roxygen}\n\nBase R provides a standard way of documenting a package where each function is documented in an `.Rd` file (R documentation). This documentation uses a custom syntax to detail key aspects of the functions such as their input parameters, outputs and any package dependencies [@wickham2024].\n\nIn the case of many research projects you will not be creating a package however it is still useful to apply this documentation style to your functions as it is a good way to make them understandable and easier to modify by others. For example, having clear information about the object (e.g. a vector or data.frame) that a function accepts, saves others time in guessing what the function is expecting if they are trying to use new data.\n\nHowever, rather than manually writing `.Rd` files, we can use the `roxygen2` package to automatically generate these files from a block of comments that are added to the top of the function scripts. To add this comment block, place your cursor inside a function you want to document and press `Ctrl + Shift + R` (or `Cmd + Shift + R` on Mac) or you can go to *code tools \\> insert roxygen skeleton* (code tools is represented by the wand icon in the top row of the source pane). As you can see in this gif below, when you insert the roxygen block it will already contain the names of the function, its arguments and any returns. You can then fill in the rest of the information, such as the description and dependencies etc. for a guide to these other fields see the [roxygen2 documentation](https://roxygen2.r-lib.org/articles/rd.html).\n\n![Inserting roxygen block](https://jozef.io/img/r102-01-add-roxy-skeleton.gif){width=\"50%\"}\n\n### Tips for README writing\n\nIf you look at the source code of R packages or projects that use R in Github repositories you will see that they all contain `README.md` files. `.md` is [Markdown](https://en.wikipedia.org/wiki/Markdown) format which is the most common format for README files in R projects because it can be read by many programs and rendered in a variety of formats. These files are often accompanied by the corresponding file `README.Rmd` which generates the `README.md` file. In this sense writing the README for your project in markdown makes sense and there tools available to help you do this such as the `usethis` package which has a function [`use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) that will create a `README.Rmd` file for you. However, depending on who you anticipate using your project you may also want to create your README as a raw text file (`.txt`) which may be a more familiar format for some users and again can be opened by many different programs.\n\nAgain there is not a single standardised format for what should be included in your README file but here is an example of a README file that was written for one of the authors code/data upload alongside a publication: [README.txt](assets/README_demo.txt)\n\nYou will see that one of the things this README includes is a tree diagram which shows the directory structure of the project right down to the file level. This is a useful way to give an overview of what users should find included in the project and then explanatory notes can be added to explain the purpose of each file or directory. Such a diagram can be easily generated using the `fs` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"fs\")\nlibrary(fs)\n\n#vector path of the target directory to make a file tree from\nTarget_dir <- \"YOUR DIR\"\n\n#produce tree diagram of directory sub-dirs and files and save output using capture.ouput from base R utils.\ncapture.output(dir_tree(Target_dir), file= 'Dir_tree_output.txt')\n```\n:::\n\n:::\n\n<!-- Presentation content -->\n\n::: {.content-visible when-format=\"revealjs\"}\n## Research projects with R\n\n::: r-fit-text\n**Jenny Bryan:** A good R project... *\"creates everything it needs, in its own workspace or folder, and it touches nothing it did not create.\"* [@bryan2017]\n\n-   Projects should be 'self-contained'\n-   Additional caveat: a good R project should *explain itself*.\n:::\n\n## Research projects with R\n\n![Graphical overview of components of a good research project in R](assets/images/project_components.png)\n\n::: notes\n-   We will approach this topic by splitting it up into 6 topics which are highlighted in this graphic.\n-   As we move through the 6 topics you will see that there are areas of overlap and complementarity between them.\n-   These topics are also central to the choice of approaches in the three workflows for reproducibility that we will share.\n:::\n\n## 1. Rstudio projects\n\n::: r-fit-text\nRecognise this?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/ben/path/that/only/I/have\")\n```\n:::\n\n\nBut what's the problem with it?\n\n::: incremental\n-   This path is only relevant for the author and not other users.\n-   Even for the author it will be invalid if they change computers.\n:::\n:::\n\n## 1. Rstudio projects\n\n**Stay away from `setwd()!`**\n\n**Use [Rstudio Projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)**:\n\n-   Designates new or existing folders as working directory creating an `.RProj` file within them.\n\n-   When you open a project the working directory will automatically be set and all paths will be relative to this.\n\n-   The `.Rproj` can be shared along with the rest of the research project, users can easily open the project to have the same working directory.\n\n## 1. Rstudio projects\n\n### Creating projects\n\nGo to *File \\> New Project*, can be created in a new or existing directory\n\n![](assets/images/create_project.png){fig-align=\"center\"}\n\n## 1. Rstudio projects\n\n### Opening projects\n\nUsing *File \\> Open Project* in the top left of Rstudio.\n\n![](assets/images/File_open_project.png){fig-align=\"center\"}\n\n## 1. Rstudio projects\n\n### Opening projects\n\nUsing the drop down menu in the top-right of the Rstudio session.\n\n![](assets/images/Open_project_right.png){fig-align=\"center\"}\n\n## 1. Rstudio projects\n\n### Opening projects\n\nOutside of R by double clicking on the `.Rproj` file in the folder.\n\n![](assets/images/Open_project_explorer.png){fig-align=\"center\"}\n\n## 1. Rstudio projects\n\n### Utilising project specific `.Rprofile`'s\n\n-   Rstudio projects can store project-specific settings using the `.Rprofile` file.\n\n-   File is run every time the project is opened, can be used to perform actions such as opening a particular script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    # Open the script specificed by the path\n    rstudioapi::navigateToFile('scripts/script_to_open.R', line = -1L, column = -1L)\n}, action = \"append\")\n```\n:::\n\n\n## 1. Rstudio projects\n\n### Utilising project specific `.Rprofile`'s\n\nThe easiest way to create and edit `.Rprofile` files is to use the functions from the package [`usethis`](https://usethis.r-lib.org/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note the use of scope = \"project\" to create a project specific .Rprofile\nusethis::edit_r_profile(scope = \"project\")\n```\n:::\n\n\n## 2. Environment management\n\nFamiliar lines from the beginning of many an R script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\nAgain, what is wrong?\n\n## 2. Environment management\n\n::: {.column width=\"50%\"}\n**No indication of version of package to be installed =**\n\n-   Potential for to break code\n\n-   Introduce dependency conflicts\n:::\n\n::: {.column width=\"50%\"}\n![Package dependencies of popular R package [@devries2014]](assets/images/package_dependencies_2.png){width=\"80%\" fig-align=\"center\"}\n:::\n\n::: notes\nNo indication of what version of package is to be installed and hence if the code installing this package is old it may not work with the most recent version of the package (This is less of a problem for well established packages like the Tidyverse but for less common packages, that may see large changes between versions, it could be substantial).\n\nSecondly, having the user install an unspecified version of a package could also cause dependency conflicts with other packages required by the code. This is because almost all packages have some form of dependency (i.e. they use the functionality of) on other packages.\n\nThis is shown aptly by the image below which, while out-dated now, showed that in 2014 to install the 7 most popular R packages at the time would actually install 63 packages in total when considering their dependencies.\n:::\n\n## 2. Environment management\n\n**But the problem is bigger than just packages...**\n\nWhen your code runs it is also utilizing:\n\n-   A specific version of R\n\n-   A specific operating system\n\n-   Specific versions of system dependencies, i.e. other software that R packages utilise.\n\nCollectively, these are the **Environment** of your code, documenting and managing this is essential ensure reproducibilty\n\n## 2. Environment management\n\n**But how to manage your environment?**\n\n-   Different approaches that range in complexity hence maybe suited to some projects and not others.\n\n-   Most user-friendly way to manage your *package environment* (caveat to be discussed) in R: `renv` package.\n\n::: notes\nrenv will form a central part of the three workflows for reproducibility that we will present later.\n:::\n\n## 2. Environment management\n\n### Creating reproducible environments with `renv`\n\n[`renv`](https://rstudio.github.io/renv/articles/renv.html) helps you create reproducible environments for your R projects by:\n\n-   Documenting your package environment\n\n-   Providing functionality to re-create it.\n\n## 2. Environment management\n\n### Creating reproducible environments with `renv`\n\n-   Normally all your R packages are stored in a single library on your machine (system library).\n-   `renv` creates a project specific libraries of packages (`renv/library`) which contain all the packages used by your project.\n-   `renv` also creates project specific **lockfiles** (`renv.lock`) which contain sufficient metadata so that the project library can be re-installed on a new machine.\n\n**Result**: Different projects can use different versions of packages and installing, updating, or removing packages in one project doesn't affect any other project.\n\n## 2. Environment management\n\n### `renv` limitation\n\n`renv` is not intended to manage **other aspects of your environment** such as: tracking your version of R or your operating system.\n\nThis is why if you want 'bullet-proof' reproducibility `renv` needs to be used alongside other approaches such as containerization.\n\n## 3. Writing clean code\n\n-   There is no objective measure that makes code 'clean' vs. 'un-clean'.\n\n-   Think of 'clean coding' as the pursuit of making your code easier to **read, understand and maintain**.\n\n![](assets/images/clean_code_meme.png){fig-align=\"center\"}\n\n## 3. Writing clean code\n\n### Code styles\n\n-   Like writing, code should follow a set of rules and conventions. For example, in English, a sentence starts with a capital letter and ends with a full stop.\n\n-   For R code there is not a single set of conventions instead there are numerous styles. Two most common are the [Tidyverse style](https://style.tidyverse.org/) and the [Google R style](https://google.github.io/styleguide/Rguide.html).\n\n**Most important: Choose a style and apply it consistently in your coding.**\n\n## 3. Writing clean code\n\n### Code styles\n\nCode styles express opinionated preferences on a series of common topics:\n\n-   Object naming\n\n-   Use of assignment operators\n\n-   Spacing\n\n-   Indentation\n\n-   Line length\n\n-   Parentheses placement\n\nWe won't discuss in detail but you should read one of the style guides when you have the time.\n\n::: notes\nCode styles express opinionated preferences on a series of common topics such as: Object naming, use of assignment operators, spacing, indentation, line length, parentheses placement, etc.\n\nRather than detail all of these topics here we will focus on just on some related tips that we think are most relevant for scientific research coding, including how to automate the formatting of your code to a particular style. However, we encourage you to go through the different style guides when you have the time.\n:::\n\n## 3. Writing clean code\n\n### Automating the styling of your code\n\nTwo R packages for code styling, [`lintr`](https://lintr.r-lib.org/) and `styler`:\n\n-   `lintr` checks your code for style issues and potential programming errors then presents them to you to correct, like doing a 'spellcheck' on a written document.\n-   `styler` automatically format's your code to a particular style, the default of which is the tidyverse style.\n\n## 3. Writing clean code\n\n### Automating the styling of your code\n\n-   To use `lintr` and `styler` call their functions like any package\n\n-   `styler` can also be used through the **Rstudio Addins** menu below the Navigation bar: <img src=\"https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif\" style=\"display: block; margin-left: auto; margin-right: auto;\"/>\n\n-   Both packages can be used as part of a continuous integration (CI) workflow with Github, meaning that their functions can be run automatically when you update your code.\n\n## 3. Writing clean code\n\n### Script headers\n\n-   Starting your scripts with a consistent header containing information about it's purpose, author/s, creation and modification dates is very helpful!\n\n-   There are no rules as to what this should look like but this is an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Script_title: Brief description of script purpose\n##\n## Notes: More detailed notes about the script and it's purpose\n##\n## Date created: \n## Author(s):\n#############################################################################\n```\n:::\n\n\n## 3. Writing clean code\n\n### Script headers\n\n::: {.column width=\"60%\"}\n-   To save time inserting your script header use Rstudio's [**Code snippets**](https://docs.posit.co/ide/user/ide/guide/productivity/snippets.html) feature.\n\n-   Code snippets are text macros that insert a section of code using a keyword.\n\n-   To create your own Code snippet go to *Tools \\> Global Options \\> Code \\> Edit Snippets* and then add a new snippet with your code below it\n:::\n\n::: {.column width=\"40%\"}\n![](assets/images/Code_snippet_add.png){fig-align=\"center\"}\n:::\n\n## 3. Writing clean code\n\n### Script headers\n\nTo use a code snippet simply start typing the keyword in the script and the auto-completion list will appear then press `Tab` and the code section will be inserted:\n\n![](assets/images/Code_snippet_completion.png){fig-align=\"center\" width=\"50%\"}\n\n## 3. Writing clean code\n\n### Code sections\n\n-   Braced (`{}`) sections of code (i.e. function definitions, conditional blocks, etc.) can be folded to hide their contents by clicking on the small triangle in the left margin:\n\n![](assets/images/code_section_sequential.png){fig-align=\"center\" width=\"50%\"}\n\n-   But you can also create custom named **code sections** to break longer scripts according to specific parts of the analysis.\n\n## 3. Writing clean code\n\n### Code sections\n\n-   Code sections are created by inserting a comment line that contains at least four trailing dashes (`-`), equal signs (`=`), or pound signs (`#`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Section One ---------------------------------\n \n# Section Two =================================\n \n# Section Three #############################\n```\n:::\n\n\n-   Alternatively you can use the *Code \\> Insert Section* command.\n\n## 3. Writing clean code\n\n### Code sections\n\nTo navigate between code sections:\n\n-   Use the **Jump To** menu available at the bottom of the editor[@positsupport2024]\n\n![](assets/images/code_section_jumpto.png){fig-align=\"center\"}\n\n## 3. Writing clean code\n\n### Code sections\n\nTo navigate between code sections:\n\n-   Use the **document outline pane** in the top right corner of the source pane\n\n![](assets/images/code_section_documentpane.dark.png){fig-align=\"center\"}\n\n## 4. Workflow decomposition\n\n-   Workflow decomposition is the structuring or compartmentalising of code into seperate logical parts that makes it easier to maintain [@decompos2024].\n\n-   You probably already instinctively do decomposition by splitting typical processes such as:\n\n    -   Data preparation\n    -   Statistical modelling\n    -   Analysis of results\n    -   Producing final visualizations\n\n-   This oftens leads to scripts with logical sounding names like: `Data_prep.R` and `Data_analysis.R` but can others be expected to know which order these must be run in?\n\n## 4. Workflow decomposition\n\n**Solutions:**\n\n-   **1st step**: Give your scripts sequential numeric tags in their names, e.g. `01_Data_prep.R`, `02_Data_analysis.R` ensuring that they are presented in numerical order in their designated directory.\n\n-   **Next level**: Create a *Master* script that sources your other scripts in sequence (think of them as *sub-scripts*) so that users need only run one script.\n\n## 4. Workflow decomposition\n\n-   To do this create the master script as you would any normal R script (*File \\> New File \\> R script*) and then use the `base::source()` function to run the sub-scripts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Master_script: Run steps of research project in order\n#############################################################################\n\n#Prepare LULC data\nsource(\"Scripts/Preparation/Dep_var_dat_prep.R\", local = scripting_env)\n\n#Prepare predictor data\nsource(\"Scripts/Preparation/Ind_var_data_prep.R\", local = scripting_env)\n```\n:::\n\n\n-   Another advantage of this approach is that all sub-scripts can utilise the same environment (defined by the `source(local= )` argument).\n\n## 4. Workflow decomposition\n\n-   Within your sub-scripts processes should also be seperated into code sections and any repetitive tasks should be performed with custom functions.\n\n-   Following this approach you end up with a workflow that will look something like this:\n\n![](assets/images/workflow_decomposition.png){fig-align=\"center\"}\n\n::: notes\nThe benefit of this hierarchical approach to structuring is that it is not only easier to debug and maintain individual processes but it is also more amenable to adding new processes.\n:::\n\n## 5. Structuring your project directory\n\n-   A clean project directory that has well-organised sub-directories makes your projects code easier to understand for others.\n\n-   Try to use:\n\n    -   Logical naming\n    -   A consistent style (i.e. use of captialisation and seperators).\n    -   Nested sub-directories e.g `data/raw/climatic/precipitation/2020/precip_2020.rds` vs. `data/precip_2020_raw.rds` (helpful when it comes to programatically constructing file paths)\n\n## 5. Structuring your project directory\n\nAs an example my go-to project directory structure looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n└── my_project\n    ├── data # The research data\n    │   ├── raw\n    │   └── processed\n    ├── output # Storing results\n    ├── publication # Containing the academic manuscript of the project\n    ├── src # For all files that perform operations in the project\n    │   ├── scripts\n    │   └── functions\n    └── tools # Auxilliary files and settings\n```\n:::\n\n\n## 5. Structuring your project directory\n\n-   Creation of project directory structure can be automated using using Rstudio's [**Project Templates**](https://docs.posit.co/ide/user/ide/guide/productivity/project-templates.html) functionality.\n\n-   Allows selection of custom template when creating a new Rstudio project (*File \\> New Project \\> New Directory \\> New Project Template*).\n\n-   **Warning**: Implementation of personal template is labor intensive as it needs to be contained within an R-package. But several template packages appropriate for scientific research projects are available:\n\n    -   [`rrtools`](https://github.com/benmarwick/rrtools)\n    -   [`ProjectTemplate`](http://projecttemplate.net/)\n    -   [`template`](https://pakillo.github.io/template/)\n    -   [`addinit`](https://dreamrs.github.io/addinit/)\n\n## 6. Project documentation\n\n![[Singer 2024](https://andysinger.com/)](assets/images/documentation_cartoon.jpg){fig-align=\"center\"}\n\n## 6. Project documentation\n\nBut writing comprehensive documentation that covers all aspects of projects is time-consuming...\n\n**Suggested solution in the R research community:** *Research as package* approach (i.e. creating your project as an R-package) [@marwick2018].\n\n**Pro**: R-packages have an existing strict set of conventions for documentation\n\n**Cons**:\n\n-   Learning curve for those unfamiliar with R-packages\n\n-   May not be appropriate for all project requirements.\n\n## 6. Project documentation\n\nOur advice: *don't let the perfect be the enemy of the good* and focus on these key areas:\n\n-   **Provide adequate in-script commentary**: Remember that comments should be used to explain the purpose of the code, not what the code is doing\n\n-   **Document your functions with `roxygen` skeletons**\n\n-   **Include a `README` file**: README files are where you should document your project at the macro-level i.e. what it is about and how it is supposed to work.\n\n::: notes\nThe latter of these two are more detailed so we have provided further information and tips in sections below.\n:::\n\n## 6. Project documentation\n\n### Function documentation with `roxygen2`\n\n-   `base` R provides a standard way of documenting  functions in packages as seperate `.Rd`  (R documentation) files.\n\n- `.Rd` files use a custom syntax to detail key aspects of the functions such as input parameters, outputs, package dependencies [@wickham2024].\n\n- Documenting functions in this way is a good practice for your project even if you are not creating a package. \n\n::: notes\nIn the case of many research projects you will not be creating a package however it is still useful to apply this documentation style to your functions as it is a good way to make them understandable and easier to modify by others. For example, having clear information about the object (e.g. a vector or data.frame) that a function accepts, saves others time in guessing what the function is expecting if they are trying to use new data.\n:::\n\n## 6. Project documentation\n\n### Function documentation with `roxygen2`\n\n- Rather than manually create `.Rd` files, we can use the `roxygen2` package.\n\n- `roxygen2` provides functionality to add blocks of comments (`roxygen skeleton`) to the top of the function scripts. These are then used to automatically generate `.Rd` files.\n\n- To add a `roxygen skeleton`, place your cursor inside a function you want to document and press `Ctrl + Shift + R` (or `Cmd + Shift + R` on Mac) or you can go to *code tools \\> insert roxygen skeleton* (wand icon in the top row of the source pane).\n\n::: notes\nHowever, rather than manually writing `.Rd` files, we can use the `roxygen2` package to automatically generate these files from a block of comments that are added to the top of the function scripts. To add this comment block, place your cursor inside a function you want to document and press `Ctrl + Shift + R` (or `Cmd + Shift + R` on Mac) or you can go to *code tools \\> insert roxygen skeleton* (code tools is represented by the wand icon in the top row of the source pane).\n:::\n\n## 6. Project documentation\n\n### Function documentation with `roxygen2\n\n- When you insert the roxygen block it will already contain the names of the function, its arguments and any returns. You can then fill in the rest of the information, such as the description and dependencies etc.\n\n![Inserting roxygen block](https://jozef.io/img/r102-01-add-roxy-skeleton.gif){fig-align=\"center\"}\n\n## 6. Project documentation\n\n### Tips for README writing\n\n- R packages or projects typical have `README.md` files. \n- `.md` is the [Markdown](https://en.wikipedia.org/wiki/Markdown) format which is the most common format for README files in R projects because it can be read by many programs and rendered in a variety of formats.\n- `README.md` files are often accompanied by the corresponding file `README.Rmd`, an Rmarkdown file which generates them. \n- `README.Rmd` files can be created using the `usethis` package ([`use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html)).\n- However, depending on anticipated project users creating the README as a raw text file (`.txt`) may be better.\n\n::: notes\nThese files are often accompanied by the corresponding file `README.Rmd` which generates the `README.md` file. Markdown format is used for README's because it can be read by many programs and rendered in a variety of formats. In this sense writing the README for your project in markdown makes sense and there tools available to help you do this such as the `usethis` package which has a function [`use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) that will create a `README.Rmd` file for you. However, depending on who you anticipate using your project you may also want to create your README as a raw text file (`.txt`) which may be a more familiar format for some users and again can be opened by many different programs.\n:::\n\n## 6. Project documentation\n\n### Tips for README writing\n\n- No single standardised format for what should be included but here is an example of a [README.txt](assets/README_demo.txt) file from one of the authors publications.\n\n- Useful to include a tree diagram of the project directory structure down to the file level: \n\n```{r}{.smaller}\n├── Data\n│   ├── Processed\n│   │   └── RiceFarms_summary.csv\n│   └── Raw\n│       └── RiceFarms.csv\n├── Output\n│   └── Regional_size_summary_bar.png\n└── Scripts\n    ├── 01_data_analysis.R\n    └── 02_data_visualisation.R\n```\n\n\n::: notes\nYou will see that one of the things this README includes is a tree diagram which shows the directory structure of the project right down to the file level. This is a useful way to give an overview of what users should find included in the project and then explanatory notes can be added to explain the purpose of each file or directory. Such a diagram can be easily generated using the `fs` package:\n::: \n\n## 6. Project documentation\n\n### Tips for README writing\n\n- Such a diagram can be easily generated using the `fs` package:\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"fs\")\nlibrary(fs)\n\n#vector path of the target directory to make a file tree from\nTarget_dir <- \"Your_dir\"\n\n#produce tree diagram of directory sub-dirs and files and save output using capture.ouput from base R utils.\ncapture.output(dir_tree(Target_dir), file= 'Dir_tree_output.txt')\n```\n:::\n\n\n## Summary\n\nNow this some of the details of the graphical overview probably make more sense to you:\n\n![](assets/images/project_components.png){fig-align=\"center\"}\n\n**We will implement some of these good practices in our 1st exercise.**\n\n:::\n\n\n\n\n\n# Workflows for Reproducibility {#sec-workflows}\n\nFor this workshop we will outline three different workflows for creating reproducible research projects with R combined with other tools. We have named these workflows as follows:\n\n1.  [<img src=\"assets/images/Rstudio.light.svg\" style=\"vertical-align:middle; height:1em;\"/> to <img src=\"assets/images/Zenodo.dark.svg\" style=\"vertical-align:0%; height:0.85em;\"/> pipeline](#sec-zenodo_workflow)\n\n2.  [Containerization with <img src=\"assets/images/Docker.dark.svg\" style=\"vertical-align:0%; height:1.25em;\"/>](#sec-docker_workflow)\n\n3.  [Version control with <img src=\"assets/images/Github.light.svg\" style=\"vertical-align:0%; height:0.75em;\"/>](#sec-git_workflow)\n\nThese workflows are inter-related in the sense that 2. and 3. build upon elements of the first and indeed the techniques of the latter workflows can also be combined together. The workflows differ in the level of reproducibility they ensure but the trade-off for better reproducibility is increased complexity. As such we would suggest that the most reproducible workflow may not always be the most appropriate to implement dependent on the needs of your research project and the capabilities of the collaborators involved.\n\n\\*\\* TO DO?: Add a table to compare the workflows \\*\\*\n\nOf course, these workflows are by no-means the only way of doing things and indeed we would actively encourage you to expand upon them in developing your own preferred approach.\n\n## <img src=\"assets/images/Rstudio.light.svg\" style=\"vertical-align:middle; height:1.5em;\"/> project to <img src=\"assets/images/Zenodo.dark.svg\" style=\"vertical-align:0%; height:0.85em;\"/> pipeline {#sec-zenodo_workflow}\n\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\neditor: \n  markdown: \n    wrap: 72\nbibliography: references.bib\n---\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\nThe graphic below shows the main steps of this workflow. It starts by\ndeveloping your research project as an Rstudio project following the\n[good practice project guidelines](@sec-Rprojects) we have discussed.\nThen, it uses the `renv` package to manage the project environment so\nthat others can re-create it. Finally, the code, data and environment\nare uploaded to the open-access repository Zenodo, which provides a DOI\nfor your work, ensuring long-term accessibility and reproducibility.\n\n![](assets/images/project_zenodo_workflow.png){.lightbox width=\"70%\" fig-align=\"center\"}\n\nThe `renv` package helps maintain the R environment, allowing others to\nrecreate the environment in which your analysis was conducted. By\ncombining `renv` with Zenodo, you create a comprehensive solution for\nreproducible research. `renv` ensures that the computational environment\nis captured, while Zenodo makes your research outputs accessible and\ncitable, supporting the FAIR principles of findability, accessibility,\ninteroperability, and reusability [@wilkinson2016].\n\nThe next sections provide some additional detail on [environment\nmanagement with renv](@sec-renv_workflow) and some background and\npractical tips on [Zenodo](@sec-zenodo_background). You will have the\nchance to apply this workflow to an example project in the [accompanying\nexercise](@sec-Rproj_zenodo_exercise).\n\n### Environment Management with `renv` {#sec-renv_workflow}\n\n`renv` is a powerful R package designed to help manage project\nenvironments by creating project-specific libraries and lockfiles. As\nmentioned earlier, `renv` captures the exact versions of R packages used\nin a project, storing this information in a renv.lock file. This allows\nusers to recreate the exact package environment when revisiting a\nproject or transferring it to a different machine, ensuring\nreproducibility.\n\nThe `renv` workflow is straightforward:\n\n-   **Initialize `renv` in a project**: `renv` creates a separate\n    library in the project folder, isolating the packages from the\n    system-wide library.\n\n-   **Snapshot dependencies**: `renv` scans the project, identifying\n    which packages are being used and recording their versions in the\n    lockfile.\n\n-   **Restore environments**: Anyone cloning or receiving the project\n    can run `renv::restore()` to install the exact versions of the\n    packages listed in the lockfile from the project library,\n    reproducing the original project package environment.\n\nOne of the core strengths of `renv` is its flexibility. It integrates\nseamlessly with tools like RStudio, allowing easy management of\ndependencies without disrupting existing workflows. This makes it\nparticularly well-suited for ensuring that research projects are\nreproducible across different systems and platforms.\n\nHowever, `renv` does not manage the **entire system environment** (such\nas the version of R itself or external dependencies like system\nlibraries). For complete reproducibility, combining `renv` with\ncontainerization tools (like [Docker](@#sec-docker_workflow)) or publishing outputs (such as code\nor data) via repositories like Zenodo is recommended. The use of\n`renv` allows researchers to easily capture and restore the R\nenvironment, while repositories can ensure the long-term availability of\nthe project’s outputs.\n\n### <img src=\"assets/images/zenodo-blue.svg\" style=\"vertical-align:middle; height:2.75em;\"/> as a research repository {#sec-zenodo_background}\n\n[Zenodo](https://zenodo.org/) is a platform created under the European\nCommission‘s [OpenAIRE project](https://www.openaire.eu/) in partnership\nwith [CERN](https://home.cern/) to publish, archive, and share\nscientific research outputs, including datasets, code, and publications.\n\nOf course there are many other similar research repositories, such as\n[Dryad](https://datadryad.org/stash), [Figshare](https://figshare.com/),\n[Mendeley Data](https://data.mendeley.com/) and\n[OSF](https://osf.io/q5j8g/), but we recommend Zenodo for several\nreasons:\n\n-   **Generous upload size of 50GB (100 files) per record**\n\n-   **Aligns with FAIR and Open Science principles**: The practical\n    features of Zenodo that ensure this are described in it‘s\n    [principles](https://about.zenodo.org/principles/)\n\n-   **Ability to create communities**: [Zenodo\n    Communities](https://help.zenodo.org/docs/communities/about-communities/)\n    are used to group similar records together. This is useful for\n    creating a collection of related research outputs, either for a\n    research group or a large-scale funded project.\n\n-   **Long term preservation with assignment of DOIs:** Each item\n    published on Zenodo is assigned a permanent [*Digital Object\n    Identifier*\n    (DOI)](https://simple.wikipedia.org/wiki/Digital_Object_Identifier),\n    which is a better way than a URL to cite the record in academic\n    writing.\n\n-   **Open source**: This means that Zenodo is not just free to use\n    but you can even see the [code it is built\n    on](https://github.com/zenodo/zenodo-rdm) and contribute to it.\n\n-   **Versioning functionality:** Every record starts with a 1st version\n    and [new versions can be added as research is\n    updated](https://help.zenodo.org/docs/deposit/manage-versions/),\n    while earlier versions remain accessible. This is crucial in\n    scientific research, where updated analyses and data corrections are\n    often necessary, but also transparency around earlier versions of\n    the work should be maintained.\n\n-   **Integration with GitHub:** When a research project (e.g., code) is\n    hosted on [GitHub](@sec-git_workflow), Zenodo can be used to\n    [archive the\n    repository](https://help.zenodo.org/docs/profile/linking-accounts/)\n    upon each new release, creating a snapshot with a DOI. This means\n    that a version of the code can be more easily cited in scientific\n    publications.\n\n-   **Application programming Interface (API) to access records\n    programmatically:** This a useful feature as it allows for\n    interfacing with Zenodo records without using the website and is\n    the backbone of the `zen4R` package that allows for publishing\n    records directly from R which we discuss in more detail below.\n\n### Publishing to Zenodo with `zen4R`\n\nThe [`zen4R`](%3Chttps://cran.r-project.org/web/packages/zen4R) package\n[@blondel2024] provides functions to interact with `Zenodo‘s` API directly\nfrom R. The package allows you to:\n\n-   Retrieve the metadata of, and download, existing `Zenodo` records.\n\n-   Create new records and versions of records, write their metadata and\n    upload files to `Zenodo`.\n\nWe will use `zen4R` to publish the code, data, and environment of our\nexample project to `Zenodo` in the accompanying exercise.\n:::\n\n<!-- Presentation content -->\n\n::: {.content-visible when-format=\"revealjs\"} \n\n## Rstudio project to `Zenodo` pipeline\n\n![](assets/images/project_zenodo_workflow.png){.lightbox width=\"90%\"\nfig-align=\"center\"}\n\n::: notes\nThis visualization introduces the main steps of this workflow. It starts\nby developing your research project as an Rstudio project following the\ngood practice guidelines we have just discussed. Then, it uses the renv\npackage to manage the project environment so that others can re-create\nit. Finally, the code, data and environment are uploaded to the\nopen-access repository `Zenodo`, which provides a DOI for your work,\nensuring long-term accessibility and reproducibility.\n:::\n\n## Rstudio project to `Zenodo` pipeline\n\n### Managing Project Environments with renv\n\n-   `renv` creates project-specific libraries\n\n-   Captures package versions in a `renv.lockfile`\n\n-   Ensures reproducibility of package environment\n\n-   Centralizes package environment management within each project\n\n::: notes\n-   `renv` helps manage R package environments by creating isolated\n    libraries specific to each project, ensuring that the project uses\n    only the packages it needs.\n\n-   The renv.lock file records exact versions of all installed packages,\n    allowing consistent installation of these packages to improve\n    reproducibility.\n\n-   This feature is especially useful for transferring projects between\n    machines, maintaining a controlled environment.\n\n-   It centralizes the package environment management within the project\n    folder, avoiding conflicts with global R libraries.\n:::\n\n## Rstudio project to `Zenodo` pipeline\n\n### `renv` Workflow\n\n-   Initialize `renv` inside the project directory to identify\n    dependencies\n\n-   Snapshot dependencies to create a lockfile\n\n-   Restore environments using `renv::restore()`\n\n-   Easy integration with RStudio for workflow management\n\n::: notes\n-   Initialize `renv` in a project to isolate packages from the\n    system-wide library.\n\n-   Snapshot the project’s package dependencies, generating a lockfile\n    (renv.lock).\n\n-   Restore the environment by reinstalling packages using the lockfile.\n\n-   `renv` integrates smoothly with RStudio, making it easy to use\n    alongside other development tools.\n:::\n\n## Rstudio project to `Zenodo` pipeline\n\n### Limitations of `renv`\n\n-   Does not manage R versions or system-wide dependencies\n\n-   Focuses on managing package environments within R\n\n-   Best combined with containerization (e.g., `Docker`) for full reproducibility\n\n-   Complements external repositories (e.g., `Zenodo`) for sharing and preservation\n\n::: notes\n-   `renv` does not manage system-level dependencies such as the R version or other software your project might rely on (e.g., geospatial libraries like GDAL\n\n-   `renv` is designed to manage the R package environment, ensuring that the same R packages and versions are used across different machines.\n\n-   For full reproducibility, `renv` should be combined with tools like\n    `Docker` for system environment control.\n\n-   Publishing platforms like `Zenodo` can be used to store code and\n    data for long-term preservation.\n:::\n\n## Rstudio project to `Zenodo` pipeline\n\n### Publishing and Archiving with Zenodo\n\n-   Long-term storage with generous 50GB upload limit per record\n\n-   Permanent DOIs for easy citation and versioning support for updates\n\n-   GitHub integration for seamless code archiving with DOI snapshots\n\n-   Supports FAIR principles: aligned with open access, transparency, and reusability\n\n-   Community creation for grouping related research outputs\n\n-   API and open-source: flexible for programmatic access and customization\n\n::: notes\n-   `Zenodo` provides long-term storage for a variety of research outputs, including datasets, code, and publications, ensuring that these materials remain accessible over time.\n\n-   Every record receives a permanent Digital Object Identifier (DOI), which allows for easy citation in research papers.\n\n-   Integration with GitHub allows researchers to archive their code and generate DOI-linked snapshots with each release.\n\n-   `Zenodo` aligns with the FAIR and Open Science principles, supporting open and reusable research outputs\n\n-   The platform allows the creation of communities to group related records, making it useful for creating a collection of related research outputs, either for a\n    research group or a large-scale funded project.\n    \n-   `Zenodo’s` API provides programmatic access for tasks like automating record creation, and its open-source nature allows for customization and contribution to the platform.\n:::\n\n## Rstudio project to `Zenodo` pipeline\n\n### Streamlining publishing to `Zenodo` with `zen4R`\n\n-   Upload datasets, code, and metadata from R to `Zenodo`\n\n-   Automate publication and deposition management\n\n-   Retrieve and update `Zenodo` records directly in R\n\n-   Facilitates integration and reproducibility in R workflows\n\n::: notes\n-   `zen4R` allows R users to interact with `Zenodo‘s` API to upload data\n    and code directly from R.\n\n-   It supports automated publication, including metadata management and\n    record updating.\n\n-   Retrieve and update `Zenodo` records programmatically within R.\n\n-   This makes publishing more efficient, especially in workflows\n    requiring frequent updates or version control.\n:::\n\n## Rstudio project to `Zenodo` pipeline\n\n### Combining `renv` and `Zenodo`\n\n-   `renv` manages internal project environments\n\n-   `Zenodo` ensures external reproducibility with archiving\n\n-   Together, they provide a comprehensive solution\n\n-   Aligns with open science and FAIR principles\n\n::: notes\n-   `renv` manages internal environments by locking package versions and\n    dependencies.\n\n-   `Zenodo` provides external storage and ensures reproducibility by\n    archiving and versioning research outputs.\n\n-   Together, they create a comprehensive solution for reproducible,\n    open science projects.\n\n-   This combination aligns with FAIR principles, ensuring data is\n    Findable, Accessible, Interoperable, and Reusable.\n:::\n\n:::\n\n\n\n## Containerization with <img src=\"assets/images/Docker.dark.svg\" style=\"vertical-align:0%; height:1.25em;\"/> {#sec-docker_workflow}\n\n\n\n---\nbibliography: references.bib\nexecute:\n  echo: true\n  eval: false\n  error: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n![](assets/images/Docker_workflow.png){.lightbox width=\"70%\"\nfig-align=\"center\"}\n\n**The title of this workflow raises two questions, the first being: what\nis containerization?**\n\nSimply put containerization is the process of bundling code along with\nall of it's dependencies, i.e. all the components we discussed as making\nup the [environment](@sec-environment-management), including the\noperating system, software libraries (packages), and other system\nsoftware. The fact everything needed to run the code is included means\nthat the code is portable and can be run on any platform or cloud\nservice. This also makes containerization something of a gold standard\nfor reproducibility as the entire environment is explicitly re-produced.\n\n**and the second: what is Docker?**\n\n[Docker](https://www.docker.com/) is an open-source, and the most\npopular, platform for containerization. Before we dive into a practical\nexample using Docker for research projects with R it is important to\nintroduce some three key terms that we will come across:\n\n-   `Dockerfile`: The first step in the containerization process, they\n    are a straightforward text file containing a collection of commands\n    or procedures to create a new Docker Image. In this sense we can\n    consider a Dockerfile are the source code of Docker Image.\n    Importantly, Dockerfiles typically start from a base image, which is\n    a existing Docker Image that your image is extending.\n\n-   `Docker Image`: A read-only file that contains the instructions for\n    creating a Docker Container. Think of an image as the blueprint of\n    what will be in a container when it is running. Docker Images can be\n    shared via [Dockerhub](https://hub.docker.com/), so that they can be\n    used by others.\n\n-   `Docker Container`: Is an actual running instance of a Docker image.\n    It runs completely isolated from the host environment by default and\n    only accesses host files (i.e. data) if it has been configured to do\n    so. It is possible to create multiple containers simultaneously from\n    the same Docker Image, and each container can be started, stopped,\n    moved, and deleted independently of the others.\n\nThe graphic below show the relationships between these components\nincluding the central commands of Docker that connect them `build` and\n`run`:\n\n![](assets/images/docker_explainer.png){.lightbox width=\"70%\"\nfig-align=\"center\"}\n\n### Using Docker with R\n\nSo to create a `Docker Image` to containerize our R research projects we\nneed to start by creating a `Dockerfile` and, as mentioned above, this should\nstart with a base image. In our case this base image must logically\ninclude R and RStudio (if we want to utilise the RStudio Projects\nfeatures).\n\nFortunately there is a project that specifically catalogs and manages\nDocker Images for R projects: [`Rocker`](https://rocker-project.org/).\nThe images available through the Rocker project not only include\ndifferent versions of R and RStudio but also images containing\ncollections of R packages for specific purposes (e.g. tidyverse for data\nwrangling and visualisation, geospatial packages etc.).\n\nIn terms of actually creating the `Dockerfile` for our R project, this\ncan be done manually (See a good R-focused tutorial[here](https://colinfay.me/docker-r-reproducibility/)), however there are also R packages that can help with this process such as [`dockerfiler`](https://thinkr-open.github.io/dockerfiler/) and the `[rrtools`](https://github.com/benmarwick/rrtools) package. \n\nFor our [exercise](@sec-docker_exercise) of this workflow we will use the `dockerfiler` package, which creates a custom class object that represents the Dockerfile and has slots corresponding to common elements of Docker images. This allows us to add elements to the dockerfile in a more R-like way. The following code snippet demonstrates adding `Maintainer` details to a Dockerfile object, before saving it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dockerfiler)\n# Create a dockerfile template\nmy_dock <- Dockerfile$new()\n\n# Add maintainer\nmy_dock$MAINTAINER(\"Jane Doe\", \"jane_doe@gmail.com\")\n\n# Save\nmy_dock$write()\n```\n:::\n\n\n### Docker with renv\n\n\n\n:::\n\n<!-- Presentation content -->\n::: {.content-visible when-format=\"revealjs\"}\n:::\n\n\n\n## Version control with <img src=\"assets/images/Github.light.svg\" style=\"vertical-align:0%; height:0.75em;\"/> {#sec-git_workflow}\n\n![](assets/images/version_control_workflow.png){width=\"70%\" fig-align=\"center\"}\n\n\n\n---\nbibliography: references.bib\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n::: {.content-hidden when-format=\"revealjs\"}\n**Version controlling** software output can have multiple uses including creating a systematic procedure for collaboration, working as a team along with increasing the ease of reproduction of the work by other users or by the original researcher as well. We all know the difficulty of tracing back the workflow of work projects a few months down the line after having shelved it, and it is here that Git and Github can be highly useful (@Alexander2023).\n\n### About Git\n\n**Git** allows us to make snapshot or record of the changes undertaken in a script, and store it as with a message that defines the change. In this way even after multiple updates, the history is preserved allowing us to revert, compare and systematically trace back the workflow development.\n\n**Git** is useful also for data scientists and researchers that work individually yet want to create systematically reproducible workflows with version control (@Alexander2023).\n\n### GitHub repositories and functionalities {#sec-Gitrepo}\n\nThe version controlled code and all other auxiliary files related to the project are stored in a Github repository which was created by the user in their account on Github. A repository can either be set as public or private as per the users need for visibility of their work.\n\nTo help with version control Github repositories provide multiple functionalities like creating 'branches', 'clones', 'merging' multiple branches, setting up a 'pull request' before merge etc. As we get into more complicated workflows handled by multiple developers, Github allows many more functionalities as checks and balances to code development. However, we will limit our understanding to what is needed to create work with a version control history allowing for small scale collaboration, but with the main goal of creating reproducible research ([see more details](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories)).\n\n### Basic functionalities\n\n-   **Creating a repository and setting up user authorisations**: A project repository must first be set up on GitHub as either a private or a public repository. If it is not an individual project, collaborators can be added with appropriate (read or write) permission levels ([see more details](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-user-account-settings/permission-levels-for-a-personal-account-repository)). It is good to elaborate the 'Readme' file so as to help viewers get an idea of the repository ([see more details](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)).\n\n-   **Push and Pull**: The data and code related to a project must be cloned from the remote version to a local version before changes are made. Make sure to pull from updated (i.e. merged branches; see below) branches before making changes. Once changes are made the user must 'commit' all the correct changes. Once this is done the changed code can be pushed back to the branch.\n\n-   **Branching and merging** : Git allows users to create [branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#working-with-branches) that feed into the 'main' branch of a project repository on GitHub. Each branch can be created either for different tasks or for different users as per the requirement. To [merge branches into 'main' users have to set up a pull-request](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github) which needs to be approved by an authorised user.\n\n-   Git provides additionally **many more [functionalities](https://education.github.com/git-cheat-sheet-education.pdf)** for identifying differences between changed files or between branches, to make temporary commits and to revert back to a certain commit in history. However this is beyond the scope of this workshop.\n\n### Git in R-Studio\n\nWhen a Github repository is connected to an R project, R-studio adds a 'Git' tab (see image below) with 'push', 'pull', 'commit' and 'diff' functionalities. We can switch branches to pull from or push to and additionally trace the history of changes in the Github respository by all users.\n\n![Git intergration into R-Studio](assets/images/screenshot_R_studio_git.png){width=\"70%\" fig-align=\"center\"}\n\nAlternatively you can also use [Github desktop](https://github.com/apps/desktop) to perform the same functionalities.\n\n### Additional functionalities\n\n1.  Public Github repositories can now be archived on Zenodo as a permanent record of the work with a Digital Object Identifier (DOI) that can be cited in academic work ([Click to see more details](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)).\n\n2.  GitHub further provides advanced functionalities like [GitHub Actions](https://docs.github.com/en/actions/about-github-actions/understanding-github-actions) that allows the user to automate certain processes for application development or project management.\n\n3.  GitHub releases can be automatically published on Docker Hub or GitHub packages as part of a Continuous Integration(CI) workflow ([see more details](https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images)).\n:::\n\n::: {.content-visible when-format=\"revealjs\"}\n### Why Git and GitHub?\n\n-   **Version control**: A more systematic way to organise data beyond \"dataprep_1\", \"dataprep_final\", \"dataprep_finalfinal\" etc.\n\n-   **Systematic documentation** and **storage of code** changes allowing us to track changes and revert back to previous versions when needed.\n\n### Terminologies\n\n-   **Push** and **Pull**?\n\n![Git terminologies](assets/images/Git_terminology.png){width=\"70%\" fig-align=\"center\"}\n\n-   Git cheatsheet: https://education.github.com/git-cheat-sheet-education.pdf\n\n### Steps for using Git and GitHub (To be done in the exercises - basic)\n\n-   Create a GitHub repository in your account\n\n-   Download and install Git\n\n-   Add credentials for your account to Git\n\n-   Link RProject to Github repository\n\n-   Open, checkout and navigate Git repository local version via Rstudio\n\n-   Basic functionalities of Git in Rstudio\n\n### Additional fucntionalities\n\n-   GitHub repositories can be archived on Zenodo and thus get a DOI.\n-   GitHub actions\n-   GitHub releases can be continuously integrated into DockerHub or GitHub Packages\n:::\n\n\n\n# Quarto {#sec-Quarto}\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n## A brief introduction to Quarto\n\nQuarto is a unified authoring framework that allows for the integration of code, written material and a wide variety of interactive visual formats into one publishable finished document.\n\n#### Quarto allows you to:\n\n-   Create dynamic content that is updated as your code changes\n\n-   Numerous thematic settings for high quality formatting including 'Pandoc' markdown support for equations and cross-referencing\n\n-   Publish your work as websites or books\n\n-   Edit with any text editor including VS Code, RStudio and more\n\n-   Easily include citations and bibliographies from tools like Zotero, making it ideal for academic writing and research projects.\n\n-   Efficiently track changes and collaborate using Git or other version control systems, thanks to its text-based document structure.\n\n#### Compatibility Beyond R\n\nAlthough we focus on Quartos integration with R, it is also compatible with other programming languages, making it a flexible choice for a variety of users. Quarto supports:\n\n-   **Python**: You can write Python code in Quarto documents to create visualizations, run analyses, and integrate with Python libraries.\n\n-   **Julia**: Quarto allows seamless integration with Julia for those working in the data science or scientific computing community.\n\n-   **Observable**: For JavaScript users, Quarto supports Observable, allowing you to build interactive documents using JavaScript.\n\nThis multi-language support makes Quarto a powerful tool that can adapt to your needs, whether you're working in R, Python, Julia, or even a mix of all three.\n\n### Some of the creative ways in which you can use Quarto is:\n\n#### 1. Visualize and publish interactive plots using html widgets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(plotly)\np <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +\n            geom_bar(position = \"dodge\")\nggplotly(p)\n```\n:::\n\n\n#### 2. Create interactive geo-spatial mapping segments\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\n\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng= 8.548, lat=47.376, popup=\"ETH\")\n```\n:::\n\n\n#### 3. Create multi-purpose dashboards to demostrate your research output\n\n![](https://quarto.org/docs/dashboards/examples/thumbnails/customer-churn-dashboard.png){fig-align=\"center\" width=\"70%\"} \n\n#### 4. Create multilingual websites for your research projects\n\n![](assets/images/quarto_multilingual.png){fig-align=\"center\" width=\"70%\"}\n:::\n\n<!-- Presentation content -->\n\n::: {.content-visible when-format=\"revealjs\"}\n### Introduction to Quarto\n\n**A Unified Authoring Framework**\n\n-   Integrates code, text, and interactive visuals\n-   Produces publishable documents\n-   Updates dynamically as code changes\n\n### Key Features of Quarto\n\n**What Quarto Allows You To:**\n\n-   Create dynamic content that updates with your code\n-   Utilize high-quality Pandoc Markdown for formatting\n-   Publish your work as websites or books\n-   Edit with any text editor (e.g., VS Code, RStudio)\n-   Easily include citations from tools like Zotero\n-   Collaborate and track changes using Git\n\n\n### Compatibility Beyond R\n\n**Multi-Language Support:**\n\n-   **Python**: Create visualizations and run analyses\n-   **Julia**: Seamless integration for data science\n-   **Observable JavaScript**: Build interactive documents\n-   Flexible for mixed-language projects\n\n\n### Some of the creative ways in which you can use Quarto is:\n\n#### 1. Visualize and publish interactive plots using html widgets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(plotly)\np <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +\n            geom_bar(position = \"dodge\")\nggplotly(p)\n```\n:::\n\n\n\n#### 2. Create interactive geo-spatial mapping segments\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\n\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng= 8.548, lat=47.376, popup=\"ETH\")\n```\n:::\n\n\n\n#### 3. Create multi-purpose dashboards to demostrate your research output\n\n![](https://quarto.org/docs/dashboards/examples/thumbnails/customer-churn-dashboard.png){fig-align=\"center\"}\n\n#### 4. Create multilingual websites for your research projects\n\n![](assets/images/quarto_multilingual.png){fig-align=\"left\"}\n:::\n\n\n\n# Guided excercises {#sec-exercises}\n\nNow it's time to get hands on with some guided exercises that will let you put into practice the [three workflows for reproducible research](@sec-workflows) that we have introduced as well as writing a academic manuscript using [Quarto](@sec-Quarto). Each exercise is available to download as a PDF if you prefer to view the instructions offline and the files required for each are available to download at the start of each exercise.\n\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n## Create an RStudio Project and upload to Zenodo {#sec-Rproj_zenodo_exercise}\n\nIn this exercise you will first setup a basic RStudio project following the good practices introduced in the [Research projects with R](@sec-Rprojects) section. As part of this We will initialize `renv` to manage package dependencies, ensuring reproducibility. After this you will upload the project to Zenodo so that it can be shared with others.\n\nIf you would prefer to view the exercise script offline, here is a PDF version: <a href=\"https://blenback.github.io/R-for-Reproducible-Research/exercises/Rproj-Zenodo_exercise.pdf\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download exercise instructions</b></a>\n\n### Step 1: Download the exercise resources\n\n-   Click here to download the resources for the exercise: <a href=\"https://drive.google.com/uc?export=download&id=1V30Aa43u-OhUZ829yWZNxWAybz151MGY\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download resources for exercise</b></a>\n-   Unzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n### Step 2: Create a new RStudio Project\n\nStart by creating a new RStudio project in the root of the `exercise_1_data` directory. you have just downloaded. You can name the project what you like but in this example, we have named it `Rice_farm_analysis.proj`.\n\n-   Open RStudio.\n-   Create the project using: *File \\> New Project \\> Existing Directory*.\n-   Select the `exercise_1_data` folder as the location and give the project a name, for example, `Rice_farm_analysis.proj`.\n\nThis creates a `.Rproj` file in the root of your project to help manage the workspace and project-specific settings.\n\n### Step 3: Organize the data\n\nIt's good practice to organize raw and processed data in separate folders. Let’s start by organizing the data:\n\n-   Create a directory `Data/Raw` inside your project folder.\n-   Move the provided CSV file into this `Data/Raw` directory.\n\n### Step 4: Organize and split your scripts\n\nWe'll now organize the project's scripts by splitting the original script into separate *analysis* and *visualization* scripts.\n\n-   Create a `scripts` folder inside your project directory.\n-   Move the original `RiceFarm_project.R` script into the `scripts` folder.\n-   Create two new scripts named `01_data_analysis.R` and `02_data_visualisation.R`.\n\n#### For `01_data_analysis.R`\n\n-   Copy the following code from `RiceFarm_project.R`:\n\n    -   The call to the relevant library `library(stringr)`\n    -   Everything before the call to the `ggplot()` function\n\n-   In addition to this, replace the `setwd()` function with this code to set up relative paths, create a directory to save the processed data in and save `rice_data_summary` to disk after processing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Raw data dir\nraw_dir <- \"Data/Raw\"\n\n# vector and create processed data save dir\nsave_dir <- \"Data/Processed\"\ndir.create(save_dir,\n           showWarnings = FALSE,\n           recursive = TRUE)\n  \n# Save the summarized data\nwrite.csv(rice_data_summary,\n          file.path(save_dir, \"RiceFarms_summary.csv\"),\n          row.names = FALSE)\n```\n:::\n\n\n#### For `02_data_visualisation.R`\n\n-   Copy the following code from `RiceFarm_project.R`:\n\n    -   The call to the relevant library `library(ggplot2)`\n    -   The call to the functions `ggplot()` and `ggsave()`\n\n-   Add the following code after the `library()` call to create an output directory for the plots and load the summarized data from the processed data folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Directory for saving plots\nplot_dir <- \"Output/Visualisations\"\ndir.create(plot_dir, showWarnings = FALSE, recursive = TRUE)\n    \n# Raw data directory\nraw_dir <- \"Data/Raw\"\n\n# Load csv file of data\nrice_data <- read.csv(file.path(raw_dir, \"RiceFarms.csv\"))\n```\n:::\n\n\n### Step 5: Add script headers\n\nAdd headers to both new scripts. You can use this template:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# -----------------------------------------------\n# Script Name: [01_data_analysis.R / 02_data_visualisation.R]\n# Project: Rice Farm Analysis\n# Purpose: [Data analysis / Data visualization]\n# Author: [Your Name]\n# Date: [YYYY-MM-DD]\n# -----------------------------------------------\n```\n:::\n\n\n### Step 6: Create a master script\n\nAs a next step you will create a master script that runs both the data analysis and visualization scripts.\n\n-   In the root of your project, create a new file named `RiceFarm_master.R`\n\n-   Add a header as in Step 5.\n\n-   Add the following code snippet to the script to source `01_data_analysis.R` and `02_data_visualisation.R`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###=========================================================================\n### 01- Data analysis\n### =========================================================================\n\n# Source the data analysis script\nsource(\"Scripts/01_data_analysis.R\")\n\n### =========================================================================\n### 02- Data visualization\n### =========================================================================\n\n# Source the data visualization script\nsource(\"Scripts/02_data_visualisation.R\")\n```\n:::\n\n\nRunning this master script will execute both analysis and visualization steps.\n\n### Step 7: Initialize `renv` to manage package dependencies\n\nWe will use [`renv`](https://rstudio.github.io/renv/articles/renv.html) to make your projects package environment reproducible.\n\n-   Run the following command in your master script to set up the project-specific environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::init()\n```\n:::\n\n\nThis creates a local library for your project and captures the required packages.\n\n-   Once the initialization is complete, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n\nThis records the project's environment in a `renv.lock` file, which is essential for reproducibility.\n\n### Step 8: Automate opening of the master script\n\nFor convenience, we will configure RStudio to automatically open the master script when the project is loaded.\n\n-   Open the `.Rprofile` file in the root of your project directory. The file might be hidden. On Windows click *View > Show > Hidden items* in the explorer and on MacOS click Press Command+Shift+Dot within the root directory to see the file.\n\n-   Add the following R code to the `.Rprofile` file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    rstudioapi::navigateToFile('RiceFarm_master.R', line = -1L, column = -1L)\n}, action = \"append\")\n```\n:::\n\n\n### Step 9: Re-snapshot the Project\n\nAfter modifying the `.Rprofile` file, it’s important to capture these changes in the `renv.lock` file.\n\n-   Run the following command in your master script to ensure that the `rstudioapi` package (which enables automatic script opening) is included in the snapshot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\n```\n:::\n\n\nNow we a have a nicely organised project structure with the workflow decomposed into seperate scripts and a master script that to run the whole project.\n\n### Step 10: Install `zen4R` to access Zenodo through R\n\nThe following steps are heavily based on [@blondel2024]. We have extracted the most relevant parts to explain the workflow. If you are interested in more details, check out their user manual at: https://cran.r-project.org/web/packages/zen4R/vignettes/zen4R.html.\n\nFor this exercise we will not be using Zenodo directly but Zenodo Sandbox. The Zenodo Sandbox is a separate, secure testing environment where users can explore Zenodo‘s features without impacting the main platform‘s publicly accessible data. It allows you to test file uploads, generate test DOIs, and experiment with API integrations. DOIs created in the sandbox are only for testing and use a different prefix. You will need a separate account and access token for the sandbox, distinct from those used on Zenodo‘s main site.\n\n- Create an account on [https://sandbox.zenodo.org](https://sandbox.zenodo.org).\n\nZenodo can be accessed with the R package `zen4R` to upload, edit, publish and download data.\n\n-   Create a new R script outside of the project directory.\n-   Install zen4R library with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install dependency \"remotes\"\ninstall.packages(\"remotes\")\n        \n#install zen4R\nrequire(\"remotes\")\ninstall_github(\"eblondel/zen4R\")\n```\n:::\n\n\n### Step 11: Create a new Zenodo record\n\nA Zenodo record includes metadata, data and a Digital Object Identifier (DOI) which is automatically generated by Zenodo for all uploads. But before you can add records to Zenodo, you need to get access to your account through R.\n\n-   Go to [https://sandbox.zenodo.org/account/settings/applications/](https://sandbox.zenodo.org/account/settings/applications/).\n-   Log into your account and then create a new \"Personal access token\" in the \"Applications\" section of your account.\n-   Then run the following code in your script to establish the access and create a new record.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(zen4R)\n        \n#Create manager to access your Zenodo repository\nzenodo <- ZenodoManager$new(\n    token = \"your_token\",\n    sandbox = TRUE,\n    logger = \"INFO\" \n    )\n        \n##Prepare a new record to be filled with metadata and uploaded to Zenodo\nmyrec <- ZenodoRecord$new()\n```\n:::\n\n\nIf you want to connect to Zenodo and not Zenodo Sandbox, create the token in your Zenodo account and remove the line `sandbox = True` in the code above.\n\nThe types of metadata that can be included in a Zenodo record are vast. A full list can be found in the [documentation](https://developers.zenodo.org/#representation) .\n\n-   Copy and run the example below to add metadata to your record.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyrec$setTitle(\"RiceFarm\") #title of the record\nmyrec$addAdditionalTitle(\"This is an alternative title\", type = \"alternative-title\")\nmyrec$setDescription(\"Calculating statistics of RiceFarm dataset\") #description\nmyrec$addAdditionalDescription(\"This is an abstract\", type = \"abstract\")\nmyrec$setPublicationDate(\"2024-09-16\") #Format YYYY-MM-DD\nmyrec$setResourceType(\"dataset\")\nmyrec$addCreator(firstname = \"Yourfirstname\", lastname = \"Yourlastname\", role = \"datamanager\", orcid = \"0000-0001-0002-0003\")\nmyrec$setKeywords(c(\"R\",\"dataset\")) #For filtering\nmyrec$addReference(\"Blondel E. et al., 2024 zen4R: R Interface to Zenodo REST API\")\n```\n:::\n\n\nA record can be deposited on Zenodo before it is published. This will add the record to your account without making it public yet. A deposited record can still be edited or deleted. You can also upload data to a deposited record. If you prefer a graphical interface, you can also edit the record on the Zenodo website.\n\n-   Deposit the record on Zenodo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#deposit record\nmyrec <- zenodo$depositRecord(myrec, publish = TRUE)\n```\n:::\n\n\n-   View the deposited record at https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\n\n-   Compress your project directory to a .zip file.\n\n-   Upload the .zip file to your deposited record:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#add data to the record, adjust the path below\nzenodo$uploadFile(\"path/to/your/file\", record = myrec)\n```\n:::\n\n\n-   Publish the record:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make the record publicly available on Zenodo (Sandbox).\nmyrec <- zenodo$publishRecord(myrec$id)\n```\n:::\n\n\n### Step 12: Edit a published Zenodo record\n\n-   It is also possible to edit or update the metadata of published records:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get your record by metadata query, e.g. by title\nmyrec <- zenodo$getDepositions(q='title:zen4R')\n\n#get depositions creates a list, access first element\nmyrec <- myrec[[1]]\n\n#edit metadata\nmyrec <- zenodo$editRecord(myrec$id)\nmyrec$setTitle(\"zen4R 2.0\")\n\n#redeposit and publish the edited record\nmyrec <- zenodo$depositRecord(myrec, publish = TRUE)\n```\n:::\n\n\n-   Once a record has been published, it is not possible to edit the data that has been attached to it. However, it is possible to upload an updated version of the data. The previous version of the data will remain accessible via Zenodo. The record will have one overall DOI, while each version will have its own DOI.\n\n-   Reconnect to your account:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzenodo <- ZenodoManager$new(\n      token = \"your_token\",\n      sandbox = TRUE,\n      logger = \"INFO\")\n```\n:::\n\n\n-   Access your record:\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get your record by querying the metadata, e.g. by title, this will give you a list of all records with that title.\nmyrec <- zenodo$getDepositions(q='title:RiceFarm Statistics')\n    \n#access the first item in the list, as there should only be one record with that particular title\nmyrec <- myrec[[1]]\n```\n:::\n\n\n-   Rename your .zip file on your computer\n-   Upload the renamed .zip file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#edit data, delete_latest_files = TRUE to not include data of previous version in newer version\nmyrec <- zenodo$depositRecordVersion(myrec, delete_latest_files = TRUE, files = \"path/to/your/new/file\", publish = TRUE)\n```\n:::\n\n\n-   Again, go to https://sandbox.zenodo.org/me/uploads?q=&l=list&p=1&s=10&sort=newest\n-   Activate \"View all versions\" on the left hand side.\n-   Check if both versions show up\n\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n## Containerization with Docker exercise {#sec-docker_exercise}\n\nIn this exercise we will create and run a Docker container for an example R project. The project is the same that is created in the first workflow [exercise](@sec-Rproj_zenodo_exercise), however to save time or in case you haven't completed this exercise we will start with the finished output from it.\n\n**Warning**: Docker is a complex software and getting Docker Desktop running on different machines is not always smooth. For example, I had no problem getting it running on my desktop computer but my work laptop did not have the capabilities. If you do run into issues there is good support available online but also asking for help from your IT department may be a good idea. \n\nIf you would prefer to view the exercise script offline, here is a PDF version: <a href=\"https://blenback.github.io/R-for-Reproducible-Research/exercises/Docker_exercise.pdf\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download exercise instructions</b></a>\n\n### Step 1: Download the resources\n\n- Click here to download the resources for the exercise: <a href=\"https://drive.google.com/uc?export=download&id=1TN3DZqetynnNWlTeV2eKqJDcU53fq9Zg\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download resources for exercise</b></a>\n\n- Unzip the downloaded file and move the folder to a location on your computer where you can easily find it.\n\n### Step 2: Download Docker\n\n- Download Docker Desktop for your operating system from the [Docker website](https://www.docker.com/products/docker-desktop).\n\n- Once downloaded run the installer like you would for other software. If your computer is managed by your institution or your employer you will likely need an admin account to run the installer and you may need to restart your computer after installation.\n\n- While you are running the installer it is useful to make a Docker account. This is not necessary but can be useful for managing your containers. You can also sign in with your GitHub account.\n\n### Step 3: Open Docker desktop\n\n- Open the Docker desktop app. If the app does not open you may need to yourself to the program user-group on your computer. This is a common issue on Windows machines because only the admin account is added to the user-group by default. To add yourself to the user-group search computer management in the start menu and right-click and select to run it with admin privileges. Then navigate to Local Users and Groups -> Groups -> Docker Users. Right click on Docker Users and select Add to Group. Then add your user account to the group.\n\n- Once the Docker desktop app is open it should automatically start the docker engine which is the software that runs the containers. In the bottom left of app window you will see the status of the engine.\n\n![Docker Engine status in app](assets/images/Docker_running_app.png){width=\"70%\" fig-align=\"center\"}\n\nAlternatively if you look in the system tray on Windows or the top menu bar on Mac. You will see an icon of the Docker whale logo and if you click on this you can see the status of the engine.\n\n![Docker Engine status in system try](assets/images/Docker_running_desktop.png){width=\"70%\" fig-align=\"center\"}\n\n### Step 4: Creating the Dockerfile\n\n- Open Rstudio and navigate to the folder you downloaded in step 1.\n- Create a new R script and name it `Create_Dockerfile.R`.\n- Install the Dockerfiler package: `install.packages(\"dockerfiler\")`.\n-   Add the following code to the script and replace the entries with your details:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load dockerfiler package\nlibrary(dockerfiler)\n\n# Get your R version to select a base image to use for your image/container\nR.Version()$version.string \n\n# Create a dockerfile template object using the Dockerfile class from the\n# dockerfiler package and specify your version of R in the base image name\n# my version is 4.3.1 hence the base image is rocker/r-ver:4.3.1\n# but you should replace the end of this string with your version number from above\nRiceFarm_dock <- Dockerfile$new(FROM = \"rocker/r-ver:4.3.1\")\n\n# Add maintainer information (replace with your details)\nRiceFarm_dock$MAINTAINER(\"Your_name\", \"Your_email\")\n\n# By default docker images contain a home directory and because our project\n# is simple we will move the files we need there\n\n# Copy the data directory \n# (1st argument is the source, 2nd is the destination in the container)\nRiceFarm_dock$COPY(\"/Data\", \"/home/Data\")\n\n# Copy the scripts directory\nRiceFarm_dock$COPY(\"/Scripts\", \"/home/Scripts\")\n\n# Copy the master script\nRiceFarm_dock$COPY(\"/RiceFarm_master.R\", \"/home\")\n\n# For our project we need \"ggplot2\" and \"stringr\" packages\n# We could try to find a base image on Rocker that has these installed\n# But because we are not using lots of packages lets just install them in the container\n# Note that the R commands are wrapped in `r()` which is a helper function from dockerfiler\n# that then wraps the command in the correct syntax for the Dockerfile\nRiceFarm_dock$RUN(r(install.packages(\"ggplot2\")))\nRiceFarm_dock$RUN(r(install.packages(\"stringr\")))\n\n# Add the command to run the master script\n# Note the use of `Rscript` which is the command line tool included with R to run scripts\nRiceFarm_dock$CMD(\"Rscript /home/RiceFarm_master.R \")\n\n# Save the Dockerfile\nRiceFarm_dock$write()\n\n# Create dir in the host directory to receive the results from container\ndir.create(\"/output\")\n```\n:::\n\n\n- After running this code you will see that a `Dockerfile` has been created in the directory where you downloaded the resources.\n\n### Step 5: Creating the Docker image \n\n- The Docker command `build`  is used to create a `Docker image` from the instructions contained in your `Dockerfile`. \n\n- The `build` command should be called through a Command Line Interface (CLI) such as the terminal in Rstudio or the CLI of your operating system (e.g Command Prompt for Windows).\n\n- In Rstudio switch to the terminal tab next to the console pane:\n  \n![Rstudio terminal](assets/images/Docker_terminal.png){width=\"70%\" fig-align=\"center\"}\n  \n- Run the following command:  `docker build  -t ricerarm_01 .` Note: The `-t` flag is used to tag the image with a name (in this case we are using `ricerarm_01`). The `.` at the end of the command is used to specify the current directory as the location of `Dockerfile` that is to be used.\n  \n- After running the command you will see the Docker engine pulling the base image from the Docker Hub and then building the image. This process can take a few minutes depending on the size of the base image and the number of packages you are installing. The output in the terminal will look something like this:\n  \n![Docker build output in terminal](assets/images/Docker_build_output.png){width=\"70%\" fig-align=\"center\"}\n\n- Once the image has been built you can check that it is there by running the command `docker images` in the terminal. This will show you a list of all the images on your computer. You should see the image you just created in the list.\n\n- Alternatively you can check the image in the Docker desktop app. You will see the image in the list of images on the left of the app window. You can inspect the image by clicking on it and see the details of the image:\n\n![Docker build output in app](assets/images/Docker_build_app.png){width=\"70%\" fig-align=\"center\"}\n\n### Step 6: Running the Docker container\n\n- The Docker command `run` is used to run a container from an image.\n\n- **This can be done through the CLI:** In the terminal tab in Rstudio run the following command: `docker run ricerarm_01`. \n\n- **Or in the Docker desktop app:** Click on the image you want to run and then click the run button in the top right. This will open a window where you can specify the settings for the container but for now you should just run the container with the default settings.\n\n![Docker images in app](assets/images/Docker_image_app.png){width=\"70%\" fig-align=\"center\"}\n\n- After running the container you can also check the status of the container in the Docker desktop app. You will see the container in the list of containers on the left of the app window. You can inspect the container by clicking on it and see the details of the container.\n\n![Docker containers in app](assets/images/Docker_container_app.png){width=\"70%\" fig-align=\"center\"}\n\n### Step 8 Copying files from the container to the host\n\n- One way to access the files created inside your container is to mount a directory from your host machine to a directory in the the container. This is done using the `-v` flag in the `docker run` command. However, this is not so effective in the example container we are using because the code is completed in a matter of seconds and after that the container is exited.\n\n- Instead we will copy the output files from the container using the CLI. To do this you need to know the `container ID` of the container you want to copy files from. You can get the container ID by running the command: `docker ps -a` in the terminal, this will show you a list of all the containers on your computer and in the terminal output you can copy the ID:\n\n![Docker container ID in terminal](assets/images/Docker_container_ID.png){width=\"70%\" fig-align=\"center\"}\n\n- Now you have the ID in the terminal run the command: `docker cp <Container ID>:/home/Output/Visualisations/Regional_size_summary_bar.png ./Output/`\nand replace the `<Container ID>` with the ID you copied. The first argument `/home/Output/Visualisations/Regional_size_summary_bar.png` is the path to the file you want to copy in the container. The second argument `./Output/` is the path to the directory to copy the file to on your host machine, again this is a relative path and the `.` specifies the current directory. After running the command you should a message printed in the terminal and the file should be copied to the directory you specified:\n\n![Docker copy output in terminal](assets/images/Docker_copy_output.png){width=\"70%\" fig-align=\"center\"}\n\nThat's it, you have successfully created a Dockerfile, Docker image and container, run your code inside the container and copied the output back to your host machine. If you were to share the Dockerfile with someone else they could build the image and run the container on their machine and get exactly the same results as you. Obviously this is a very simple example but the same principles apply to more complex projects where reproducibility becomes more challenging. \n\n\n\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n## Version control with Git exercise\n\nIn this exercise we will show how version control with Git can be implemented for an example R project. The project is the same that is created in the first workflow [exercise](@sec-Rproj_zenodo_exercise), however to save time or in case you haven't completed this exercise we will start with the finished output from it.\n\nIf you would prefer to view the exercise script offline, here is a PDF version: <a href=\"https://www.example.com/example.zip\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download exercise instructions</b></a>\n\n### Step 1: Download and configure Git\n\n- Download Git from https://git-scm.com/downloads\n- Once downloaded open the Git terminal window and type in the following with your credentials\n\n`git config --global user.name \"NVHarisena1\" git config --global user.email \"NVHarisena1\\@ethz.ch\" git config --global --list`\n\nThe third command should return your updated user-name and email id.\n\n### Step 2: Create a repository on Github\n\nWe will make a quick repository on Github for an individual project, without changing much of the specific configurations since it will be beyond the scope of this workshop.\n\n- Login to your account at https://github.com/\n\n- Create a new repository by clicking the '+' sign in the top right side of the website or in the 'Start new repository' section in the homepage\n\n- Provide a clear name for the repository for e.g. \"R_repro_nv\" and a quick description like \"Test for Reproducible research workshop\"\n\n- Set the visibility of the profile to \"Public\"\n\n- Initialize this repository with: Add a README file.\n\n- Select a license for your repository in the \"Choose your license\" section. Check out [this website](https://choosealicense.com/) to identify which license works for you. Even though it is optional to add license information to a repository, it is good practice to include this ([See more details](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository#choosing-the-right-license)).\n\n- Click the green 'create repository' button\n\n![Setting up the repository](assets/images/git_ex1.png){width=\"70%\" fig-align=\"center\"}\n\n### Step 3: Link created repository to R-Studio\n\n- Open a new session in R studio and create a new project\n\n- In the 'New Project Wizard' navigate to 'Version Control'\\>'Git'\n\n- In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/nvharisena1/R_repro_test.\n\n- Add folder location where you want the project to be saved locally in your computer in \"Create project as subdirectory of\" section\n\n- Click 'Create project'\n\n![Linking repository to R-Studio](assets/images/git_ex2.png){width=\"70%\" fig-align=\"center\"}\n\nYou will see R-studio has now been set up for your local clone of the project to communicate with your online repository. You can see a drop-down to the right of 'New Branch' button in the Git tab. This will show you all the branches available to pull or push data to. Your drop-down should show only a 'main' branch, since no new branches were created. As stated in the workflow introduction, creating branches is useful for projects with multiple collaborators or sub-themes. Pushing to different branches and then setting up a 'pull-request' to merge to the 'main' branch allows for systematic version control of the project.\n\n![R-Studio new project session with git link](assets/images/git_ex3.png){width=\"70%\" fig-align=\"center\"}\n\n\n<!-- ### Step 4: Add exercise files to the local copy of the project -->\n\n<!-- In the file navigator in the bottom right of Rstudio in the 'files' tab you will see that R-Studio has already navigated to the directory for your project. -->\n\n<!-- -   Create two folders \"Exercise\" and \"Data\" -->\n<!-- -   Copy the downloaded \"exercise_data\" to the two folders: \"RiceFarm_project.R\" to the exercise folder and the \"RiceFarm.csv\" to the Data folder; you can do this by navigating to the local directory of the project on windows explorer and copying the data manually. It will automatically show up in the changed files as detected by Git. -->\n\n<!-- You will see that the changes are shown in the Git tab in the top right panel in R-Studio with status and path details of each change. -->\n\n<!-- ![Adding data to project](assets/images/git_ex4.png){width=\"70%\" fig-align=\"center\"} -->\n\n\n### Step 5: Edit the `README.md` file\n\n-   Open the README.md from the file viewer pane\n\n-   Add a description section for the project with a heading and a describing sentence, for e.g. \"This project is is a test\".\n\n-   Add license information for the project, for e.g. \"This project is licensed under the terms of the MIT license.\"\n\n-   Save the file.\n\n    ![Edit README.md](assets/images/git_ex5.png){width=\"70%\" fig-align=\"center\"}\n\n### Step 6: Edit the `.gitignore` file\n\nThe git ignore functionality tells git which files to ignore while 'pushing' the local changes to the remote (online) repository [see more details](https://git-scm.com/docs/gitignore/en).In this example we will tell git to ignore all `.html` files. `.html` files are created when you preview a file, for example click preview on the edited `README.md` and a `.html` should be created.\n\n-   Open the `.gitignore` file and add `.html` in a new line and save the file\n\n![Editing the .gitignore file](assets/images/git_ex6.png){width=\"70%\" fig-align=\"center\"}\n\n### Step 7: Commit and push\n\n- Click the `Commit` button in the Git tab\n\n- Check all the files listed in the top left section\n\n- Write a sentence describing the changes i.e. *\"Updated exercise, data, Readme and .gitignore\"*\n\n- Click `Commit` and close the window\n\n- click `Push` in the Git tab, a window will pop up showing the interface with the remote system and details of the upload.\n\n![Commit changes](assets/images/git_ex7.png){width=\"70%\" fig-align=\"center\"}\n\nGreat! You have finished your first project update (local changes committed and pushed) via Git on Rstudio.\n\n\n\n## Write a paper with Quarto\n\n\n\n# Resources {#sec-resources}\n\n<!--{{< include contents/resources.qmd >}}-->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}