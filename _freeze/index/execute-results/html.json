{
  "hash": "777f2acd8c1846bb5da1880b78824b68",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Reproducible Research with <img style=\"vertical-align:middle; height:1em; border: none; background: none;\" src=\"assets/images/Rlogo.png\"> and <img style=\"vertical-align:middle; height:1em;\" src=\"assets/images/quarto-logo-trademark.svg\">:\n  Workflows for projects and publications'\nsubtitle: \"A workshop presented at the [Landscape 2024 conference](https://landscape2024.org/frontend/index.php?folder_id=7393&page_id=), Berlin\"\nformat:\n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: left\n    toc-depth: 2\n    number-sections: true\n    number-depth: 1\ncitation-location: margin\nlightbox: true\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n\n![](assets/images/graphical_abstract_dark.png){.lightbox width=\"70%\" fig-align=\"center\"}\n\nThis image highlights some the key concepts we will discuss in the workshop, which have been divided into seperate sections:\n\n1.    [Background](@sec-background): Some introductory information on why reproducible and transparent research is important.\n2.   [Research projects with R](@sec-Rprojects): Starting from the basics to develop good practice for creating research projects with R, focusing on some features of Rstudio as an Integrated Development Environment that can help ensure your work is reproducible.\n3.   [Workflows for reproducibility](@sec-workflows): Here we present three workflows of differing levels of complexity and discusses how they can be combined and which might be best given the research needs.\n4.   [Quarto](@sec-Quarto): Here we introduce the open-source scientific and technical publishing system Quarto which can be used for numerous academic activities including preparing manuscripts.\n5.   [Guided exercises](@sec-exercises): Now it's time to get hands-on with some guided exercises  to put into practice some of the concepts we have discussed.\n6.   [Resources](@sec-resources): A collection of resources that we find particularly helpful in our own journey towards reproducible research.\n\n# Background {#sec-background}\n\n\n\n---\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n## About us\n\nWe are four researchers from the research group [Planning of Landscape\nand Urban Systems (PLUS)](https://plus.ethz.ch/) at [ETH\nZürich](https://ethz.ch/en.html). Click on the social icons below our\npictures to find out more about our individual research or get in touch\nwith us.\n\n::: {.grid style=\"display: flex; text-align: center;\"}\n::: g-col-6\n![](assets/images/Ben.jpg){.picture .lightbox}\n\n### Ben Black\n\n*Doctoral Researcher*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://blenback.github.io/){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:bblack@ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/ben-black-9889a1150/){.iconify-icon}\n[{{< iconify fa6-brands github size=xl >}}](https://github.com/blenback/){.iconify-icon}\n[{{< iconify fa6-brands researchgate size=xl >}}](https://www.researchgate.net/profile/Benjamin-Black-5/){.iconify-icon}\n:::\n\n::: g-col-6\n![](assets/images/nivedita.jpg){.picture .lightbox}\n\n### Nivedita Harisena\n\n*Doctoral Researcher*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://irl.ethz.ch/people/person-detail.Mjg5Mjgx.TGlzdC8zNzc5LC0xMzk1OTgzMDM3.html){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:nharisena@ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/nivedita-varma-harisena-667298141/){.iconify-icon}\n[{{< iconify fa6-brands github size=xl >}}](https://github.com/NVHarisena1){.iconify-icon}\n:::\n\n::: g-col-6\n![](assets/images/Manuel.jpg){.picture .lightbox}\n\n### Manuel Kurmann\n\n*Research Assistant*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://irl.ethz.ch/people/person-detail.MjM2NjYz.TGlzdC8zNzc5LC0xMzk1OTgzMDM3.html){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:mankurma@student.ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/manuel-kurmann-696577251/){.iconify-icon}\n[{{< iconify fa6-brands github size=xl >}}](https://github.com/ManuelKurmann){.iconify-icon}\n:::\n\n::: g-col-6\n![](assets/images/Maarten.jpg){.picture .lightbox}\n\n### Maarten Van Strien\n\n*Senior scientist*\n\n[{{< iconify fa6-solid house-chimney-user size=xl >}}](https://irl.ethz.ch/people/person-detail.MTYzODAz.TGlzdC8xNzM4LC0xMzk1OTgzMDM3.html){.iconify-icon}\n[{{< iconify fa6-solid envelope size=xl >}}](mailto:vanstrien@ethz.ch){.iconify-icon}\n[{{< iconify fa6-brands linkedin size=xl >}}](https://www.linkedin.com/in/maarten-van-strien-347b6747/?originalSubdomain=ch){.iconify-icon}\n[{{< iconify fa6-brands researchgate size=xl >}}](https://www.researchgate.net/profile/Maarten-Van-Strien){.iconify-icon}\n:::\n:::\n\n## What is reproducible research?\n-   Ability to replicate results:\n    -   Others can reproduce the results given only the original data, code, and documentation (Essawy et al. 2020)\n-   Starts with planning:\n    -   Reproducibility begins with organized data management and sound planning before any analysis is         conducted.\n-   Consistent data storage:\n    -   Data should be backed up regularly and stored in multiple locations to prevent loss and ensure         accessibility.\n-   Clear documentation:\n    -   Metadata and well-organized files are essential for interpreting and reproducing research,             ensuring clarity and usability.\n-   Version vontrol:\n    -   Using version control systems helps track changes and maintain a record of the project's               evolution, aiding in reproducibility.\n-   Standardized formats:\n    -   Data should be stored in nonproprietary, portable formats to ensure broad accessibility and            long-term usability.\n-   Open access:\n    -   Data and code should be publicly available in accessible repositories to support transparency          and wider use in the scientific community.\n\n\n## Why strive for reproducible research?\nAdvantages for your research\n\n-   Some fields have suffered a 'replication crisis':\n    -   In some cases headline results unable to be reproduced using\n        reported data and methods: Lowers trust in science\n        <!--Give headline figures -->\n-   Personal reference:\n    -   Simplifies the process of recalling how and why specific analyses were performed, making it            easier to explain your work to collaborators, supervisors, and reviewers.\n-   Efficient modifications:\n    -   Simplifies the process of adjusting analyses and figures, saving time when supervisors,                collaborators, or reviewers request changes.\n-   Streamlined future projects:\n    -   Facilitates the re-use of code and organizational systems for similar tasks in new projects,           making them simpler and faster to execute.\n-   Demonstrates rigor and transparency:\n    -   Enhances trust in your work by allowing others to verify the accuracy of your methods,                 improving peer review and reducing the risk of errors or accusations of misconduct.\n-   Increases impact and citations:\n    -   Boosts citation rates by enabling others to reuse your code and data, allowing your research to         have a greater influence and be cited in a wider range of contexts.\n\nAdvantages for other researchers\n\n-   Facilitates learning:\n    -   Provides others with a head start by sharing data and code for easier learning and faster              analysis.\n-   Enables reproducibility:\n    -   Makes it easier for others to reproduce and build upon your work, supporting stronger and more         compatible research.\n-   Error detection:\n    -   Helps others identify and correct mistakes, protecting the scientific community from errors.\n    \nAlston, J. M., and J. A. Rick. 2021. A Beginner's Guide to Conducting Reproducible Research. The Bulletin of the Ecological Society of America 102(2). https://doi.org/10.1002/bes2.1801.\n\n## Why {{< iconify fa-brands r-project >}} for reproducible research?\n:::\n\n\n-   Open source accessibility:\n    -   Freely available to everyone, eliminating cost barriers and promoting inclusive access to              research tools.\n-   Comprehensive documentation:\n    -   Encourages thorough documentation, making it easier to track and replicate analyses across             different projects.\n-   Integrated version control:\n    -   Seamlessly integrates with version control systems, ensuring that changes are tracked and              reproducibility is maintained.\n-   Consistency across platforms:\n    -   Provides a stable environment that works consistently across different operating systems,              enhancing reproducibility.\n-   Broad community support:\n    -   Backed by a large, active community that contributes to continuous improvements, making it a           reliable choice for long-term research projects.\n-   Flexibility and adaptability:\n    -   Offers a wide range of tools and functions that can be adapted to various research needs,              ensuring that diverse research tasks can be handled within a reproducible framework.\n    \nSiraji, M. A., and M. Rahman. 2024. Primer on Reproducible Research in R: Enhancing Transparency and Scientific Rigor. Clocks & Sleep 6(1): 1–10. https://doi.org/10.3390/clockssleep6010001.\n<!-- Presentation content -->\n\n::: {.content-visible when-format=\"revealjs\"}\n## About us\n\n### Ben Black\n\n::: {layout=\"[0.38, -0.02, 0.60]\" layout-valign=\"center\"}\n![](https://github.com/blenback.png){.picture .lightbox}\n\n[{{< iconify fa6-solid house-chimney-user >}}\nblenback.github.io](https://blenback.github.io/){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-solid envelope >}}\nbblack\\@ethz.ch](mailto:bblack@ethz.ch){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-brands linkedin >}} Ben\nBlack](https://www.linkedin.com/in/ben-black-9889a1150/){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-brands github >}}\n\\@blenback](https://github.com/blenback/){style=\"text-decoration: none;\"}<br>\n[{{< iconify fa6-brands researchgate >}} \\Benjamin\nBlack](https://www.researchgate.net/profile/Benjamin-Black-5/){style=\"text-decoration: none;\"}<br>\n[{{< iconify simple-icons x >}}\n\\@Blen_Back](https://twitter.com/Blen_Back/){style=\"text-decoration: none;\"}<br>\n:::\n\n## About us\n\n### Nivedita Harisena\n\n## About us\n\n### Manuel Kurmann\n\n## What is reproducible research?\n\nLet's hear your thoughts: What does reproducible research mean to you?\n\n::: {.img style=\"text-align:center;\"}\n![](assets\\images\\what_is_reproducible_qr_code.png){fig-align=\"center\"}\n\n<https://www.menti.com/alsw49tprwu7>\n:::\n\n##  {background-iframe=\"https://www.mentimeter.com/app/presentation/alqogxibw u94raf69893wn32c8it8mcy/embed\"}\n\n## The FAIR standard\n\nThe FAIR standard was developed....\n\n## Why strive for reproducible research?\n\n<!-- Use Mentimeter to take audience suggestions-->\n\n## Why strive for reproducible research?\n\n-   Replication crisis: Allows our work to be verified more thoroughly\n-   Improves science for all: Allows others to more easily build upon\n    our work\n\nDon't just take our word for it, research funders are increasingly\nfocused on reproducible research too: EXAMPLE\n\n## Why {{< iconify fa-brands r-project >}} for reproducible research?\n\n-   Open source\n-   Large active user community for support\n-   Packages to suit just about every research need: statistics,\n    modelling, spatial analysis, visualisation (Many packages developed\n    by academics)\n\nBUT just using {{< iconify fa-brands r-project >}} doesn't necessarily\nmake your research reproducible...\n\nWe have put together this workshop to share some advice for best\npractice and tips that we have picked up along the way.\n\n## Workshop concept\n\n![](assets/images/graphical_abstract_dark.png){width=\"70%\"}\n:::\n\n\n\n# Research projects with R {#sec-Rprojects}\n\n\n\n---\nbibliography: references.bib\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n<!-- Web content -->\n-------------------------------------------------------------------------------\n::: {.content-visible when-format=\"html\"}\n**Let's start with a definition of what makes a good R project from Jenny Bryan:**\n\nA good R project... *\"creates everything it needs, in its own workspace or folder, and it touches nothing it did not create.\"* [@bryan2017]\n\nThis is a good definition that contains concepts, such as the notion that projects should be 'self-contained'. However we add one more caveat to this definition which is that a good R project should *explain itself*.\n\nFor the purpose of this workshop we will approach this topic by splitting it up into 6 topics which are highlighted in this graphic:\n\n![Graphical overview of components of a good research project in R](assets/images/project_components.png)\n\nAs you move through these you will see that there are areas of overlap and complementarity between them. These topics are also central to the choice of approaches in the [three workflows for reproducibility](@sec-workflows) that we will share.\n\n## <img src=\"assets/images/RStudio_logo_flat.svg\" style=\"vertical-align:middle; height:1.5em;\"/> projects {#sec-projects}\n\nHow many times have you opened an R script and been greeted by this line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/ben/path/that/only/I/have\")\n```\n:::\n\n\nWhile it is well-intentioned (i.e. avoiding the need to have full paths for all objects that will subsequently be loaded or daved ) the problem with it is obvious: This specific path is only relevant for the author and not other potential users and even for the author it is will be invalid if they happen to change computers. The good news is there is a very simple way to avoid having to use `setwd()` at all by using [**Rstudio Projects**]().\n\nRstudio projects designate new or existing folders as a defined working directory by creating an `.RProj` file within them. This means that when you open a project the working directory of the Rstudio session will automatically be set to the directory that the .RProj file is located in and the paths of all files in this folder will be relative to this.\n\nThe `.Rproj` file can be shared along with the rest of the research project files meaning that others users can easily open the Project to have the same working directory removing the need for those troublesome `setwd()` lines.\n\n### Creating and opening projects {#sec-creating-projects}\n\nCreating an Rstudio project is as simple as using *File \\> New Project* in the top left and then choosing between creating the Project in a new or existing directory:\n\nThere are several ways to open a Projects:\n\n1.  Using *File \\> Open Project* in the top left of Rstudio.\n\n![](assets/images/File_open_project.png){fig-align=\"center\" width=\"50%\"}\n\n2.  Using the drop down menu in the top-right of the Rstudio session.\n\n![](assets/images/Open_project_right.png){fig-align=\"center\" width=\"50%\"}\n\n3.  Outside of R by double clicking on the `.Rproj` file in the folder.\n\n![](assets/images/Open_project_explorer.png){fig-align=\"center\" width=\"50%\"}\n\n### Utilising project specific `.Rprofile`'s {#sec-rprofile}\n\nAnother useful feature of Rstudio projects is the ability to store project-specific settings using the `.Rprofile` file which controls the initialisation behaviour of the R session when the project is opened. A useful application of this for reproducible research projects is automatically open a particular script, for example a master script that runs all the code in the project (which is a concept that will discussed under [workflow decomposition](@sec-workflow-decomposition)).\n\nTo do this the contents of your `.Rprofile` file would like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    # Open the script specificed by the path\n    rstudioapi::navigateToFile('scripts/script_to_open.R', line = -1L, column = -1L)\n}, action = \"append\")\n```\n:::\n\n\nThe easiest way to create and edit `.Rprofile` files is to use the functions from the package [`usethis`](https://usethis.r-lib.org/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note the use of scope = \"project\" to create a project specific .Rprofile\nusethis::edit_r_profile(scope = \"project\")\n```\n:::\n\n\n## Environment management {#sec-environment-management}\n\nThese lines of code are also probably familiar from the beginning of many an R script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\nBut what is wrong with these lines?\n\nWell firstly, there is no indication of what version of the package is to be installed and hence if the code installing this package is old it may not work with the most recent version of the package (This is less of a problem for well established packages like the Tidyverse but for less common packages, that may see large changes between versions, it could be substantial).\n\nSecondly, having the user install an unspecified version of a package could also cause dependency conflicts with other packages required by the code. This is because almost all packages have some form of dependency (i.e. they use the functionality of) on other packages. This is shown aptly by the image below which, while out-dated now, showed that in 2014 to install the 7 most popular R packages at the time would actually install 63 packages in total when considering their dependencies.\n\n![Package dependencies of popular R package [@devries2014]](assets/images/package_dependencies_2.png){width=\"50%\" fig-align=\"center\"}\n\nHowever the problem is bigger than just packages because when your code runs it is also utilising:\n\n-   A specific version of R\n\n-   A specific operating system\n\n-   Specific versions of system dependencies, i.e. other software in other languages that R packages themselves utilise e.g GDAL for spatial analysis packages like `terra`.\n\nAll of these things together make up what is known as the 'environment' of your code. Hence the process of documenting and managing this environment to is ensure that your code is reproducible (i.e. it not only runs but also consistently produces the same results).\n\nThere are different approaches to environment management that differ in their complexity and hence maybe suited to some projects and not others. For the purpose of this workshop we will focus on what we have found is one of the most user-friendly ways to manage your *package environment* (caveat that will be discussed) in R which is the package `renv`. Below we will introduce this package in more detail as it will form a central part of the [three workflows for reproducibility](@sec-workflows) that we present.\n\n### Creating reproducible environments with `renv`\n\nAs mentioned above [`renv`](https://rstudio.github.io/renv/articles/renv.html) is an R package that helps you create reproducible environments for your R projects by not only documenting your package environment but also providing functionality to re-create it.\n\nIt does this by creating **project specific libraries** (i.e. directories: `renv/library`) which contain all the packages used by your project. This is different from the default approach to package usage and installation whereby all packages are stored in a single library on your machine (system library). Having separate project libraries means \"that different projects can use different versions of packages and installing, updating, or removing packages in one project doesn't affect any other project.\" [@renv]. In order to make sure that your project uses the project library everytime it is opened `renv` utilises the functionality of [`.Rprofile's`](@sec-rprofile) to set the project library as the default library.\n\nAnother key process of renv is to create project specific **lockfiles** (`renv.lock`) which contain sufficient metadata about each package in the project library so that it can be re-installed on a new machine.\n\nAs alluded to, renv does a great job of managing your packages but is not intended to manage other aspects of your environment such as: tracking your version of R or your operating system. This is why if you want 'bullet-proof' reproducibility renv needs to be used alongside other approaches such as containerization which is the [3rd and most complex workflow](@sec-docker_workflow) we will discuss.\n\n## Writing clean code {#sec-writing-clean-code}\n\nThe notion of writing 'clean' code can be daunting, especially for those new to programming. However, the most important thing to bear in mind is that there is no objective measure that makes code 'clean' vs. 'un-clean', rather we should of think 'clean' coding as the pursuit of making your code easier to read, understand and maintain. Also while we should aspire to writing clean code, it is arguably more important that it functions correctly and efficiently.\n\nThe central concept of clean coding is that, like normal writing, we should follow a set of rules and conventions. For example, in English a sentence should start with a capital letter and end with a full stop. Unfortunately, in terms of writing R code there is not a single set of conventions that everyone proscribes to, instead there are numerous styles that have been outlined and the important thing is to choose a style and apply it consistently in your coding.\n\nPerhaps the two most common styles are the [Tidyverse style](https://style.tidyverse.org/) and the [Google R style](https://google.github.io/styleguide/Rguide.html) (Which is actually a derivative of the former). Neither style can be said to be the more correct, rather they express opinionated preferences on a series of common topics such as: Object naming, use of assignment operators, spacing, indentation, line length, parentheses placement, etc.\n\nRather than detail all of these topics here we will focus on just on some related tips that we think are most relevant for scientific research coding, including how to automate the formatting of your code to a particular style. However, we encourage you to go through the different style guides when you have the time.\n\n### Script headers {#sec-script_headers}\n\nStarting your scripts with a consistent header containing information about it's purpose, author/s, creation and modification dates is a great step making your workflow more understandable and hopefully reproducible. There are no rules as to what such a header should look like but this is the style I like to use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Script_title: Brief description of script purpose\n##\n## Notes: More detailed notes about the script and it's purpose\n##\n## Date created: \n## Author(s):\n#############################################################################\n```\n:::\n\n\nTo save time inserting this header into new scripts you use Rstudio's [**Code snippets**](https://docs.posit.co/ide/user/ide/guide/productivity/snippets.html) feature. Code snippets are simply text macros that quickly insert a section of code using a short keyword.\n\nTo create your own Code snippet go to *Tools \\> Global Options \\> Code \\> Edit Snippets* and then add a new snippet with your code below it:\n\n![](assets/images/Code_snippet_add.png){fig-align=\"center\" width=\"50%\"}\n\nTo use a code snippet simply start typing the keyword in the script and the auto-completion list will appear then press `Tab` and the code section will be inserted:\n\n![](assets/images/Code_snippet_completion.png){fig-align=\"center\" width=\"50%\"}\n\n### Code sections {#sec-code_sections}\n\nAs you may already know braced (`{}`) sections of code (i.e. function definitions, conditional blocks, etc.) can be folded to hide their contents in RStudio by clicking on the small triangle in the left margin.\n\n![](assets/images/code_section_sequential.png){fig-align=\"center\" width=\"50%\"}\n\nHowever, an often overlooked feature is the ability to create named code sections that can be also folded, as well as easily navigated between. These can be used to break longer scripts into a set of discrete regions according to specific parts of the analysis ([discussed in more detail later](@sec-workflow-decomposition)). In this regard, another good tip is to give the resulting sections sequential alphabetical or numerical Pre-fixes. Code sections are created by inserting a comment line that contains at least four trailing dashes (`-`), equal signs (`=`), or pound signs (`#`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Section One ---------------------------------\n \n# Section Two =================================\n \n# Section Three #############################\n```\n:::\n\n\nAlternatively you can use the *Code \\> Insert Section* command.\n\nTo navigate between code sections:\n\n-   Use the **Jump To** menu available at the bottom of the editor[@positsupport2024]\n\n![](assets/images/code_section_jumpto.png){fig-align=\"center\"}\n\n-   Use the document outline pane in the top right corner of the source pane\n\n![](assets/images/code_section_documentpane.dark.png){fig-align=\"center\"}\n\n### Automating the styling of your code\n\nThere are two R packages that are very helpful in terms of ensuring your code confirms to a consistent style: [`lintr`](https://lintr.r-lib.org/) and [`styler`](https://styler.r-lib.org/).\n\n-   `lintr` checks your code for common style issues and potential programming errors then presents them to you to correct, think of it like doing a 'spellcheck' on a written document.\n-   `styler` is more *active* in the sense that it automatically format's your code to a particular style, the default of which is the tidyverse style.\n\nTo use lintr and styler you call their functions like any package but styler can also be used through the **Rstudio Addins** menu below the Navigation bar as shown in this gif:\n\n<img src=\"https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif\" width=\"50%\"/>\n\nAnother very useful feature of both packages is that they can be used as part of a continuous integration (CI) workflow using a version control application like Git. This is a topic that we will cover as part of our [Version control with Git](@sec-git_workflow) workflow but what it means is that the styler and lintr functions are run automatically when you push your code to a remote repository.\n\n## Workflow decomposition {#sec-workflow-decomposition}\n\nIn computer sciences workflow decomposition refers to the structuring or compartmentalising of your code into seperate logical parts that makes it easier to maintain [@decompos2024].\n\nIn terms of coding scientific research projects many of us probably already instinctively do decomposition to some degree by splitting typical processes such as data preparation, statistical modelling, analysis of results and producing final visualizations.\n\nHowever this is not always realized in the most understandable way, for example we may have seperate scripts with logical sounding names like: `Data_prep.R` and `Data_analysis.R` but can others really be expected to know exactly which order these must be run in, or indeed whether they even need to be run sequentially at all?\n\nA good 1st step to remedying this is to give your scripts sequential numeric tags in their names, e.g. `01_Data_prep.R`, `02_Data_analysis.R`. This will also ensure that they are presented in numerical order when placed in a designated directory [Structuring your project directory](@sec-structuring) and can be explicitly described in your [project documentation](@sec-documentation).\n\nBut you can take this to the next level by creating a *Master* script that sources your other scripts in sequence (think of them as *sub-scripts*) so that users of your code need only run one script. To do this is as simple as creating the master script as you would any normal R script (*File \\> New File \\> R script*) and then using the `base::source()` function to run the sub-scripts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Master_script: Run steps of research project in order\n##\n## Date created: 30/7/2024\n## Author(s): Jane Doe\n#############################################################################\n\n### =========================================================================\n### A- Prepare dependent variable data\n### =========================================================================\n\n#Prepare LULC data\nsource(\"Scripts/Preparation/Dep_var_dat_prep.R\", local = scripting_env)\n\n### =========================================================================\n### B- Prepare independent variable data\n### =========================================================================\n\n#Prepare predictor data\nsource(\"Scripts/Preparation/Ind_var_data_prep.R\", local = scripting_env)\n\n### =========================================================================\n### C- Perform statisical modelling\n### =========================================================================\n\nsource(\"Scripts/Modelling/Fit_stat_models.R\", local = scripting_env)\n```\n:::\n\n\nAs you can see in this example code I have also made use of a [script header](@sec-script_headers) and [code sections](@sec-code_sections), that were previously discussed, to make the division of sub-processes even clearer. Another advantage of this approach is that all sub-scripts can utilise the same environment (defined by the `source(local= )` argument) which means that each individual script does not need to load packages or paths as objects.\n\nFinally, within your sub-scripts processes should also be seperated into code sections and ideally any repetitive tasks should be performed with custom functions which again are contained within their own files.\n\nFollowing this approach you end up with a workflow that will look something like this:\n\n![](assets/images/workflow_decomposition.png){width=\"100%\"}\n\nThe benefit of this hierarchical approach to structuring is that it is not only easier to debug and maintain individual processes but it is also more amenable to adding new processes.\n\n## Structuring your project directory {#sec-structuring}\n\nSimilar to having clean code, having a clean project directory that has well-organised sub-directories goes a long way towards making your projects code easier to understand for others. For software development there are numerous sets of conventions for directories structures although these are not always so applicable for scientific research projects. However we can borrow some basic principles, try to use: - Use logical naming - Stick to a consistent style, i.e. use of captialisation and seperators - Make use of nested sub-directories e.g `data/raw/climatic/precipitation/2020/precip_2020.rds` vs. `data/precip_2020_raw.rds`. This is very helpful when it comes to programatically constructing file paths especially in projects with a lot of data.\n\nAs an example my go-to project directory structure looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n└── my_project\n    ├── data # The research data\n    │   ├── raw\n    │   └── processed\n    ├── output # Storing results\n    ├── publication # Containing the academic manuscript of the project\n    ├── src # For all files that perform operations in the project\n    │   ├── scripts\n    │   └── functions\n    └── tools # Auxilliary files and settings\n```\n:::\n\n\nRather than manually create this directory structure everytime you start a new project, save yourself some time and automate it by using Rstudio's [**Project Templates**](https://docs.posit.co/ide/user/ide/guide/productivity/project-templates.html) functionality. This allows you to select a custom template as an option when creating a new [Rstudio project](@sec-creating-projects) through the New project wizard (*File \\> New Project \\> New Directory \\> New Project Template*).\n\nTo implement this even as an intermediate R user is fairly labor intensive as your custom project directory template needs to be contained within an R-package, in order to be available in the wizard. However, quite a few templates with directory structures appropriate for scientific research projects have been created by others:\n\n-   [`rrtools`](https://github.com/benmarwick/rrtools)\n\n-   [`ProjectTemplate`](http://projecttemplate.net/)\n\n-   [`template`](https://pakillo.github.io/template/)\n\n-   [`addinit`](https://dreamrs.github.io/addinit/) (Not a template but an interactive shiny add-in for project creation)\n\n## Project documentation {#sec-documentation}\n\nAs an example of why documentation is important think about if you bought a new table from Ikea only to excitedly rip open the box and find that there are no instructions for how to assemble it. Sure, you know what a table is supposedly to look like and given enough time you will end up with something that will probably be mostly right but maybe it's missing small details. Also it will probably take you just as long to take it apart in 5 years time. Well, working with undocumented code for research projects is similar except a lot more complicated!\n\nWriting comprehensive documentation that covers all aspects of our projects is time-consuming which is why it is often neglected. For example, there are a lot of different metadata conventions that exist that you could apply. However, learning and adhering strictly to these can be overwhelming and possibly lead to the opposite effect i.e. they are not simple for others to understand either.\n\nIn response to this there has been a movement in the R research community to adopt the *research as package* approach, which, as the name suggests, involves creating your project as an R-package which has a strict set of conventions for documentation [@marwick2018]. This is a viable approach for those who are familiar with R-packages but is arguably not the best for all projects and users.\n\nInstead, we would suggest to follow the maxim of *not letting the perfect be the enemy of the good* and to focus on these key areas:\n\n-   **Provide adequate in-script commentary**: This is perhaps contentious for those from a software development community, but given the choice I would rather have to read through a script with too many comments than one with too few. However remember that comments should be used to explain the purpose of the code, not what the code is doing. In line with this use [script headers](@sec-script_headers).\n\n-   **Document your functions with `roxygen` skeletons**:\n\n-   **Include a `README` file**: README files are where you should document your project at the macro-level i.e. what it is about and how it is supposed to work.\n\nThe latter of these two are more detailed so we have provided further information and tips in sections below.\n\n### Function documentation with `roxygen2` {#sec-roxygen}\n\nBase R provides a standard way of documenting a package where each function is documented in an `.Rd` file (R documentation). This documentation uses a custom syntax to detail key aspects of the functions such as their input parameters, outputs and any package dependencies [@wickham2024].\n\nIn the case of many research projects you will not be creating a package however it is still useful to apply this documentation style to your functions as it is a good way to make them understandable and easier to modify by others. For example, having clear information about the object (e.g. a vector or data.frame) that a function accepts, saves others time in guessing what the function is expecting if they are trying to use new data.\n\nHowever, rather than manually writing `.Rd` files, we can use the `roxygen2` package to automatically generate these files from a block of comments that are added to the top of the function scripts. To add this comment block, place your cursor inside a function you want to document and press `Ctrl + Shift + R` (or `Cmd + Shift + R` on Mac) or you can go to *code tools \\> insert roxygen skeleton* (code tools is represented by the wand icon in the top row of the source pane). As you can see in this gif below, when you insert the roxygen block it will already contain the names of the function names, its arguments and any returns and the function name. You can then fill in the rest of the information, such as the description and dependencies etc. for a guide to these other fields see the [roxygen2 documentation](https://roxygen2.r-lib.org/articles/rd.html).\n\n![Inserting roxygen block [@hajnala2018]](https://jozef.io/img/r102-01-add-roxy-skeleton.gif){alt=\"Inserting roxygen block\" width=\"50%\"}\n\n### Tips for README writing\n\nIf you look at the source code of R packages or projects that use R in Github repositories you will see that they all contain `README.md` files. This is the markdown format of the README file and is the most common format for README files in R projects. These files are often accompanied by the corresponding file `README.Rmd` which generates the `README.md` file. Markdown format is used for README's because it can be read by many programs and rendered in a variety of formats. In this sense writing the README for your project in markdown makes sense and there tools available to help you do this such as the `usethis` package which has a function [`use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) that will create a `README.Rmd` file for you. However, depending on who you anticipate using your project you may also want to create your README as a raw text file (`.txt`) which may be a more familiar format for some users and again can be opened by many different programs.\n\nAgain there is not a single standardised format for what should be included in your README file but here is an example of a README file that was written for one of the authors code/data upload alongside a publication: [README.txt](assets/README_demo.txt)\n\nYou will see that one of the things this README includes is a tree diagram which shows the directory structure of the project right down to the file level. This is a useful way to give an overview of what users should find included in the project and then explanatory notes can be added to explain the purpose of each file or directory. Such a diagram can be easily generated using the `fs` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"fs\")\nlibrary(fs)\n\n#vector path of the target directory to make a file tree from\nTarget_dir <- \"YOUR DIR\"\n\n#produce tree diagram of directory sub-dirs and files and save output using capture.ouput from base R utils.\ncapture.output(dir_tree(Target_dir), file= 'Dir_tree_output.txt')\n```\n:::\n\n\n:::\n\n<!-- Presentation content -->\n------------------------------------------------------------------------\n\n\n::: {.content-visible when-format=\"revealjs\"}\n**Let's start with a definition of what makes a good R project from Jenny Bryan:**\n\nA good R project... *\"creates everything it needs, in its own workspace or folder, and it touches nothing it did not create.\"* [@bryan2017]\n\nThis is a good definition that contains concepts, such as the notion that projects should be 'self-contained'. However we add one more caveat to this definition which is that a good R project should *explain itself*.\n\nFor the purpose of this workshop we will approach this topic by splitting it up into 6 topics which are highlighted in this graphic:\n\n![Graphical overview of components of a good research project in R](assets/images/project_components.png)\n\nAs you move through these you will see that there are areas of overlap and complementarity between them. These topics are also central to the choice of approaches in the [three workflows for reproducibility](@sec-workflows) that we will share.\n\n## <img src=\"assets/images/RStudio_logo_flat.svg\" style=\"vertical-align:middle; height:1.5em;\"/> projects \n\nHow many times have you opened an R script and been greeted by this line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/ben/path/that/only/I/have\")\n```\n:::\n\n\nWhile it is well-intentioned (i.e. avoiding the need to have full paths for all objects that will subsequently be loaded or daved ) the problem with it is obvious: This specific path is only relevant for the author and not other potential users and even for the author it is will be invalid if they happen to change computers. The good news is there is a very simple way to avoid having to use `setwd()` at all by using [**Rstudio Projects**]().\n\nRstudio projects designate new or existing folders as a defined working directory by creating an `.RProj` file within them. This means that when you open a project the working directory of the Rstudio session will automatically be set to the directory that the .RProj file is located in and the paths of all files in this folder will be relative to this.\n\nThe `.Rproj` file can be shared along with the rest of the research project files meaning that others users can easily open the Project to have the same working directory removing the need for those troublesome `setwd()` lines.\n\n### Creating and opening projects {#sec-creating-projects}\n\nCreating an Rstudio project is as simple as using *File \\> New Project* in the top left and then choosing between creating the Project in a new or existing directory:\n\nThere are several ways to open a Projects:\n\n1.  Using *File \\> Open Project* in the top left of Rstudio.\n\n![](assets/images/File_open_project.png){fig-align=\"center\" width=\"50%\"}\n\n2.  Using the drop down menu in the top-right of the Rstudio session.\n\n![](assets/images/Open_project_right.png){fig-align=\"center\" width=\"50%\"}\n\n3.  Outside of R by double clicking on the `.Rproj` file in the folder.\n\n![](assets/images/Open_project_explorer.png){fig-align=\"center\" width=\"50%\"}\n\n### Utilising project specific `.Rprofile`'s {#sec-rprofile}\n\nAnother useful feature of Rstudio projects is the ability to store project-specific settings using the `.Rprofile` file which controls the initialisation behaviour of the R session when the project is opened. A useful application of this for reproducible research projects is automatically open a particular script, for example a master script that runs all the code in the project (which is a concept that will discussed under [workflow decomposition](@sec-workflow-decomposition)).\n\nTo do this the contents of your `.Rprofile` file would like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    # Open the script specificed by the path\n    rstudioapi::navigateToFile('scripts/script_to_open.R', line = -1L, column = -1L)\n}, action = \"append\")\n```\n:::\n\n\nThe easiest way to create and edit `.Rprofile` files is to use the functions from the package [`usethis`](https://usethis.r-lib.org/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note the use of scope = \"project\" to create a project specific .Rprofile\nusethis::edit_r_profile(scope = \"project\")\n```\n:::\n\n\n## Environment management \n\nThese lines of code are also probably familiar from the beginning of many an R script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n\nBut what is wrong with these lines?\n\nWell firstly, there is no indication of what version of the package is to be installed and hence if the code installing this package is old it may not work with the most recent version of the package (This is less of a problem for well established packages like the Tidyverse but for less common packages, that may see large changes between versions, it could be substantial).\n\nSecondly, having the user install an unspecified version of a package could also cause dependency conflicts with other packages required by the code. This is because almost all packages have some form of dependency (i.e. they use the functionality of) on other packages. This is shown aptly by the image below which, while out-dated now, showed that in 2014 to install the 7 most popular R packages at the time would actually install 63 packages in total when considering their dependencies.\n\n![Package dependencies of popular R package [@devries2014]](assets/images/package_dependencies_2.png){width=\"50%\" fig-align=\"center\"}\n\nHowever the problem is bigger than just packages because when your code runs it is also utilising:\n\n-   A specific version of R\n\n-   A specific operating system\n\n-   Specific versions of system dependencies, i.e. other software in other languages that R packages themselves utilise e.g GDAL for spatial analysis packages like `terra`.\n\nAll of these things together make up what is known as the 'environment' of your code. Hence the process of documenting and managing this environment to is ensure that your code is reproducible (i.e. it not only runs but also consistently produces the same results).\n\nThere are different approaches to environment management that differ in their complexity and hence maybe suited to some projects and not others. For the purpose of this workshop we will focus on what we have found is one of the most user-friendly ways to manage your *package environment* (caveat that will be discussed) in R which is the package `renv`. Below we will introduce this package in more detail as it will form a central part of the [three workflows for reproducibility](@sec-workflows) that we present.\n\n### Creating reproducible environments with `renv`\n\nAs mentioned above [`renv`](https://rstudio.github.io/renv/articles/renv.html) is an R package that helps you create reproducible environments for your R projects by not only documenting your package environment but also providing functionality to re-create it.\n\nIt does this by creating **project specific libraries** (i.e. directories: `renv/library`) which contain all the packages used by your project. This is different from the default approach to package usage and installation whereby all packages are stored in a single library on your machine (system library). Having separate project libraries means \"that different projects can use different versions of packages and installing, updating, or removing packages in one project doesn't affect any other project.\" [@renv]. In order to make sure that your project uses the project library everytime it is opened `renv` utilises the functionality of [`.Rprofile's`](@sec-rprofile) to set the project library as the default library.\n\nAnother key process of renv is to create project specific **lockfiles** (`renv.lock`) which contain sufficient metadata about each package in the project library so that it can be re-installed on a new machine.\n\nAs alluded to, renv does a great job of managing your packages but is not intended to manage other aspects of your environment such as: tracking your version of R or your operating system. This is why if you want 'bullet-proof' reproducibility renv needs to be used alongside other approaches such as containerization which is the [3rd and most complex workflow](@sec-docker_workflow) we will discuss.\n\n## Writing clean code \n\nThe notion of writing 'clean' code can be daunting, especially for those new to programming. However, the most important thing to bear in mind is that there is no objective measure that makes code 'clean' vs. 'un-clean', rather we should of think 'clean' coding as the pursuit of making your code easier to read, understand and maintain. Also while we should aspire to writing clean code, it is arguably more important that it functions correctly and efficiently.\n\nThe central concept of clean coding is that, like normal writing, we should follow a set of rules and conventions. For example, in English a sentence should start with a capital letter and end with a full stop. Unfortunately, in terms of writing R code there is not a single set of conventions that everyone proscribes to, instead there are numerous styles that have been outlined and the important thing is to choose a style and apply it consistently in your coding.\n\nPerhaps the two most common styles are the [Tidyverse style](https://style.tidyverse.org/) and the [Google R style](https://google.github.io/styleguide/Rguide.html) (Which is actually a derivative of the former). Neither style can be said to be the more correct, rather they express opinionated preferences on a series of common topics such as: Object naming, use of assignment operators, spacing, indentation, line length, parentheses placement, etc.\n\nRather than detail all of these topics here we will focus on just on some related tips that we think are most relevant for scientific research coding, including how to automate the formatting of your code to a particular style. However, we encourage you to go through the different style guides when you have the time.\n\n### Script headers {#sec-script_headers}\n\nStarting your scripts with a consistent header containing information about it's purpose, author/s, creation and modification dates is a great step making your workflow more understandable and hopefully reproducible. There are no rules as to what such a header should look like but this is the style I like to use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Script_title: Brief description of script purpose\n##\n## Notes: More detailed notes about the script and it's purpose\n##\n## Date created: \n## Author(s):\n#############################################################################\n```\n:::\n\n\nTo save time inserting this header into new scripts you use Rstudio's [**Code snippets**](https://docs.posit.co/ide/user/ide/guide/productivity/snippets.html) feature. Code snippets are simply text macros that quickly insert a section of code using a short keyword.\n\nTo create your own Code snippet go to *Tools \\> Global Options \\> Code \\> Edit Snippets* and then add a new snippet with your code below it:\n\n![](assets/images/Code_snippet_add.png){fig-align=\"center\" width=\"50%\"}\n\nTo use a code snippet simply start typing the keyword in the script and the auto-completion list will appear then press `Tab` and the code section will be inserted:\n\n![](assets/images/Code_snippet_completion.png){fig-align=\"center\" width=\"50%\"}\n\n### Code sections {#sec-code_sections}\n\nAs you may already know braced (`{}`) sections of code (i.e. function definitions, conditional blocks, etc.) can be folded to hide their contents in RStudio by clicking on the small triangle in the left margin.\n\n![](assets/images/code_section_sequential.png){fig-align=\"center\" width=\"50%\"}\n\nHowever, an often overlooked feature is the ability to create named code sections that can be also folded, as well as easily navigated between. These can be used to break longer scripts into a set of discrete regions according to specific parts of the analysis ([discussed in more detail later](@sec-workflow-decomposition)). In this regard, another good tip is to give the resulting sections sequential alphabetical or numerical Pre-fixes. Code sections are created by inserting a comment line that contains at least four trailing dashes (`-`), equal signs (`=`), or pound signs (`#`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Section One ---------------------------------\n \n# Section Two =================================\n \n# Section Three #############################\n```\n:::\n\n\nAlternatively you can use the *Code \\> Insert Section* command.\n\nTo navigate between code sections:\n\n-   Use the **Jump To** menu available at the bottom of the editor[@positsupport2024]\n\n![](assets/images/code_section_jumpto.png){fig-align=\"center\"}\n\n-   Use the document outline pane in the top right corner of the source pane\n\n![](assets/images/code_section_documentpane.dark.png){fig-align=\"center\"}\n\n### Automating the styling of your code\n\nThere are two R packages that are very helpful in terms of ensuring your code confirms to a consistent style: [`lintr`](https://lintr.r-lib.org/) and [`styler`](https://styler.r-lib.org/).\n\n-   `lintr` checks your code for common style issues and potential programming errors then presents them to you to correct, think of it like doing a 'spellcheck' on a written document.\n-   `styler` is more *active* in the sense that it automatically format's your code to a particular style, the default of which is the tidyverse style.\n\nTo use lintr and styler you call their functions like any package but styler can also be used through the **Rstudio Addins** menu below the Navigation bar as shown in this gif:\n\n<img src=\"https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif\" width=\"50%\"/>\n\nAnother very useful feature of both packages is that they can be used as part of a continuous integration (CI) workflow using a version control application like Git. This is a topic that we will cover as part of our [Version control with Git](@sec-git_workflow) workflow but what it means is that the styler and lintr functions are run automatically when you push your code to a remote repository.\n\n## Workflow decomposition \n\nIn computer sciences workflow decomposition refers to the structuring or compartmentalising of your code into seperate logical parts that makes it easier to maintain [@decompos2024].\n\nIn terms of coding scientific research projects many of us probably already instinctively do decomposition to some degree by splitting typical processes such as data preparation, statistical modelling, analysis of results and producing final visualizations.\n\nHowever this is not always realized in the most understandable way, for example we may have seperate scripts with logical sounding names like: `Data_prep.R` and `Data_analysis.R` but can others really be expected to know exactly which order these must be run in, or indeed whether they even need to be run sequentially at all?\n\nA good 1st step to remedying this is to give your scripts sequential numeric tags in their names, e.g. `01_Data_prep.R`, `02_Data_analysis.R`. This will also ensure that they are presented in numerical order when placed in a designated directory [Structuring your project directory](@sec-structuring) and can be explicitly described in your [project documentation](@sec-documentation).\n\nBut you can take this to the next level by creating a *Master* script that sources your other scripts in sequence (think of them as *sub-scripts*) so that users of your code need only run one script. To do this is as simple as creating the master script as you would any normal R script (*File \\> New File \\> R script*) and then using the `base::source()` function to run the sub-scripts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#############################################################################\n## Master_script: Run steps of research project in order\n##\n## Date created: 30/7/2024\n## Author(s): Jane Doe\n#############################################################################\n\n### =========================================================================\n### A- Prepare dependent variable data\n### =========================================================================\n\n#Prepare LULC data\nsource(\"Scripts/Preparation/Dep_var_dat_prep.R\", local = scripting_env)\n\n### =========================================================================\n### B- Prepare independent variable data\n### =========================================================================\n\n#Prepare predictor data\nsource(\"Scripts/Preparation/Ind_var_data_prep.R\", local = scripting_env)\n\n### =========================================================================\n### C- Perform statisical modelling\n### =========================================================================\n\nsource(\"Scripts/Modelling/Fit_stat_models.R\", local = scripting_env)\n```\n:::\n\n\nAs you can see in this example code I have also made use of a [script header](@sec-script_headers) and [code sections](@sec-code_sections), that were previously discussed, to make the division of sub-processes even clearer. Another advantage of this approach is that all sub-scripts can utilise the same environment (defined by the `source(local= )` argument) which means that each individual script does not need to load packages or paths as objects.\n\nFinally, within your sub-scripts processes should also be seperated into code sections and ideally any repetitive tasks should be performed with custom functions which again are contained within their own files.\n\nFollowing this approach you end up with a workflow that will look something like this:\n\n![](assets/images/workflow_decomposition.png){width=\"100%\"}\n\nThe benefit of this hierarchical approach to structuring is that it is not only easier to debug and maintain individual processes but it is also more amenable to adding new processes.\n\n## Structuring your project directory \n\nSimilar to having clean code, having a clean project directory that has well-organised sub-directories goes a long way towards making your projects code easier to understand for others. For software development there are numerous sets of conventions for directories structures although these are not always so applicable for scientific research projects. However we can borrow some basic principles, try to use: - Use logical naming - Stick to a consistent style, i.e. use of captialisation and seperators - Make use of nested sub-directories e.g `data/raw/climatic/precipitation/2020/precip_2020.rds` vs. `data/precip_2020_raw.rds`. This is very helpful when it comes to programatically constructing file paths especially in projects with a lot of data.\n\nAs an example my go-to project directory structure looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n└── my_project\n    ├── data # The research data\n    │   ├── raw\n    │   └── processed\n    ├── output # Storing results\n    ├── publication # Containing the academic manuscript of the project\n    ├── src # For all files that perform operations in the project\n    │   ├── scripts\n    │   └── functions\n    └── tools # Auxilliary files and settings\n```\n:::\n\n\nRather than manually create this directory structure everytime you start a new project, save yourself some time and automate it by using Rstudio's [**Project Templates**](https://docs.posit.co/ide/user/ide/guide/productivity/project-templates.html) functionality. This allows you to select a custom template as an option when creating a new [Rstudio project](@sec-creating-projects) through the New project wizard (*File \\> New Project \\> New Directory \\> New Project Template*).\n\nTo implement this even as an intermediate R user is fairly labor intensive as your custom project directory template needs to be contained within an R-package, in order to be available in the wizard. However, quite a few templates with directory structures appropriate for scientific research projects have been created by others:\n\n-   [`rrtools`](https://github.com/benmarwick/rrtools)\n\n-   [`ProjectTemplate`](http://projecttemplate.net/)\n\n-   [`template`](https://pakillo.github.io/template/)\n\n-   [`addinit`](https://dreamrs.github.io/addinit/) (Not a template but an interactive shiny add-in for project creation)\n\n## Project documentation \n\nAs an example of why documentation is important think about if you bought a new table from Ikea only to excitedly rip open the box and find that there are no instructions for how to assemble it. Sure, you know what a table is supposedly to look like and given enough time you will end up with something that will probably be mostly right but maybe it's missing small details. Also it will probably take you just as long to take it apart in 5 years time. Well, working with undocumented code for research projects is similar except a lot more complicated!\n\nWriting comprehensive documentation that covers all aspects of our projects is time-consuming which is why it is often neglected. For example, there are a lot of different metadata conventions that exist that you could apply. However, learning and adhering strictly to these can be overwhelming and possibly lead to the opposite effect i.e. they are not simple for others to understand either.\n\nIn response to this there has been a movement in the R research community to adopt the *research as package* approach, which, as the name suggests, involves creating your project as an R-package which has a strict set of conventions for documentation [@marwick2018]. This is a viable approach for those who are familiar with R-packages but is arguably not the best for all projects and users.\n\nInstead, we would suggest to follow the maxim of *not letting the perfect be the enemy of the good* and to focus on these key areas:\n\n-   **Provide adequate in-script commentary**: This is perhaps contentious for those from a software development community, but given the choice I would rather have to read through a script with too many comments than one with too few. However remember that comments should be used to explain the purpose of the code, not what the code is doing. In line with this use [script headers](@sec-script_headers).\n\n-   **Document your functions with `roxygen` skeletons**:\n\n-   **Include a `README` file**: README files are where you should document your project at the macro-level i.e. what it is about and how it is supposed to work.\n\nThe latter of these two are more detailed so we have provided further information and tips in sections below.\n\n### Function documentation with `roxygen2` {#sec-roxygen}\n\nBase R provides a standard way of documenting a package where each function is documented in an `.Rd` file (R documentation). This documentation uses a custom syntax to detail key aspects of the functions such as their input parameters, outputs and any package dependencies [@wickham2024].\n\nIn the case of many research projects you will not be creating a package however it is still useful to apply this documentation style to your functions as it is a good way to make them understandable and easier to modify by others. For example, having clear information about the object (e.g. a vector or data.frame) that a function accepts, saves others time in guessing what the function is expecting if they are trying to use new data.\n\nHowever, rather than manually writing `.Rd` files, we can use the `roxygen2` package to automatically generate these files from a block of comments that are added to the top of the function scripts. To add this comment block, place your cursor inside a function you want to document and press `Ctrl + Shift + R` (or `Cmd + Shift + R` on Mac) or you can go to *code tools \\> insert roxygen skeleton* (code tools is represented by the wand icon in the top row of the source pane). As you can see in this gif below, when you insert the roxygen block it will already contain the names of the function names, its arguments and any returns and the function name. You can then fill in the rest of the information, such as the description and dependencies etc. for a guide to these other fields see the [roxygen2 documentation](https://roxygen2.r-lib.org/articles/rd.html).\n\n![Inserting roxygen block [@hajnala2018]](https://jozef.io/img/r102-01-add-roxy-skeleton.gif){alt=\"Inserting roxygen block\" width=\"50%\"}\n\n### Tips for README writing\n\nIf you look at the source code of R packages or projects that use R in Github repositories you will see that they all contain `README.md` files. This is the markdown format of the README file and is the most common format for README files in R projects. These files are often accompanied by the corresponding file `README.Rmd` which generates the `README.md` file. Markdown format is used for README's because it can be read by many programs and rendered in a variety of formats. In this sense writing the README for your project in markdown makes sense and there tools available to help you do this such as the `usethis` package which has a function [`use_readme_rmd()`](https://usethis.r-lib.org/reference/use_readme_rmd.html) that will create a `README.Rmd` file for you. However, depending on who you anticipate using your project you may also want to create your README as a raw text file (`.txt`) which may be a more familiar format for some users and again can be opened by many different programs.\n\nAgain there is not a single standardised format for what should be included in your README file but here is an example of a README file that was written for one of the authors code/data upload alongside a publication: [README.txt](assets/README_demo.txt)\n\nYou will see that one of the things this README includes is a tree diagram which shows the directory structure of the project right down to the file level. This is a useful way to give an overview of what users should find included in the project and then explanatory notes can be added to explain the purpose of each file or directory. Such a diagram can be easily generated using the `fs` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"fs\")\nlibrary(fs)\n\n#vector path of the target directory to make a file tree from\nTarget_dir <- \"YOUR DIR\"\n\n#produce tree diagram of directory sub-dirs and files and save output using capture.ouput from base R utils.\ncapture.output(dir_tree(Target_dir), file= 'Dir_tree_output.txt')\n```\n:::\n\n:::\n------------------------------------------------------------------------------\n\n\n\n# Workflows for Reproducibility {#sec-workflows}\n\nFor this workshop we will outline three different workflows for creating reproducible research projects with R combined with other tools. We have named these workflows as follows:\n1. Rstudio project to Zenodo pipeline\n2. Containerization with Docker\n3. Version control with Git\n\nThese workflows are inter-related in the sense that 2. and 3. build upon elements of the first and indeed the techniques of the latter workflows can also be combined together. The workflows differ in the level of reproducibility they ensure but the trade-off for better reproducibility is increased complexity. As such we would suggest that the most reproducible workflow may not always be the most appropriate to implement dependent on the needs of your research project and the capabilities of the collaborators involved.\n\n** TO DO?: Add a table to compare the workflows **\n\nOf course, these workflows are by no-means the only way of doing things and indeed we would actively encourage you to expand upon them in developing your own preferred approach.  \n\n## Rstudio project to Zenodo pipeline {#sec-zenodo_workflow}\n\n![](assets/images/project_zenodo_workflow.png){.lightbox width=\"70%\" fig-align=\"center\"}\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n## Use renv to create project-specific environments in R\n### Setting Up a Project with renv\n\n-   Initialize renv in your project:\n    -   Use renv::init() to initialize renv in your project directory.\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # initialize the project environment\n    renv::init()\n    ```\n    :::\n\n    -   This command creates an isolated environment for your project, and ensures that all package dependencies are managed within that environment. When you run renv::init(), several important files and directories are created:\n        -   renv.lock, a lock file that records the exact versions of all packages installed and used in your project. This file is crucial for replicating the environment on other machines or by other people.\n        -   .Rprofile, this file is automatically run every time you start R in your project, and renv uses it to configure your R session to use the packages in your project library.\n     -   renv/ directory, a directory that stores the local library of packages specific to your project. It also contains metadata and configuration files that renv uses to manage the environment.\n    -   Other directories and files are also created. To share an R environment, renv.lock, .Rprofile, renv/settings.json and renv/activate.R must be provided.\n     \n     \n## Managing Packages with renv\n\n-   Install packages within renv\n    -   Install packages as usual. Then running renv::snapshot() will include the library in the lock file if it is loaded in a script located within the project folder\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Install a library, e.g dplyr\n    install.packages(\"dplyr\")\n    \n    # load the package\n    library(dplyr)\n    \n    # create the snapshot\n    renv::snapshot()\n    ```\n    :::\n\n        \n     \n## Reuse an existing renv project environment:\n-   Get all the packages used in the existing environment installed on your computer\n    -   Copy the project folder to your machine.\n    -   Run renv::restore() in the root folder of the project where the .lock file is located. This will replicate the environment from an existing lockfile and install all packages with the correct versions.\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # install packages used in the environment\n    renv::restore()\n    ```\n    :::\n\n\n# Publish your work with Zenodo to make it accessible and citable   \n## Install zen4R to access Zenodo through r\n-   Zenodo can be accessed with r library zen4R to upload, edit, publish and download data.\n    -   Install zen4R library with the following code:\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # install dependency \"remotes\"\n    install.packages(\"remotes\")\n    \n    #install zen4R\n    require(\"remotes\")\n    install_github(\"eblondel/zen4R\")\n    ```\n    :::\n\n\n## Create a new Zenodo record\n-   A zenodo record includes metadata, data and a DOI which is automatically generated by Zenodo for all uploads.\n    -   Go to https://zenodo.org/account/settings/applications/. This requires a Zenodo account. Sign up if necessary or log in.\n    -   Once you're logged in create a new \"Personal access token\".\n    -   Then run the following code in r to c create a new record\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(zen4R)\n    \n    # Create manager to access your Zenodo repository\n    zenodo <- ZenodoManager$new(\n      token = \"your_token\", \n      logger = \"INFO\" \n    )\n    \n    # Create a new empty record\n    myrec <- ZenodoRecord$new()\n    ```\n    :::\n\n\n-   The types of metadata that can be included in a Zenodo record are vast. A full list can be found in the documentation at https://developers.zenodo.org/#representation. The code below gives some examples:\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    myrec$setTitle(\"zen4R\") # title of the record\n    myrec$addAdditionalTitle(\"This is an alternative title\", type = \"alternative-title\")\n    myrec$setDescription(\"Interface to 'Zenodo' REST API\") #description\n    myrec$addAdditionalDescription(\"This is an abstract\", type = \"abstract\")\n    myrec$setPublicationDate(\"2024-09-16\") #Format YYYY-MM-DD\n    myrec$setResourceType(\"dataset\")\n    myrec$addCreator(firstname = \"Manuel\", lastname = \"Kurmann\", role = \"datamanager\", orcid = \"0000-0001-8411-3966\")\n    myrec$setKeywords(c(\"R\",\"dataset\")) #For filtering\n    myrec$addReference(\"Blondel E. et al., 2024 zen4R: R Interface to Zenodo REST API\")\n    myrec$setPublisher(\"CRAN\") #Publisher\n    ```\n    :::\n\n    \n-   A record can be deposited on Zenodo before it is published. This will add the record to your account without making it public yet. A deposited record can still be edited or deleted. If you prefer a graphical interface, you can also edit the record on the Zenodo website.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # deposit record\n    myrec <- zenodo$depositRecord(myrec, publish = TRUE)\n    \n    # add data to the record\n    zenodo$uploadFile(\"path/to/your/file\", record = myrec)\n    \n    # publish record\n    myrec <- zenodo$publishRecord(myrec$id)\n    \n    # delete record if you want to start over\n    zenodo$deleteRecord(myrec$id)\n    ```\n    :::\n\n\n## Edit published Zenodo records\n-   It is also possible to edit or update the metadata of published records.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # get your record by metadata query, e.g. by title\n    myrec <- zenodo$getDepositions(q='title:zen4R')\n    \n    # get depositions creates a list, access first element\n    myrec <- myrec[[1]]\n    \n    # edit metadata\n    myrec <- zenodo$editRecord(myrec$id)\n    myrec$setTitle(\"zen4R 2.0\")\n    \n    #redeposit and publish the edited record\n    myrec <- zenodo$depositRecord(myrec, publish = TRUE)\n    ```\n    :::\n\n\n-   It is not possible to edit the data attached to a published record. However, it is possible to upload an updated version.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # get your record by metadata query, e.g. by title\n    myrec <- zenodo$getDepositions(q='title:zen4R 2.0')\n    \n    # get depositions creates a list, access first element\n    myrec <- myrec[[1]]\n    \n    # edit data, delete_latest_files = TRUE deletes data of previous version,\n    myrec <- zenodo$depositRecordVersion(myrec, delete_latest_files = TRUE, files = \"path/to/your/new/file\", publish = TRUE)\n    ```\n    :::\n\n\n\n\n## Containerisation with Docker{#sec-docker_workflow}\n\n\n\n---\nbibliography: references.bib\nexecute:\n  echo: true\n  eval: false\n  error: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n<!-- Web content -->\n\n::: {.content-visible when-format=\"html\"}\n![](assets/images/Docker_workflow.png){.lightbox width=\"70%\"\nfig-align=\"center\"}\n\n**The title of this workflow raises two questions, the first being: what\nis containerization?**\n\nSimply put containerization is the process of bundling code along with\nall of it's dependencies, i.e. all the components we discussed as making\nup the [environment](@sec-environment-management), including the\noperating system, software libraries (packages), and other system\nsoftware. The fact everything needed to run the code is included means\nthat the code is portable and can be run on any platform or cloud\nservice. This also makes containerization something of a gold standard\nfor reproducibility as the entire environment is explicitly re-produced.\n\n**and the second: what is Docker?**\n\n[Docker](https://www.docker.com/) is an open-source, and the most\npopular, platform for containerization. Before we dive into a practical\nexample using Docker for research projects with R it is important to\nintroduce some three key terms that we will come across:\n\n-   `Dockerfile`: The first step in the containerization process, they\n    are a straightforward text file containing a collection of commands\n    or procedures to create a new Docker Image. In this sense we can\n    consider a Dockerfile are the source code of Docker Image.\n    Importantly, Dockerfiles typically start from a base image, which is\n    a existing Docker Image that your image is extending.\n\n-   `Docker Image`: A read-only file that contains the instructions for\n    creating a Docker Container. Think of an image as the blueprint of\n    what will be in a container when it is running. Docker Images can be\n    shared via [Dockerhub](https://hub.docker.com/), so that they can be\n    used by others.\n\n-   `Docker Container`: Is an actual running instance of a Docker image.\n    It runs completely isolated from the host environment by default and\n    only accesses host files (i.e. data) if it has been configured to do\n    so. It is possible to create multiple containers simultaneously from\n    the same Docker Image, and each container can be started, stopped,\n    moved, and deleted independently of the others.\n\nThe graphic below show the relationships between these components\nincluding the central commands of Docker that connect them `build` and\n`run`:\n\n![](assets/images/docker_explainer.png){.lightbox width=\"70%\"\nfig-align=\"center\"}\n\n### Using Docker with R\n\nSo to create a `Docker Image` to containerize our R research projects we\nneed to start by creating a `Dockerfile` and, as mentioned above, this should\nstart with a base image. In our case this base image must logically\ninclude R and RStudio (if we want to utilise the RStudio Projects\nfeatures).\n\nFortunately there is a project that specifically catalogs and manages\nDocker Images for R projects: [`Rocker`](https://rocker-project.org/).\nThe images available through the Rocker project not only include\ndifferent versions of R and RStudio but also images containing\ncollections of R packages for specific purposes (e.g. tidyverse for data\nwrangling and visualisation, geospatial packages etc.).\n\nIn terms of actually creating the `Dockerfile` for our R project, this\ncan be done manually (See a good R-focused tutorial[here](https://colinfay.me/docker-r-reproducibility/)), however there are also R packages that can help with this process such as [`dockerfiler`](https://thinkr-open.github.io/dockerfiler/) and the `[rrtools`](https://github.com/benmarwick/rrtools) package. \n\nFor our workflow we will use the `dockerfiler` package.\n- Main function of the package is `dockerfile_build()` which creates a Dockerfile and builds a Docker image from it.\n\n\n\n### Docker with renv\n\n### Creating docker image \n\n### Running docker container\n\n\n\n\n\n\n\n\n\nhttps://github.com/noamross/nyhackr-docker-talk/blob/master/Noam_Ross_DockerForTheUseR_nyhackr_2018-07-10.pdf\n\nhttps://www.statworx.com/en/content-hub/blog/running-your-r-script-in-docker/\n\nstevedore package for pulling images from Dockerhub using the Docker API\nhttps://richfitz.github.io/stevedore/\n:::\n\n\n\n## Version control with Git{#sec-git_workflow}\n\n![](assets/images/version_control_workflow.png){.lightbox width=\"70%\" fig-align=\"center\"}\n<!--{{< include contents/Git_workflow.qmd >}}-->\n\n# Quarto {#sec-Quarto}\n\n\n<!-- Web content -->\n:::: {.content-hidden when-format=\"revealjs\"}\n## A brief introduction to Quarto\n\nQuatro is a unified authoring framework that allows for the integration of code, written material and a wide variety of interactive visual formats into one publishable finished document.\n\n####  Quarto allows you to:\n\n-   Create dynamic content that is updated as your code changes\n\n-   Numerous thematic settings for high quality formatting including 'Pandoc' markdown support for equations and cross-referencing\n\n-   Publish your work as websites or books\n\n-   Edit with any text editor including VS Code, RStudio and more\n\n### Some of the creative ways in which you can use Quarto is:\n\n#### 1. Visualize and publish interactive plots using html widgets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(plotly)\np <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +\n            geom_bar(position = \"dodge\")\nggplotly(p)\n```\n:::\n\n\n\n#### 2. Create interactive geo-spatial mapping segments\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\n\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng= 8.548, lat=47.376, popup=\"ETH\")\n```\n:::\n\n\n#### 3. Create multi-purpose dashboards to demostrate your research output\n\n\n![](https://quarto.org/docs/dashboards/examples/thumbnails/customer-churn-dashboard.png){width=60% fig-align=\"center\"}\n:::\n\n<!-- Presentation content -->\n::: {.content-visible when-format=\"revealjs\"}\n\n\n\n:::\n\n\n\n\n# Guided excercises {#sec-exercises}\n\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n\n## Rstudio project to Zenodo exercise {#sec-Rproj_zenodo_exercise}\n\n\n\n\n\n---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n## Containerisation with Docker exercise\n\nIn this exercise we will create a Docker container for a simple R project. The project is the same that is created in the first workflow [exercise](@sec-Rproj_zenodo_exercise), however to save time or in case you haven't completed this exercise we will start with the finished output from it.  \n\n<br><a href=\"https://www.example.com/example.zip\" class=\"download\"><i class=\"fa fa-download\"></i> <b>Download Source Code Files</b></a>\n\n\n\n---\ntitle: \"Untitled\"\neditor: visual\n---\n\n\n\n\n## Write a paper with Quarto\n\n\n\n\n# Resources {#sec-resources}\n\n<!--{{\\< include contents/resources.qmd \\>}}-->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}