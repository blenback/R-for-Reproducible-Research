{
  "hash": "acea6527bf113e79a851b36bc6712ca3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: true\n  eval: false\n  error: false\n---\n\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n![](assets/images/Docker_workflow.png){.lightbox width=\"70%\" fig-align=\"center\"}\n\n**The title of this workflow raises two questions, the first being: what is containerization?**\n\nSimply put containerization is the process of bundling code along with all of it's dependencies, i.e. all the components we discussed as making up the [environment](@sec-environment-management), including the operating system, software libraries (packages), and other system software. The fact everything needed to run the code is included means that the code is portable and can be run on any platform or cloud service. This also makes containerization something of a gold standard for reproducibility as the entire environment is explicitly re-produced.\n\n**and the second: what is Docker?**\n\n[Docker](https://www.docker.com/) is an open-source, and the most popular, platform for containerization. Before we dive into a practical example using Docker for research projects with R it is important to introduce some three key terms that we will come across:\n\n-   `Dockerfile`: The first step in the containerization process, they are a straightforward text file containing a collection of commands or procedures to create a new Docker Image. In this sense we can consider a Dockerfile are the source code of Docker Image. Importantly, Dockerfiles typically start from a base image, which is a existing Docker Image that your image is extending.\n\n-   `Docker Image`: A read-only file that contains the instructions for creating a Docker Container. Think of an image as the blueprint of what will be in a container when it is running. Docker Images can be shared via [Dockerhub](https://hub.docker.com/), so that they can be used by others.\n\n-   `Docker Container`: Is an actual running instance of a Docker image. It runs completely isolated from the host environment by default and only accesses host files (i.e. data) if it has been configured to do so. It is possible to create multiple containers simultaneously from the same Docker Image, and each container can be started, stopped, moved, and deleted independently of the others.\n\nThe graphic below show the relationships between these components including the central commands of Docker that connect them `build` and `run`:\n\n![](assets/images/docker_explainer.png){.lightbox width=\"70%\" fig-align=\"center\"}\n\n### Using Docker with R\n\nSo to create a `Docker Image` to containerize our R research projects we need to start by creating a `Dockerfile` and, as mentioned above, this should start with a base image. In our case this base image must logically include R and RStudio (if we want to utilise the RStudio Projects features).\n\nFortunately there is a project that specifically catalogs and manages Docker Images for R projects: [`Rocker`](https://rocker-project.org/). The images available through the Rocker project not only include different versions of R and RStudio but also images containing collections of R packages for specific purposes (e.g. tidyverse for data wrangling and visualisation, geospatial packages etc.).\n\nIn terms of actually creating the `Dockerfile` for our R project, this can be done manually (See a good R-focused tutorial[here](https://colinfay.me/docker-r-reproducibility/)), however there are also R packages that can help with this process such as [`dockerfiler`](https://thinkr-open.github.io/dockerfiler/) and the `[rrtools`\\](https://github.com/benmarwick/rrtools) package.\n\nFor our [exercise](@sec-docker_exercise) of this workflow we will use the `dockerfiler` package, which creates a custom class object that represents the Dockerfile and has slots corresponding to common elements of Docker images. This allows us to add elements to the dockerfile in a more R-like way. The following code snippet demonstrates adding `Maintainer` details to a `Dockerfile` object, before saving it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dockerfiler)\n# Create a dockerfile template\nmy_dock <- Dockerfile$new()\n\n# Add maintainer\nmy_dock$MAINTAINER(\"Jane Doe\", \"jane_doe@gmail.com\")\n\n# Save\nmy_dock$write()\n```\n:::\n\n\n\n### Docker with `renv`\n\nDocker can be used with the `renv` package to [manage the package environment of your project](@sec-environment-management).\n\nThere are two methods of implementing this which come with their own considerations:\n\n1.  **Use `renv` to install packages when the Docker image is built**: This approach is useful if yo plan to have have multiple projects with **identical package requirements**. This because by creating an image containing this package library you can simply re-use the image as a base for new images for different projects [@ushey2024].**Warning:** Restoring the package library (`renv::restore()`) when building the image will be slow if there are large numbers of packages so try to avoid the need to re-build the base image many times.\n2.  **Use `renv` to install/restore packages only when Docker containers are run**: This approach is better when you plan to have multiple projects that are built from the same base image but require **different package requirements**. Hence it is preferable to not included the package library in the image but instead to mount different project specific libraries to the container when it is run [@ushey2024]. If project libraries are dynamically provisioned in this way and `renv::restore()` is run with caching this means that the packages are not re-installed everytime the container is run.\n\n\n:::\n\n<!-- Presentation content -->\n\n::: {.content-visible when-format=\"revealjs\"}\n## Containerization with <img src=\"assets/images/Docker.dark.svg\" style=\"vertical-align:0%; height:1.25em;\"/>\n\n![](assets/images/Docker_workflow.png){.lightbox width=\"70%\" fig-align=\"center\"}\n\n\n## Containerization with <img src=\"assets/images/Docker.dark.svg\" style=\"vertical-align:0%; height:1.25em;\"/>\n\n### What is containerization?\n\n\n\n## Containerization with <img src=\"assets/images/Docker.dark.svg\" style=\"vertical-align:0%; height:1.25em;\"/>\n\n### What is Docker?\n\n\n## Using Docker with R\n\n## Docker with `renv`\n\n\n:::\n",
    "supporting": [
      "Docker_workflow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}