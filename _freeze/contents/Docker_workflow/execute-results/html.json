{
  "hash": "1cec3090fdc9da324a811cee0f7bd768",
  "result": {
    "engine": "knitr",
    "markdown": "---\nbibliography: references.bib\nexecute:\n  echo: true\n  eval: false\n  error: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n\n<!-- Web content -->\n\n::: {.content-hidden when-format=\"revealjs\"}\n![](assets/images/Docker_workflow.png){.lightbox width=\"70%\"\nfig-align=\"center\"}\n\n**The title of this workflow raises two questions, the first being: what\nis containerization?**\n\nSimply put containerization is the process of bundling code along with\nall of it's dependencies, i.e. all the components we discussed as making\nup the [environment](@sec-environment-management), including the\noperating system, software libraries (packages), and other system\nsoftware. The fact everything needed to run the code is included means\nthat the code is portable and can be run on any platform or cloud\nservice. This also makes containerization something of a gold standard\nfor reproducibility as the entire environment is explicitly re-produced.\n\n**and the second: what is Docker?**\n\n[Docker](https://www.docker.com/) is an open-source, and the most\npopular, platform for containerization. Before we dive into a practical\nexample using Docker for research projects with R it is important to\nintroduce some three key terms that we will come across:\n\n-   `Dockerfile`: The first step in the containerization process, they\n    are a straightforward text file containing a collection of commands\n    or procedures to create a new Docker Image. In this sense we can\n    consider a Dockerfile are the source code of Docker Image.\n    Importantly, Dockerfiles typically start from a base image, which is\n    a existing Docker Image that your image is extending.\n\n-   `Docker Image`: A read-only file that contains the instructions for\n    creating a Docker Container. Think of an image as the blueprint of\n    what will be in a container when it is running. Docker Images can be\n    shared via [Dockerhub](https://hub.docker.com/), so that they can be\n    used by others.\n\n-   `Docker Container`: Is an actual running instance of a Docker image.\n    It runs completely isolated from the host environment by default and\n    only accesses host files (i.e. data) if it has been configured to do\n    so. It is possible to create multiple containers simultaneously from\n    the same Docker Image, and each container can be started, stopped,\n    moved, and deleted independently of the others.\n\nThe graphic below show the relationships between these components\nincluding the central commands of Docker that connect them `build` and\n`run`:\n\n![](assets/images/docker_explainer.png){.lightbox width=\"70%\"\nfig-align=\"center\"}\n\n### Using Docker with R\n\nSo to create a `Docker Image` to containerize our R research projects we\nneed to start by creating a `Dockerfile` and, as mentioned above, this should\nstart with a base image. In our case this base image must logically\ninclude R and RStudio (if we want to utilise the RStudio Projects\nfeatures).\n\nFortunately there is a project that specifically catalogs and manages\nDocker Images for R projects: [`Rocker`](https://rocker-project.org/).\nThe images available through the Rocker project not only include\ndifferent versions of R and RStudio but also images containing\ncollections of R packages for specific purposes (e.g. tidyverse for data\nwrangling and visualisation, geospatial packages etc.).\n\nIn terms of actually creating the `Dockerfile` for our R project, this\ncan be done manually (See a good R-focused tutorial[here](https://colinfay.me/docker-r-reproducibility/)), however there are also R packages that can help with this process such as [`dockerfiler`](https://thinkr-open.github.io/dockerfiler/) and the `[rrtools`](https://github.com/benmarwick/rrtools) package. \n\nFor our [exercise](@sec-docker_exercise) of this workflow we will use the `dockerfiler` package, which uses simple assignment lines to add elements to a Dockerfile object, before saving it:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dockerfiler)\n# Create a dockerfile template\nmy_dock <- Dockerfile$new()\n\n# Add maintainer\nmy_dock$MAINTAINER(\"Jane Doe\", \"jane_doe@gmail.com\")\n\n# Save\nmy_dock$write()\n```\n:::\n\n\n\n\n\n### Docker with renv\n\n\n\n:::\n\n<!-- Presentation content -->\n::: {.content-visible when-format=\"revealjs\"}\n:::\n",
    "supporting": [
      "Docker_workflow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}